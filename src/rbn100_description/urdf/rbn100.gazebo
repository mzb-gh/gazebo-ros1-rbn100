<?xml version="1.0"?>

<robot name="rbn100_chassis" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:property name="v_camera" value="false" />
  <xacro:property name="v_sonar" value="false" />
  <xacro:property name="v_cliff" value="false" />

  <gazebo reference="base_link">
    <material>Gazebo/Gold</material>
  </gazebo>

  <!-- wheel go: torque > friction > 0, 
       gazebo probably has default torque -->
  <xacro:macro name="wheel_prop" params="pos" >
    <gazebo reference="${pos}_wheel">
      <material>Gazebo/Gray</material>
      <mu1>0.2</mu1>
      <mu2>0.2</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>20</maxVel>
    </gazebo>
  </xacro:macro>
  <xacro:wheel_prop pos="left" />
  <xacro:wheel_prop pos="right" />

  <xacro:macro name="universal_prop" params="pos" >
    <gazebo reference="universal_${pos}">
      <material>Gazebo/Gray</material>
      <mu1>0.0003</mu1>
      <mu2>0.0003</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
    </gazebo>
  </xacro:macro>
  <xacro:universal_prop pos="FL" />
  <xacro:universal_prop pos="FR" />
  <xacro:universal_prop pos="BL" />
  <xacro:universal_prop pos="BR" />

  <xacro:macro name="caster_prop" params="pos" >
    <gazebo reference="${pos}_caster">
      <mu1>0.1</mu1>
      <mu2>0.1</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>20</maxVel>
      <material>Gazebo/Gray</material>
    </gazebo>
  </xacro:macro>
  <xacro:caster_prop pos="front" />
  <xacro:caster_prop pos="back" />

  <!-- lidar -->
  <gazebo reference="lidar">
    <material>Gazebo/FlatBlack</material>
    <sensor type="ray" name="lidar_sensor">
    <!-- 传感器通用参数 -->
      <!-- true:一直更新; false:发布旧数据直到有订阅者 -->
      <always_on>false</always_on>
      <!-- 自行更新频率 -->
      <update_rate>15</update_rate>
      <visualize>0</visualize>
      <pose>0 0 0 0 0 0</pose>
    <!-- end: 传感器通用参数 -->
      <ray>
        <scan>
          <horizontal>
            <samples>1536</samples>
            <resolution>1</resolution>
            <min_angle>-2.356</min_angle>
            <max_angle>2.356</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.05</min>
          <max>30</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="lidar_controller" filename="libgazebo_ros_laser.so">
        <topicName>simscan</topicName>
        <frameName>lidar</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- why namespace is / ???-->

  <!-- tof -->
  <gazebo reference="tof_link">
    <material>Gazebo/FlatBlack</material>
    <sensor type="depth" name="kinect">
      <update_rate>11.0</update_rate>
      <visualize>0</visualize>
      <camera>
        <horizontal_fov>1.047198</horizontal_fov> <!-- 60 degree -->
        <image>
            <width>224</width>
            <height>172</height>
            <format>L8</format>
        </image>
        <clip>
            <near>0.01</near> <!-- can't be zero -->
            <far>30</far>
        </clip>
      </camera>
      <plugin name="tof_controller" filename="libgazebo_ros_openni_kinect.so">
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <cameraName>tof</cameraName>
          <!-- 插件中坐标系名字 -->
          <frameName>kinect</frameName>
          <!-- keep zero,parent tag sensor will control frame rate -->
          <updateRate>0</updateRate>
          <pointCloudTopicName>points</pointCloudTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <!-- 点云工作范围，在父标签基础上的附加限制 -->
          <pointCloudCutoff>0.2</pointCloudCutoff>
          <pointCloudCutoffMax>5</pointCloudCutoffMax>
          <!-- 默认深度数据32fc1编码 -->
          <useDepth16UC1Format>false</useDepth16UC1Format>
      </plugin>
    </sensor>
  </gazebo>

  <!-- stereo fisheye camera -->
  <!-- for circular image, twice as low as hfov -->
  <!-- <cutoff_angle>0.846</cutoff_angle> -->
  <gazebo reference="stereo_camera_link">
      <material>Gazebo/FlatBlack</material>
      <sensor name="fisheye_left_sensor" type="wideanglecamera">
        <update_rate>25</update_rate>
        <visualize>0</visualize>
        <camera>
          <pose>0.02 0.06 0 0 0 0</pose>
          <horizontal_fov>1.693</horizontal_fov>
          <image>
            <width>640</width>
            <height>400</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>30</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <lens>
            <type>custom</type>
            <custom_function>
                <c1>1</c1>
                <c2>0.8</c2>
                <f>1</f>
                <fun>sin</fun>
            </custom_function>
            <scale_to_hfov>true</scale_to_hfov>
            <env_texture_size>1536</env_texture_size>
          </lens>
          <save enabled="false">
            <path>/tmp/camera_save_tutorial</path>
          </save>
          <update_rate>25</update_rate>
        </camera>
      </sensor>
      <sensor name="fisheye_right_sensor" type="wideanglecamera">
        <update_rate>25</update_rate>
        <visualize>0</visualize>
        <camera>
          <pose>0.02 -0.06 0 0 0 0</pose>
          <horizontal_fov>1.693</horizontal_fov>
          <image>
            <width>640</width>
            <height>400</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>30</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <lens>
            <type>custom</type>
            <custom_function>
                <c1>1</c1>
                <c2>0.8</c2>
                <f>1</f>
                <fun>sin</fun>
            </custom_function>
            <scale_to_hfov>true</scale_to_hfov>
            <env_texture_size>1536</env_texture_size>
          </lens>
          <save enabled="false">
            <path>/tmp/camera_save_tutorial</path>
          </save>
          <update_rate>25</update_rate>
        </camera>
      </sensor>
  </gazebo>

  <!-- normal camera(type:camera/multicamera) ,pinhole, blomb bob -->
  <!-- <gazebo reference="stereo_camera_link">
      <sensor name="camera" type="multicamera">
        <update_rate>25</update_rate>
        <visualize>true</visualize>
        <camera name="left_camera">
          <pose>0 0.06 0 0 0 0</pose>
          <horizontal_fov>1.692</horizontal_fov>
          <image>
            <width>640</width>
            <height>400</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.007</stddev>
          </noise>
          <distortion>
            <k1>-0.25</k1>
            <k2>0.12</k2>
            <k3>0.0</k3>
            <p1>-0.00028</p1>
            <p2>-0.00005</p2>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <camera name="right_camera">
          <pose>0 -0.06 0 0 0 0</pose>
          <horizontal_fov>1.692</horizontal_fov>
          <image>
            <width>640</width>
            <height>400</height>
            <format>L8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>4
          <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.007</stddev>
          </noise>
          <distortion>
            <k1>-0.25</k1>
            <k2>0.12</k2>
            <k3>0.0</k3>
            <p1>-0.00028</p1>
            <p2>-0.00005</p2>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_multicamera.so">
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <cameraName>stereo_camera</cameraName>
          <frameName>stereo_camera_link</frameName>
          <hackBaseline>0.12</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
  </gazebo> -->

  <!-- 超声和cliff采样数和精度需要确认 -->
  <!-- sonar -->
  <xacro:macro name="sonar_plugin" params="pos">
    <gazebo reference="sonar_${pos}_link">
      <material>Gazebo/FlatBlack</material>
      <sensor type="ray" name="sonar_${pos}_sensor">
        <pose>0 0 0 0 0 0</pose>
        <visualize>0</visualize>
        <update_rate>10</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>10</samples>  <!-- need reconfirm -->
              <resolution>1</resolution>
              <min_angle>-0.2617</min_angle> <!-- 15 degree -->
              <max_angle>0.2617</max_angle>
            </horizontal>
            <vertical>
              <samples>10</samples>
              <resolution>1</resolution>
              <min_angle>-0.2617</min_angle>
              <max_angle>0.2617</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.02</min>
            <max>2.5</max>
            <resolution>0.001</resolution>
          </range>
        </ray>
        <!-- <plugin filename="libgazebo_ros_range.so" name="sonar_controller">
          <gaussianNoise>0.005</gaussianNoise>
          <topicName>sonar_${pos}</topicName>
          <frameName>sonar_${pos}</frameName>
          <radiation>ultrasound</radiation>
          <fov>0.523</fov>
        </plugin> -->
      </sensor>
    </gazebo>
  </xacro:macro>
  <xacro:sonar_plugin pos="front"/>
  <xacro:sonar_plugin pos="back"/>
  <xacro:sonar_plugin pos="FL"/>
  <xacro:sonar_plugin pos="FR"/>

  <!-- cliff -->
  <xacro:macro name="cliff_plugin" params="pos">
    <gazebo reference="cliff_${pos}_link">
      <material>Gazebo/FlatBlack</material>
      <sensor type="ray" name="cliff_${pos}_sensor">
        <pose>0 0 0 0 0 0</pose>
        <update_rate>50</update_rate>
        <visualize>0</visualize>
        <ray>
          <scan>
            <horizontal>
              <samples>10</samples>
              <resolution>1</resolution>
              <min_angle>-0.0436</min_angle>  <!-- -2.5 degree -->
              <max_angle>0.0436</max_angle> <!-- 2.5 degree -->
            </horizontal>
            <vertical>
              <samples>10</samples>
              <resolution>1</resolution>
              <min_angle>-0.0436</min_angle>  <!-- -2.5 degree -->
              <max_angle>0.0436</max_angle> <!-- 2.5 degree -->
            </vertical>
          </scan>
          <range>
            <min>0.02</min>
            <max>0.15</max>
            <resolution>0.005</resolution>
          </range>
        </ray>
        <!-- <plugin filename="libgazebo_ros_range.so" name="cliff_controller">
          <robotNamespace>/rbn100</robotNamespace>
          <frameName>cliff_${pos}</frameName>
          <topicName>cliff_${pos}</topicName>
          <radiation>ultrasound</radiation>
          <fov>0.0872</fov>
          <gaussianNoise>0.0005</gaussianNoise>
          <updateRate>0</updateRate>
        </plugin> -->
      </sensor>
    </gazebo>
  </xacro:macro>
  <xacro:cliff_plugin pos="FL"/>
  <xacro:cliff_plugin pos="FR"/>
  <xacro:cliff_plugin pos="BL"/>
  <xacro:cliff_plugin pos="BR"/>

  <!-- bumper -->
  <gazebo reference="bumper">
    <material>Gazebo/FlatBlack</material>
    <selfCollide>false</selfCollide>
    <sensor name="bumper_sensor" type="contact">
      <update_rate>50.0</update_rate>
      <contact>
        <!-- 
          bumper是urdf中collision标签的名字，其他固定。
          可以通过gz sdf -p model.urdf > model.sdf查，
          也可以在gazebo里面查看gazebo发布的topic。
         -->
        <collision>base_footprint_fixed_joint_lump__bumper_collision_1</collision>
      </contact>
      <!-- <plugin filename="libgazebo_ros_bumper.so" name="bumper_controller">
        <alwaysOn>true</alwaysOn>
        <bumperTopicName>contact</bumperTopicName>
        <frameName>bumper</frameName>
      </plugin> -->
    </sensor>
  </gazebo>

  <!-- 
      imu
   -->
  <!-- gazebo sensor plugin -->
  <!-- sim rate has to be 1000Hz for good imu data -->
  <gazebo reference="imu">
    <gravity>true</gravity>
    <sensor type="imu" name="imu">
      <pose>0 0 0 0 0 0</pose>
      <always_on>true</always_on>
      <update_rate>500</update_rate>
      <plugin name="imu_controller" filename="libgazebo_ros_imu_sensor.so">
        <topicName>camera/imu</topicName>
        <bodyName>imu</bodyName>
        <frameName>imu</frameName>
        <updateRateHZ>500</updateRateHZ>
        <gaussianNoise>0.00001</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
    </sensor>
  </gazebo>

  <!-- gazebo model plugin -->
  <!-- <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>base_footprint</bodyName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>20.0</updateRate>
    </plugin>
  </gazebo> -->

  <!-- kuboki, find imu obj -->
  <!-- <gazebo reference="imu">
    <sensor type="imu" name="imu">
      <update_rate>500</update_rate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>0.0014</stddev>
            <bias_mean>0.0</bias_mean>
            <bias_stddev>0.0</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </sensor>
  </gazebo> -->

  <!-- 
      control
   -->
  <!-- ros plugin, ros_control -->
  <!-- <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/rbn100</robotNamespace>
    </plugin>
  </gazebo> -->

  <!-- gazebo plugin(model), diff drive -->
  <!-- <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
        <rosDebugLevel>Debug</rosDebugLevel>
        <publishWheelTF>true</publishWheelTF>
        <robotNamespace>/</robotNamespace>
        <publishTf>1</publishTf>
        <publishWheelJointState>true</publishWheelJointState>
        <updateRate>1000</updateRate>
        <legacyMode>true</legacyMode>
        <leftJoint>left_wheel_joint</leftJoint>
        <rightJoint>right_wheel_joint</rightJoint>
        <wheelSeparation>0.322</wheelSeparation>
        <wheelDiameter>0.0169</wheelDiameter>
        <broadcastTF>1</broadcastTF>
        <wheelTorque>5</wheelTorque>
        <wheelAcceleration>0.8</wheelAcceleration>
        <commandTopic>cmd_vel</commandTopic>
        <odometrySource>0</odometrySource>
        <odometryFrame>odom</odometryFrame> 
        <odometryTopic>odom</odometryTopic>
        <publishOdom>true</publishOdom>
        <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
  </gazebo> -->

  <!-- gazebo plugin(model), customize -->
  <gazebo>
    <plugin name="rbn100_controller" filename="libgazebo_ros_rbn100.so">
      <rosDebugLevel>Info</rosDebugLevel>
      <publish_tf>0</publish_tf>
      <left_wheel_joint_name>left_wheel_joint</left_wheel_joint_name>
      <right_wheel_joint_name>right_wheel_joint</right_wheel_joint_name>
      <wheel_separation>0.322</wheel_separation>
      <wheel_diameter>0.169</wheel_diameter>
      <torque>5</torque>
      <odom_topic>odom</odom_topic>
      <!-- 按秒计算 -->
      <velocity_command_timeout>1</velocity_command_timeout> 
      <!-- gazebo sensor name, to find sensor object-->
      <cliff_FL_sensor_name>cliff_FL_sensor</cliff_FL_sensor_name>
      <cliff_FR_sensor_name>cliff_FR_sensor</cliff_FR_sensor_name>
      <cliff_BL_sensor_name>cliff_BL_sensor</cliff_BL_sensor_name>
      <cliff_BR_sensor_name>cliff_BR_sensor</cliff_BR_sensor_name>
      <cliff_detection_threshold>0.12</cliff_detection_threshold>
      <sonar_FL_sensor_name>sonar_FL_sensor</sonar_FL_sensor_name>
      <sonar_front_sensor_name>sonar_front_sensor</sonar_front_sensor_name>
      <sonar_FR_sensor_name>sonar_FR_sensor</sonar_FR_sensor_name>
      <sonar_back_sensor_name>sonar_back_sensor</sonar_back_sensor_name>
      <sonar_noise>0.005</sonar_noise>
      <sonar_rate>10</sonar_rate>
      <bumper_sensor_name>bumper_sensor</bumper_sensor_name>
      <!-- <imu_name>imu</imu_name> -->
      <!-- sim rate has to be 1000Hz for good imu data -->
      <!-- <imu_rate>500</imu_rate> -->
      <update_rate>50</update_rate>
      <camera_left_sensor_name>fisheye_left_sensor</camera_left_sensor_name>
      <camera_right_sensor_name>fisheye_right_sensor</camera_right_sensor_name>
      <!-- frame for tf tree -->
      <camera_left_frame>fisheye_left_optical_frame</camera_left_frame>
      <camera_right_frame>fisheye_right_optical_frame</camera_right_frame>
      <camera_left_topic>fisheye_left/image_raw</camera_left_topic>
      <camera_right_topic>fisheye_right/image_raw</camera_right_topic>
      <camera_rate>25</camera_rate>
    </plugin>
  </gazebo>
</robot>
