// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_RBN100_H_
#define FLATBUFFERS_GENERATED_REQUEST_RBN100_H_

#include "flatbuffers/flatbuffers.h"

#include "public_generated.h"

namespace RBN100 {

struct FRequestVideo;
struct FRequestVideoBuilder;

struct FRequestScanQR;
struct FRequestScanQRBuilder;

struct FRequestCreateSence;
struct FRequestCreateSenceBuilder;

struct FRequestCreateMap_Tag;
struct FRequestCreateMap_TagBuilder;

struct FRequestCreateMap_Any;
struct FRequestCreateMap_AnyBuilder;

struct FRequestCreateMap_Elevator;
struct FRequestCreateMap_ElevatorBuilder;

struct FRequestCreateMap_Stop;
struct FRequestCreateMap_StopBuilder;

struct FRequestCreatePoseNode;
struct FRequestCreatePoseNodeBuilder;

struct FRequestCreateStartNode;
struct FRequestCreateStartNodeBuilder;

struct FRequestCreateStandByNode;
struct FRequestCreateStandByNodeBuilder;

struct FRequestCreatePassNode;
struct FRequestCreatePassNodeBuilder;

struct FRequestCreateJMRNode;
struct FRequestCreateJMRNodeBuilder;

struct FSenceInfo;
struct FSenceInfoBuilder;

struct FMapInfo;
struct FMapInfoBuilder;

struct FPoseNodeInfo;
struct FPoseNodeInfoBuilder;

struct FStartNodeInfo;
struct FStartNodeInfoBuilder;

struct FStandByNodeInfo;
struct FStandByNodeInfoBuilder;

struct FPassNodeInfo;
struct FPassNodeInfoBuilder;

struct FJMRNodeInfo;
struct FJMRNodeInfoBuilder;

struct FFloorIndex;
struct FFloorIndexBuilder;

struct FElevatorInfo;
struct FElevatorInfoBuilder;

struct FRequestElevatorInfoInput;
struct FRequestElevatorInfoInputBuilder;

struct FElevatorOutNodeInfo;
struct FElevatorOutNodeInfoBuilder;

struct FRequestCreateElevatorOutNode;
struct FRequestCreateElevatorOutNodeBuilder;

struct FElevatorTransformNodeInfo;
struct FElevatorTransformNodeInfoBuilder;

struct FRequestCreateElevatorTransformNode;
struct FRequestCreateElevatorTransformNodeBuilder;

struct FActionStandBy;
struct FActionStandByBuilder;

struct FRequestCreateActionStandBy;
struct FRequestCreateActionStandByBuilder;

struct FActionJMR;
struct FActionJMRBuilder;

struct FRequestCreateActionJMR;
struct FRequestCreateActionJMRBuilder;

struct FActionStart;
struct FActionStartBuilder;

struct FRequestCreateActionStart;
struct FRequestCreateActionStartBuilder;

struct FActionElevatorOut;
struct FActionElevatorOutBuilder;

struct FRequestCreateActionElevatorOut;
struct FRequestCreateActionElevatorOutBuilder;

struct FActionElevatorIn;
struct FActionElevatorInBuilder;

struct FRequestCreateActionElevatorIn;
struct FRequestCreateActionElevatorInBuilder;

struct FActionElevatorTransf;
struct FActionElevatorTransfBuilder;

struct FRequestCreateActionElevatorTransf;
struct FRequestCreateActionElevatorTransfBuilder;

struct FPathInfo;
struct FPathInfoBuilder;

struct FTaskNodeList;
struct FTaskNodeListBuilder;

struct FTaskActionList;
struct FTaskActionListBuilder;

struct FReturnNode;
struct FReturnNodeBuilder;

struct FTaskInfo;
struct FTaskInfoBuilder;

struct FRequestSetTask;
struct FRequestSetTaskBuilder;

struct FSubTaskInfo;
struct FSubTaskInfoBuilder;

struct FRequestSubTask;
struct FRequestSubTaskBuilder;

struct FRequestSetPath;
struct FRequestSetPathBuilder;

struct FRequestLogin;
struct FRequestLoginBuilder;

struct FRequestGetSenceList;
struct FRequestGetSenceListBuilder;

struct FRequestGetNodeList;
struct FRequestGetNodeListBuilder;

struct FRequestSetState;
struct FRequestSetStateBuilder;

struct FRequestGetPathList;
struct FRequestGetPathListBuilder;

struct FRequestGetMapList;
struct FRequestGetMapListBuilder;

struct FRequestSetSysTime;
struct FRequestSetSysTimeBuilder;

struct FRequestGetSysTime;
struct FRequestGetSysTimeBuilder;

struct FRequestOpenHatch;
struct FRequestOpenHatchBuilder;

struct FRequestCloseHatch;
struct FRequestCloseHatchBuilder;

struct FRequestElevatorState;
struct FRequestElevatorStateBuilder;

struct FRequestTaskPause;
struct FRequestTaskPauseBuilder;

struct FRequestTaskReStart;
struct FRequestTaskReStartBuilder;

struct FTaskStopInfo;
struct FTaskStopInfoBuilder;

struct FRequestTaskStop;
struct FRequestTaskStopBuilder;

struct Request;
struct RequestBuilder;

enum FTaskStopType {
  FTaskStopType_Stop = 0,
  FTaskStopType_NodeStop = 1,
  FTaskStopType_NodeStopException = 2,
  FTaskStopType_NodeStopStart = 3,
  FTaskStopType_MIN = FTaskStopType_Stop,
  FTaskStopType_MAX = FTaskStopType_NodeStopStart
};

inline const FTaskStopType (&EnumValuesFTaskStopType())[4] {
  static const FTaskStopType values[] = {
    FTaskStopType_Stop,
    FTaskStopType_NodeStop,
    FTaskStopType_NodeStopException,
    FTaskStopType_NodeStopStart
  };
  return values;
}

inline const char * const *EnumNamesFTaskStopType() {
  static const char * const names[5] = {
    "Stop",
    "NodeStop",
    "NodeStopException",
    "NodeStopStart",
    nullptr
  };
  return names;
}

inline const char *EnumNameFTaskStopType(FTaskStopType e) {
  if (flatbuffers::IsOutRange(e, FTaskStopType_Stop, FTaskStopType_NodeStopStart)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFTaskStopType()[index];
}

enum FTaskSendSrc {
  FTaskSendSrc_UI = 0,
  FTaskSendSrc_App = 1,
  FTaskSendSrc_Cloud = 2,
  FTaskSendSrc_Local = 3,
  FTaskSendSrc_MIN = FTaskSendSrc_UI,
  FTaskSendSrc_MAX = FTaskSendSrc_Local
};

inline const FTaskSendSrc (&EnumValuesFTaskSendSrc())[4] {
  static const FTaskSendSrc values[] = {
    FTaskSendSrc_UI,
    FTaskSendSrc_App,
    FTaskSendSrc_Cloud,
    FTaskSendSrc_Local
  };
  return values;
}

inline const char * const *EnumNamesFTaskSendSrc() {
  static const char * const names[5] = {
    "UI",
    "App",
    "Cloud",
    "Local",
    nullptr
  };
  return names;
}

inline const char *EnumNameFTaskSendSrc(FTaskSendSrc e) {
  if (flatbuffers::IsOutRange(e, FTaskSendSrc_UI, FTaskSendSrc_Local)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFTaskSendSrc()[index];
}

enum FRequestDataField {
  FRequestDataField_NONE = 0,
  FRequestDataField_FRequestVideo = 1,
  FRequestDataField_FRequestScanQR = 2,
  FRequestDataField_FRequestCreateSence = 3,
  FRequestDataField_FRequestCreateMap_Tag = 4,
  FRequestDataField_FRequestCreateMap_Any = 5,
  FRequestDataField_FRequestCreateMap_Elevator = 6,
  FRequestDataField_FRequestCreateMap_Stop = 7,
  FRequestDataField_FRequestCreatePoseNode = 8,
  FRequestDataField_FRequestCreateStartNode = 9,
  FRequestDataField_FRequestCreateStandByNode = 10,
  FRequestDataField_FRequestCreatePassNode = 11,
  FRequestDataField_FRequestCreateJMRNode = 12,
  FRequestDataField_FRequestElevatorInfoInput = 13,
  FRequestDataField_FRequestCreateElevatorOutNode = 14,
  FRequestDataField_FRequestCreateElevatorTransformNode = 15,
  FRequestDataField_FRequestCreateActionStandBy = 16,
  FRequestDataField_FRequestCreateActionJMR = 17,
  FRequestDataField_FRequestCreateActionStart = 18,
  FRequestDataField_FRequestCreateActionElevatorOut = 19,
  FRequestDataField_FRequestCreateActionElevatorIn = 20,
  FRequestDataField_FRequestCreateActionElevatorTransf = 21,
  FRequestDataField_FRequestSetTask = 22,
  FRequestDataField_FRequestSubTask = 23,
  FRequestDataField_FRequestSetPath = 24,
  FRequestDataField_FRequestLogin = 25,
  FRequestDataField_FRequestGetSenceList = 26,
  FRequestDataField_FRequestSetState = 27,
  FRequestDataField_FRequestGetPathList = 28,
  FRequestDataField_FRequestGetNodeList = 29,
  FRequestDataField_FRequestSetSysTime = 30,
  FRequestDataField_FRequestGetSysTime = 31,
  FRequestDataField_FRequestOpenHatch = 32,
  FRequestDataField_FRequestCloseHatch = 33,
  FRequestDataField_FRequestGetMapList = 34,
  FRequestDataField_FRequestElevatorState = 35,
  FRequestDataField_FRequestTaskStop = 36,
  FRequestDataField_MIN = FRequestDataField_NONE,
  FRequestDataField_MAX = FRequestDataField_FRequestTaskStop
};

inline const FRequestDataField (&EnumValuesFRequestDataField())[37] {
  static const FRequestDataField values[] = {
    FRequestDataField_NONE,
    FRequestDataField_FRequestVideo,
    FRequestDataField_FRequestScanQR,
    FRequestDataField_FRequestCreateSence,
    FRequestDataField_FRequestCreateMap_Tag,
    FRequestDataField_FRequestCreateMap_Any,
    FRequestDataField_FRequestCreateMap_Elevator,
    FRequestDataField_FRequestCreateMap_Stop,
    FRequestDataField_FRequestCreatePoseNode,
    FRequestDataField_FRequestCreateStartNode,
    FRequestDataField_FRequestCreateStandByNode,
    FRequestDataField_FRequestCreatePassNode,
    FRequestDataField_FRequestCreateJMRNode,
    FRequestDataField_FRequestElevatorInfoInput,
    FRequestDataField_FRequestCreateElevatorOutNode,
    FRequestDataField_FRequestCreateElevatorTransformNode,
    FRequestDataField_FRequestCreateActionStandBy,
    FRequestDataField_FRequestCreateActionJMR,
    FRequestDataField_FRequestCreateActionStart,
    FRequestDataField_FRequestCreateActionElevatorOut,
    FRequestDataField_FRequestCreateActionElevatorIn,
    FRequestDataField_FRequestCreateActionElevatorTransf,
    FRequestDataField_FRequestSetTask,
    FRequestDataField_FRequestSubTask,
    FRequestDataField_FRequestSetPath,
    FRequestDataField_FRequestLogin,
    FRequestDataField_FRequestGetSenceList,
    FRequestDataField_FRequestSetState,
    FRequestDataField_FRequestGetPathList,
    FRequestDataField_FRequestGetNodeList,
    FRequestDataField_FRequestSetSysTime,
    FRequestDataField_FRequestGetSysTime,
    FRequestDataField_FRequestOpenHatch,
    FRequestDataField_FRequestCloseHatch,
    FRequestDataField_FRequestGetMapList,
    FRequestDataField_FRequestElevatorState,
    FRequestDataField_FRequestTaskStop
  };
  return values;
}

inline const char * const *EnumNamesFRequestDataField() {
  static const char * const names[38] = {
    "NONE",
    "FRequestVideo",
    "FRequestScanQR",
    "FRequestCreateSence",
    "FRequestCreateMap_Tag",
    "FRequestCreateMap_Any",
    "FRequestCreateMap_Elevator",
    "FRequestCreateMap_Stop",
    "FRequestCreatePoseNode",
    "FRequestCreateStartNode",
    "FRequestCreateStandByNode",
    "FRequestCreatePassNode",
    "FRequestCreateJMRNode",
    "FRequestElevatorInfoInput",
    "FRequestCreateElevatorOutNode",
    "FRequestCreateElevatorTransformNode",
    "FRequestCreateActionStandBy",
    "FRequestCreateActionJMR",
    "FRequestCreateActionStart",
    "FRequestCreateActionElevatorOut",
    "FRequestCreateActionElevatorIn",
    "FRequestCreateActionElevatorTransf",
    "FRequestSetTask",
    "FRequestSubTask",
    "FRequestSetPath",
    "FRequestLogin",
    "FRequestGetSenceList",
    "FRequestSetState",
    "FRequestGetPathList",
    "FRequestGetNodeList",
    "FRequestSetSysTime",
    "FRequestGetSysTime",
    "FRequestOpenHatch",
    "FRequestCloseHatch",
    "FRequestGetMapList",
    "FRequestElevatorState",
    "FRequestTaskStop",
    nullptr
  };
  return names;
}

inline const char *EnumNameFRequestDataField(FRequestDataField e) {
  if (flatbuffers::IsOutRange(e, FRequestDataField_NONE, FRequestDataField_FRequestTaskStop)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFRequestDataField()[index];
}

template<typename T> struct FRequestDataFieldTraits {
  static const FRequestDataField enum_value = FRequestDataField_NONE;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestVideo> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestVideo;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestScanQR> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestScanQR;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateSence> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateSence;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateMap_Tag> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateMap_Tag;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateMap_Any> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateMap_Any;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateMap_Elevator> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateMap_Elevator;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateMap_Stop> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateMap_Stop;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreatePoseNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreatePoseNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateStartNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateStartNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateStandByNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateStandByNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreatePassNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreatePassNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateJMRNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateJMRNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestElevatorInfoInput> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestElevatorInfoInput;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateElevatorOutNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateElevatorOutNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateElevatorTransformNode> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateElevatorTransformNode;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionStandBy> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionStandBy;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionJMR> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionJMR;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionStart> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionStart;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionElevatorOut> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionElevatorOut;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionElevatorIn> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionElevatorIn;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCreateActionElevatorTransf> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCreateActionElevatorTransf;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestSetTask> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestSetTask;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestSubTask> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestSubTask;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestSetPath> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestSetPath;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestLogin> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestLogin;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestGetSenceList> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestGetSenceList;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestSetState> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestSetState;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestGetPathList> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestGetPathList;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestGetNodeList> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestGetNodeList;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestSetSysTime> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestSetSysTime;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestGetSysTime> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestGetSysTime;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestOpenHatch> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestOpenHatch;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestCloseHatch> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestCloseHatch;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestGetMapList> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestGetMapList;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestElevatorState> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestElevatorState;
};

template<> struct FRequestDataFieldTraits<RBN100::FRequestTaskStop> {
  static const FRequestDataField enum_value = FRequestDataField_FRequestTaskStop;
};

bool VerifyFRequestDataField(flatbuffers::Verifier &verifier, const void *obj, FRequestDataField type);
bool VerifyFRequestDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FRequestVideo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestVideoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct FRequestVideoBuilder {
  typedef FRequestVideo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(FRequestVideo::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit FRequestVideoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestVideoBuilder &operator=(const FRequestVideoBuilder &);
  flatbuffers::Offset<FRequestVideo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestVideo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestVideo> CreateFRequestVideo(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  FRequestVideoBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct FRequestScanQR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestScanQRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_PRAM = 6
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  int32_t pram() const {
    return GetField<int32_t>(VT_PRAM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyField<int32_t>(verifier, VT_PRAM) &&
           verifier.EndTable();
  }
};

struct FRequestScanQRBuilder {
  typedef FRequestScanQR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(FRequestScanQR::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  void add_pram(int32_t pram) {
    fbb_.AddElement<int32_t>(FRequestScanQR::VT_PRAM, pram, 0);
  }
  explicit FRequestScanQRBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestScanQRBuilder &operator=(const FRequestScanQRBuilder &);
  flatbuffers::Offset<FRequestScanQR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestScanQR>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestScanQR> CreateFRequestScanQR(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false,
    int32_t pram = 0) {
  FRequestScanQRBuilder builder_(_fbb);
  builder_.add_pram(pram);
  builder_.add_state(state);
  return builder_.Finish();
}

struct FRequestCreateSence FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateSenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENCE_INFO = 4
  };
  const RBN100::FSenceInfo *sence_info() const {
    return GetPointer<const RBN100::FSenceInfo *>(VT_SENCE_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENCE_INFO) &&
           verifier.VerifyTable(sence_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateSenceBuilder {
  typedef FRequestCreateSence Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sence_info(flatbuffers::Offset<RBN100::FSenceInfo> sence_info) {
    fbb_.AddOffset(FRequestCreateSence::VT_SENCE_INFO, sence_info);
  }
  explicit FRequestCreateSenceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateSenceBuilder &operator=(const FRequestCreateSenceBuilder &);
  flatbuffers::Offset<FRequestCreateSence> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateSence>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateSence> CreateFRequestCreateSence(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FSenceInfo> sence_info = 0) {
  FRequestCreateSenceBuilder builder_(_fbb);
  builder_.add_sence_info(sence_info);
  return builder_.Finish();
}

struct FRequestCreateMap_Tag FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateMap_TagBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_INFO = 4
  };
  const RBN100::FMapInfo *map_info() const {
    return GetPointer<const RBN100::FMapInfo *>(VT_MAP_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAP_INFO) &&
           verifier.VerifyTable(map_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateMap_TagBuilder {
  typedef FRequestCreateMap_Tag Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map_info(flatbuffers::Offset<RBN100::FMapInfo> map_info) {
    fbb_.AddOffset(FRequestCreateMap_Tag::VT_MAP_INFO, map_info);
  }
  explicit FRequestCreateMap_TagBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateMap_TagBuilder &operator=(const FRequestCreateMap_TagBuilder &);
  flatbuffers::Offset<FRequestCreateMap_Tag> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateMap_Tag>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateMap_Tag> CreateFRequestCreateMap_Tag(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FMapInfo> map_info = 0) {
  FRequestCreateMap_TagBuilder builder_(_fbb);
  builder_.add_map_info(map_info);
  return builder_.Finish();
}

struct FRequestCreateMap_Any FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateMap_AnyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_INFO = 4
  };
  const RBN100::FMapInfo *map_info() const {
    return GetPointer<const RBN100::FMapInfo *>(VT_MAP_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAP_INFO) &&
           verifier.VerifyTable(map_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateMap_AnyBuilder {
  typedef FRequestCreateMap_Any Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map_info(flatbuffers::Offset<RBN100::FMapInfo> map_info) {
    fbb_.AddOffset(FRequestCreateMap_Any::VT_MAP_INFO, map_info);
  }
  explicit FRequestCreateMap_AnyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateMap_AnyBuilder &operator=(const FRequestCreateMap_AnyBuilder &);
  flatbuffers::Offset<FRequestCreateMap_Any> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateMap_Any>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateMap_Any> CreateFRequestCreateMap_Any(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FMapInfo> map_info = 0) {
  FRequestCreateMap_AnyBuilder builder_(_fbb);
  builder_.add_map_info(map_info);
  return builder_.Finish();
}

struct FRequestCreateMap_Elevator FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateMap_ElevatorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP_INFO = 4
  };
  const RBN100::FMapInfo *map_info() const {
    return GetPointer<const RBN100::FMapInfo *>(VT_MAP_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAP_INFO) &&
           verifier.VerifyTable(map_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateMap_ElevatorBuilder {
  typedef FRequestCreateMap_Elevator Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map_info(flatbuffers::Offset<RBN100::FMapInfo> map_info) {
    fbb_.AddOffset(FRequestCreateMap_Elevator::VT_MAP_INFO, map_info);
  }
  explicit FRequestCreateMap_ElevatorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateMap_ElevatorBuilder &operator=(const FRequestCreateMap_ElevatorBuilder &);
  flatbuffers::Offset<FRequestCreateMap_Elevator> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateMap_Elevator>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateMap_Elevator> CreateFRequestCreateMap_Elevator(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FMapInfo> map_info = 0) {
  FRequestCreateMap_ElevatorBuilder builder_(_fbb);
  builder_.add_map_info(map_info);
  return builder_.Finish();
}

struct FRequestCreateMap_Stop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateMap_StopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct FRequestCreateMap_StopBuilder {
  typedef FRequestCreateMap_Stop Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(FRequestCreateMap_Stop::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit FRequestCreateMap_StopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateMap_StopBuilder &operator=(const FRequestCreateMap_StopBuilder &);
  flatbuffers::Offset<FRequestCreateMap_Stop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateMap_Stop>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateMap_Stop> CreateFRequestCreateMap_Stop(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  FRequestCreateMap_StopBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct FRequestCreatePoseNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreatePoseNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSE_INFO = 4
  };
  const RBN100::FPoseNodeInfo *pose_info() const {
    return GetPointer<const RBN100::FPoseNodeInfo *>(VT_POSE_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSE_INFO) &&
           verifier.VerifyTable(pose_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreatePoseNodeBuilder {
  typedef FRequestCreatePoseNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pose_info(flatbuffers::Offset<RBN100::FPoseNodeInfo> pose_info) {
    fbb_.AddOffset(FRequestCreatePoseNode::VT_POSE_INFO, pose_info);
  }
  explicit FRequestCreatePoseNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreatePoseNodeBuilder &operator=(const FRequestCreatePoseNodeBuilder &);
  flatbuffers::Offset<FRequestCreatePoseNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreatePoseNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreatePoseNode> CreateFRequestCreatePoseNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FPoseNodeInfo> pose_info = 0) {
  FRequestCreatePoseNodeBuilder builder_(_fbb);
  builder_.add_pose_info(pose_info);
  return builder_.Finish();
}

struct FRequestCreateStartNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateStartNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START_INFO = 4
  };
  const RBN100::FStartNodeInfo *start_info() const {
    return GetPointer<const RBN100::FStartNodeInfo *>(VT_START_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_START_INFO) &&
           verifier.VerifyTable(start_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateStartNodeBuilder {
  typedef FRequestCreateStartNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_start_info(flatbuffers::Offset<RBN100::FStartNodeInfo> start_info) {
    fbb_.AddOffset(FRequestCreateStartNode::VT_START_INFO, start_info);
  }
  explicit FRequestCreateStartNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateStartNodeBuilder &operator=(const FRequestCreateStartNodeBuilder &);
  flatbuffers::Offset<FRequestCreateStartNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateStartNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateStartNode> CreateFRequestCreateStartNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FStartNodeInfo> start_info = 0) {
  FRequestCreateStartNodeBuilder builder_(_fbb);
  builder_.add_start_info(start_info);
  return builder_.Finish();
}

struct FRequestCreateStandByNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateStandByNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STANDBY_INFO = 4
  };
  const RBN100::FStandByNodeInfo *standby_info() const {
    return GetPointer<const RBN100::FStandByNodeInfo *>(VT_STANDBY_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STANDBY_INFO) &&
           verifier.VerifyTable(standby_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateStandByNodeBuilder {
  typedef FRequestCreateStandByNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_standby_info(flatbuffers::Offset<RBN100::FStandByNodeInfo> standby_info) {
    fbb_.AddOffset(FRequestCreateStandByNode::VT_STANDBY_INFO, standby_info);
  }
  explicit FRequestCreateStandByNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateStandByNodeBuilder &operator=(const FRequestCreateStandByNodeBuilder &);
  flatbuffers::Offset<FRequestCreateStandByNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateStandByNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateStandByNode> CreateFRequestCreateStandByNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FStandByNodeInfo> standby_info = 0) {
  FRequestCreateStandByNodeBuilder builder_(_fbb);
  builder_.add_standby_info(standby_info);
  return builder_.Finish();
}

struct FRequestCreatePassNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreatePassNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PASS_INFO = 4
  };
  const RBN100::FPassNodeInfo *pass_info() const {
    return GetPointer<const RBN100::FPassNodeInfo *>(VT_PASS_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PASS_INFO) &&
           verifier.VerifyTable(pass_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreatePassNodeBuilder {
  typedef FRequestCreatePassNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pass_info(flatbuffers::Offset<RBN100::FPassNodeInfo> pass_info) {
    fbb_.AddOffset(FRequestCreatePassNode::VT_PASS_INFO, pass_info);
  }
  explicit FRequestCreatePassNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreatePassNodeBuilder &operator=(const FRequestCreatePassNodeBuilder &);
  flatbuffers::Offset<FRequestCreatePassNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreatePassNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreatePassNode> CreateFRequestCreatePassNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FPassNodeInfo> pass_info = 0) {
  FRequestCreatePassNodeBuilder builder_(_fbb);
  builder_.add_pass_info(pass_info);
  return builder_.Finish();
}

struct FRequestCreateJMRNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateJMRNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JMR_INFO = 4
  };
  const RBN100::FJMRNodeInfo *jmr_info() const {
    return GetPointer<const RBN100::FJMRNodeInfo *>(VT_JMR_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JMR_INFO) &&
           verifier.VerifyTable(jmr_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateJMRNodeBuilder {
  typedef FRequestCreateJMRNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_jmr_info(flatbuffers::Offset<RBN100::FJMRNodeInfo> jmr_info) {
    fbb_.AddOffset(FRequestCreateJMRNode::VT_JMR_INFO, jmr_info);
  }
  explicit FRequestCreateJMRNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateJMRNodeBuilder &operator=(const FRequestCreateJMRNodeBuilder &);
  flatbuffers::Offset<FRequestCreateJMRNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateJMRNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateJMRNode> CreateFRequestCreateJMRNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FJMRNodeInfo> jmr_info = 0) {
  FRequestCreateJMRNodeBuilder builder_(_fbb);
  builder_.add_jmr_info(jmr_info);
  return builder_.Finish();
}

struct FSenceInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FSenceInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_CT_TIME = 6,
    VT_FIRST_UPLOAD_TM = 8,
    VT_MODIFY_TM = 10,
    VT_TEST_VER = 12,
    VT_OPERATE_VER = 14,
    VT_CORE_MIN_VER = 16,
    VT_PROJ_MIN_VER = 18,
    VT_SENCE_NAME = 20,
    VT_ADDR = 22,
    VT_CT_USER = 24,
    VT_PROJ_ID = 26,
    VT_PROJ_NAME = 28,
    VT_AREA_ID = 30,
    VT_AREA_NAME = 32,
    VT_RELY_DB_PATH = 34,
    VT_RELY_FILE_PATH = 36
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  const flatbuffers::String *test_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_TEST_VER);
  }
  const flatbuffers::String *operate_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_OPERATE_VER);
  }
  const flatbuffers::String *core_min_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_CORE_MIN_VER);
  }
  const flatbuffers::String *proj_min_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_MIN_VER);
  }
  const flatbuffers::String *sence_name() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_NAME);
  }
  const flatbuffers::String *addr() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDR);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  const flatbuffers::String *proj_id() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_ID);
  }
  const flatbuffers::String *proj_name() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_NAME);
  }
  const flatbuffers::String *area_id() const {
    return GetPointer<const flatbuffers::String *>(VT_AREA_ID);
  }
  const flatbuffers::String *area_name() const {
    return GetPointer<const flatbuffers::String *>(VT_AREA_NAME);
  }
  const flatbuffers::String *rely_db_path() const {
    return GetPointer<const flatbuffers::String *>(VT_RELY_DB_PATH);
  }
  const flatbuffers::String *rely_file_path() const {
    return GetPointer<const flatbuffers::String *>(VT_RELY_FILE_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyOffset(verifier, VT_TEST_VER) &&
           verifier.VerifyString(test_ver()) &&
           VerifyOffset(verifier, VT_OPERATE_VER) &&
           verifier.VerifyString(operate_ver()) &&
           VerifyOffset(verifier, VT_CORE_MIN_VER) &&
           verifier.VerifyString(core_min_ver()) &&
           VerifyOffset(verifier, VT_PROJ_MIN_VER) &&
           verifier.VerifyString(proj_min_ver()) &&
           VerifyOffset(verifier, VT_SENCE_NAME) &&
           verifier.VerifyString(sence_name()) &&
           VerifyOffset(verifier, VT_ADDR) &&
           verifier.VerifyString(addr()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyOffset(verifier, VT_PROJ_ID) &&
           verifier.VerifyString(proj_id()) &&
           VerifyOffset(verifier, VT_PROJ_NAME) &&
           verifier.VerifyString(proj_name()) &&
           VerifyOffset(verifier, VT_AREA_ID) &&
           verifier.VerifyString(area_id()) &&
           VerifyOffset(verifier, VT_AREA_NAME) &&
           verifier.VerifyString(area_name()) &&
           VerifyOffset(verifier, VT_RELY_DB_PATH) &&
           verifier.VerifyString(rely_db_path()) &&
           VerifyOffset(verifier, VT_RELY_FILE_PATH) &&
           verifier.VerifyString(rely_file_path()) &&
           verifier.EndTable();
  }
};

struct FSenceInfoBuilder {
  typedef FSenceInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FSenceInfo::VT_UUID, uuid);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FSenceInfo::VT_CT_TIME, ct_time, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FSenceInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FSenceInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_test_ver(flatbuffers::Offset<flatbuffers::String> test_ver) {
    fbb_.AddOffset(FSenceInfo::VT_TEST_VER, test_ver);
  }
  void add_operate_ver(flatbuffers::Offset<flatbuffers::String> operate_ver) {
    fbb_.AddOffset(FSenceInfo::VT_OPERATE_VER, operate_ver);
  }
  void add_core_min_ver(flatbuffers::Offset<flatbuffers::String> core_min_ver) {
    fbb_.AddOffset(FSenceInfo::VT_CORE_MIN_VER, core_min_ver);
  }
  void add_proj_min_ver(flatbuffers::Offset<flatbuffers::String> proj_min_ver) {
    fbb_.AddOffset(FSenceInfo::VT_PROJ_MIN_VER, proj_min_ver);
  }
  void add_sence_name(flatbuffers::Offset<flatbuffers::String> sence_name) {
    fbb_.AddOffset(FSenceInfo::VT_SENCE_NAME, sence_name);
  }
  void add_addr(flatbuffers::Offset<flatbuffers::String> addr) {
    fbb_.AddOffset(FSenceInfo::VT_ADDR, addr);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FSenceInfo::VT_CT_USER, ct_user);
  }
  void add_proj_id(flatbuffers::Offset<flatbuffers::String> proj_id) {
    fbb_.AddOffset(FSenceInfo::VT_PROJ_ID, proj_id);
  }
  void add_proj_name(flatbuffers::Offset<flatbuffers::String> proj_name) {
    fbb_.AddOffset(FSenceInfo::VT_PROJ_NAME, proj_name);
  }
  void add_area_id(flatbuffers::Offset<flatbuffers::String> area_id) {
    fbb_.AddOffset(FSenceInfo::VT_AREA_ID, area_id);
  }
  void add_area_name(flatbuffers::Offset<flatbuffers::String> area_name) {
    fbb_.AddOffset(FSenceInfo::VT_AREA_NAME, area_name);
  }
  void add_rely_db_path(flatbuffers::Offset<flatbuffers::String> rely_db_path) {
    fbb_.AddOffset(FSenceInfo::VT_RELY_DB_PATH, rely_db_path);
  }
  void add_rely_file_path(flatbuffers::Offset<flatbuffers::String> rely_file_path) {
    fbb_.AddOffset(FSenceInfo::VT_RELY_FILE_PATH, rely_file_path);
  }
  explicit FSenceInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FSenceInfoBuilder &operator=(const FSenceInfoBuilder &);
  flatbuffers::Offset<FSenceInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FSenceInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FSenceInfo> CreateFSenceInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    int64_t ct_time = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    flatbuffers::Offset<flatbuffers::String> test_ver = 0,
    flatbuffers::Offset<flatbuffers::String> operate_ver = 0,
    flatbuffers::Offset<flatbuffers::String> core_min_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_min_ver = 0,
    flatbuffers::Offset<flatbuffers::String> sence_name = 0,
    flatbuffers::Offset<flatbuffers::String> addr = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    flatbuffers::Offset<flatbuffers::String> proj_id = 0,
    flatbuffers::Offset<flatbuffers::String> proj_name = 0,
    flatbuffers::Offset<flatbuffers::String> area_id = 0,
    flatbuffers::Offset<flatbuffers::String> area_name = 0,
    flatbuffers::Offset<flatbuffers::String> rely_db_path = 0,
    flatbuffers::Offset<flatbuffers::String> rely_file_path = 0) {
  FSenceInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_time(ct_time);
  builder_.add_rely_file_path(rely_file_path);
  builder_.add_rely_db_path(rely_db_path);
  builder_.add_area_name(area_name);
  builder_.add_area_id(area_id);
  builder_.add_proj_name(proj_name);
  builder_.add_proj_id(proj_id);
  builder_.add_ct_user(ct_user);
  builder_.add_addr(addr);
  builder_.add_sence_name(sence_name);
  builder_.add_proj_min_ver(proj_min_ver);
  builder_.add_core_min_ver(core_min_ver);
  builder_.add_operate_ver(operate_ver);
  builder_.add_test_ver(test_ver);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FSenceInfo> CreateFSenceInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    int64_t ct_time = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    const char *test_ver = nullptr,
    const char *operate_ver = nullptr,
    const char *core_min_ver = nullptr,
    const char *proj_min_ver = nullptr,
    const char *sence_name = nullptr,
    const char *addr = nullptr,
    const char *ct_user = nullptr,
    const char *proj_id = nullptr,
    const char *proj_name = nullptr,
    const char *area_id = nullptr,
    const char *area_name = nullptr,
    const char *rely_db_path = nullptr,
    const char *rely_file_path = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto test_ver__ = test_ver ? _fbb.CreateString(test_ver) : 0;
  auto operate_ver__ = operate_ver ? _fbb.CreateString(operate_ver) : 0;
  auto core_min_ver__ = core_min_ver ? _fbb.CreateString(core_min_ver) : 0;
  auto proj_min_ver__ = proj_min_ver ? _fbb.CreateString(proj_min_ver) : 0;
  auto sence_name__ = sence_name ? _fbb.CreateString(sence_name) : 0;
  auto addr__ = addr ? _fbb.CreateString(addr) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto proj_id__ = proj_id ? _fbb.CreateString(proj_id) : 0;
  auto proj_name__ = proj_name ? _fbb.CreateString(proj_name) : 0;
  auto area_id__ = area_id ? _fbb.CreateString(area_id) : 0;
  auto area_name__ = area_name ? _fbb.CreateString(area_name) : 0;
  auto rely_db_path__ = rely_db_path ? _fbb.CreateString(rely_db_path) : 0;
  auto rely_file_path__ = rely_file_path ? _fbb.CreateString(rely_file_path) : 0;
  return RBN100::CreateFSenceInfo(
      _fbb,
      uuid__,
      ct_time,
      first_upload_tm,
      modify_tm,
      test_ver__,
      operate_ver__,
      core_min_ver__,
      proj_min_ver__,
      sence_name__,
      addr__,
      ct_user__,
      proj_id__,
      proj_name__,
      area_id__,
      area_name__,
      rely_db_path__,
      rely_file_path__);
}

struct FMapInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FMapInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_PROJ = 6,
    VT_NAME1 = 8,
    VT_NAME2 = 10,
    VT_NAME3 = 12,
    VT_ENV_MAP_VER = 14,
    VT_SOFT_CORE = 16,
    VT_RESOLUTION = 18,
    VT_AREA_OUTLINE = 20,
    VT_CT_TIME = 22,
    VT_CT_USER = 24,
    VT_CT_DEV = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_MODIFY_USER = 32,
    VT_MODIFY_DEV = 34,
    VT_SLAM_ENV_MAPPATH = 36,
    VT_SLAM_REFLEX_MAPPATH = 38,
    VT_SLAM_TRANS_MAPPATH = 40,
    VT_SLAM_OBS_BASE_MAPPATH = 42,
    VT_UI_MAP_ANGLE = 44,
    VT_UI_CROP_RANGE = 46,
    VT_UI_DISPLAY_SCALE = 48,
    VT_UI_PARM = 50,
    VT_UI_ENV_THUMB_PATH = 52,
    VT_UI_ENV_BASE_PATH = 54,
    VT_NAV_OBS_PATH = 56,
    VT_NAV_RUN_MAPCONFIG_PATH = 58,
    VT_NAV_VIRWALL_AUTO_PATH = 60,
    VT_NAV_VIRWALL_PATH = 62,
    VT_NAV_RUN_TRACK_PATH = 64,
    VT_PER_SENMATIC_MAP_PATH = 66,
    VT_SLAM_3D_ENV_PATH = 68
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *proj() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  const flatbuffers::String *env_map_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_ENV_MAP_VER);
  }
  const flatbuffers::String *soft_core() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_CORE);
  }
  float resolution() const {
    return GetField<float>(VT_RESOLUTION, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *area_outline() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *>(VT_AREA_OUTLINE);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  const flatbuffers::String *modify_user() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFY_USER);
  }
  const flatbuffers::String *modify_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFY_DEV);
  }
  const flatbuffers::String *slam_env_mappath() const {
    return GetPointer<const flatbuffers::String *>(VT_SLAM_ENV_MAPPATH);
  }
  const flatbuffers::String *slam_reflex_mappath() const {
    return GetPointer<const flatbuffers::String *>(VT_SLAM_REFLEX_MAPPATH);
  }
  const flatbuffers::String *slam_trans_mappath() const {
    return GetPointer<const flatbuffers::String *>(VT_SLAM_TRANS_MAPPATH);
  }
  const flatbuffers::String *slam_obs_base_mappath() const {
    return GetPointer<const flatbuffers::String *>(VT_SLAM_OBS_BASE_MAPPATH);
  }
  float ui_map_angle() const {
    return GetField<float>(VT_UI_MAP_ANGLE, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *ui_crop_range() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *>(VT_UI_CROP_RANGE);
  }
  float ui_display_scale() const {
    return GetField<float>(VT_UI_DISPLAY_SCALE, 0.0f);
  }
  const RBN100::FPoseTransParm *ui_parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_UI_PARM);
  }
  const flatbuffers::String *ui_env_thumb_path() const {
    return GetPointer<const flatbuffers::String *>(VT_UI_ENV_THUMB_PATH);
  }
  const flatbuffers::String *ui_env_base_path() const {
    return GetPointer<const flatbuffers::String *>(VT_UI_ENV_BASE_PATH);
  }
  const flatbuffers::String *nav_obs_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NAV_OBS_PATH);
  }
  const flatbuffers::String *nav_run_mapconfig_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NAV_RUN_MAPCONFIG_PATH);
  }
  const flatbuffers::String *nav_virwall_auto_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NAV_VIRWALL_AUTO_PATH);
  }
  const flatbuffers::String *nav_virwall_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NAV_VIRWALL_PATH);
  }
  const flatbuffers::String *nav_run_track_path() const {
    return GetPointer<const flatbuffers::String *>(VT_NAV_RUN_TRACK_PATH);
  }
  const flatbuffers::String *per_senmatic_map_path() const {
    return GetPointer<const flatbuffers::String *>(VT_PER_SENMATIC_MAP_PATH);
  }
  const flatbuffers::String *slam_3d_env_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SLAM_3D_ENV_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_PROJ) &&
           verifier.VerifyString(proj()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyOffset(verifier, VT_ENV_MAP_VER) &&
           verifier.VerifyString(env_map_ver()) &&
           VerifyOffset(verifier, VT_SOFT_CORE) &&
           verifier.VerifyString(soft_core()) &&
           VerifyField<float>(verifier, VT_RESOLUTION) &&
           VerifyOffset(verifier, VT_AREA_OUTLINE) &&
           verifier.VerifyVector(area_outline()) &&
           verifier.VerifyVectorOfTables(area_outline()) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyOffset(verifier, VT_MODIFY_USER) &&
           verifier.VerifyString(modify_user()) &&
           VerifyOffset(verifier, VT_MODIFY_DEV) &&
           verifier.VerifyString(modify_dev()) &&
           VerifyOffset(verifier, VT_SLAM_ENV_MAPPATH) &&
           verifier.VerifyString(slam_env_mappath()) &&
           VerifyOffset(verifier, VT_SLAM_REFLEX_MAPPATH) &&
           verifier.VerifyString(slam_reflex_mappath()) &&
           VerifyOffset(verifier, VT_SLAM_TRANS_MAPPATH) &&
           verifier.VerifyString(slam_trans_mappath()) &&
           VerifyOffset(verifier, VT_SLAM_OBS_BASE_MAPPATH) &&
           verifier.VerifyString(slam_obs_base_mappath()) &&
           VerifyField<float>(verifier, VT_UI_MAP_ANGLE) &&
           VerifyOffset(verifier, VT_UI_CROP_RANGE) &&
           verifier.VerifyVector(ui_crop_range()) &&
           verifier.VerifyVectorOfTables(ui_crop_range()) &&
           VerifyField<float>(verifier, VT_UI_DISPLAY_SCALE) &&
           VerifyOffset(verifier, VT_UI_PARM) &&
           verifier.VerifyTable(ui_parm()) &&
           VerifyOffset(verifier, VT_UI_ENV_THUMB_PATH) &&
           verifier.VerifyString(ui_env_thumb_path()) &&
           VerifyOffset(verifier, VT_UI_ENV_BASE_PATH) &&
           verifier.VerifyString(ui_env_base_path()) &&
           VerifyOffset(verifier, VT_NAV_OBS_PATH) &&
           verifier.VerifyString(nav_obs_path()) &&
           VerifyOffset(verifier, VT_NAV_RUN_MAPCONFIG_PATH) &&
           verifier.VerifyString(nav_run_mapconfig_path()) &&
           VerifyOffset(verifier, VT_NAV_VIRWALL_AUTO_PATH) &&
           verifier.VerifyString(nav_virwall_auto_path()) &&
           VerifyOffset(verifier, VT_NAV_VIRWALL_PATH) &&
           verifier.VerifyString(nav_virwall_path()) &&
           VerifyOffset(verifier, VT_NAV_RUN_TRACK_PATH) &&
           verifier.VerifyString(nav_run_track_path()) &&
           VerifyOffset(verifier, VT_PER_SENMATIC_MAP_PATH) &&
           verifier.VerifyString(per_senmatic_map_path()) &&
           VerifyOffset(verifier, VT_SLAM_3D_ENV_PATH) &&
           verifier.VerifyString(slam_3d_env_path()) &&
           verifier.EndTable();
  }
};

struct FMapInfoBuilder {
  typedef FMapInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FMapInfo::VT_UUID, uuid);
  }
  void add_proj(flatbuffers::Offset<flatbuffers::String> proj) {
    fbb_.AddOffset(FMapInfo::VT_PROJ, proj);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FMapInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FMapInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FMapInfo::VT_NAME3, name3);
  }
  void add_env_map_ver(flatbuffers::Offset<flatbuffers::String> env_map_ver) {
    fbb_.AddOffset(FMapInfo::VT_ENV_MAP_VER, env_map_ver);
  }
  void add_soft_core(flatbuffers::Offset<flatbuffers::String> soft_core) {
    fbb_.AddOffset(FMapInfo::VT_SOFT_CORE, soft_core);
  }
  void add_resolution(float resolution) {
    fbb_.AddElement<float>(FMapInfo::VT_RESOLUTION, resolution, 0.0f);
  }
  void add_area_outline(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> area_outline) {
    fbb_.AddOffset(FMapInfo::VT_AREA_OUTLINE, area_outline);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FMapInfo::VT_CT_TIME, ct_time, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FMapInfo::VT_CT_USER, ct_user);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FMapInfo::VT_CT_DEV, ct_dev);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FMapInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FMapInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_modify_user(flatbuffers::Offset<flatbuffers::String> modify_user) {
    fbb_.AddOffset(FMapInfo::VT_MODIFY_USER, modify_user);
  }
  void add_modify_dev(flatbuffers::Offset<flatbuffers::String> modify_dev) {
    fbb_.AddOffset(FMapInfo::VT_MODIFY_DEV, modify_dev);
  }
  void add_slam_env_mappath(flatbuffers::Offset<flatbuffers::String> slam_env_mappath) {
    fbb_.AddOffset(FMapInfo::VT_SLAM_ENV_MAPPATH, slam_env_mappath);
  }
  void add_slam_reflex_mappath(flatbuffers::Offset<flatbuffers::String> slam_reflex_mappath) {
    fbb_.AddOffset(FMapInfo::VT_SLAM_REFLEX_MAPPATH, slam_reflex_mappath);
  }
  void add_slam_trans_mappath(flatbuffers::Offset<flatbuffers::String> slam_trans_mappath) {
    fbb_.AddOffset(FMapInfo::VT_SLAM_TRANS_MAPPATH, slam_trans_mappath);
  }
  void add_slam_obs_base_mappath(flatbuffers::Offset<flatbuffers::String> slam_obs_base_mappath) {
    fbb_.AddOffset(FMapInfo::VT_SLAM_OBS_BASE_MAPPATH, slam_obs_base_mappath);
  }
  void add_ui_map_angle(float ui_map_angle) {
    fbb_.AddElement<float>(FMapInfo::VT_UI_MAP_ANGLE, ui_map_angle, 0.0f);
  }
  void add_ui_crop_range(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> ui_crop_range) {
    fbb_.AddOffset(FMapInfo::VT_UI_CROP_RANGE, ui_crop_range);
  }
  void add_ui_display_scale(float ui_display_scale) {
    fbb_.AddElement<float>(FMapInfo::VT_UI_DISPLAY_SCALE, ui_display_scale, 0.0f);
  }
  void add_ui_parm(flatbuffers::Offset<RBN100::FPoseTransParm> ui_parm) {
    fbb_.AddOffset(FMapInfo::VT_UI_PARM, ui_parm);
  }
  void add_ui_env_thumb_path(flatbuffers::Offset<flatbuffers::String> ui_env_thumb_path) {
    fbb_.AddOffset(FMapInfo::VT_UI_ENV_THUMB_PATH, ui_env_thumb_path);
  }
  void add_ui_env_base_path(flatbuffers::Offset<flatbuffers::String> ui_env_base_path) {
    fbb_.AddOffset(FMapInfo::VT_UI_ENV_BASE_PATH, ui_env_base_path);
  }
  void add_nav_obs_path(flatbuffers::Offset<flatbuffers::String> nav_obs_path) {
    fbb_.AddOffset(FMapInfo::VT_NAV_OBS_PATH, nav_obs_path);
  }
  void add_nav_run_mapconfig_path(flatbuffers::Offset<flatbuffers::String> nav_run_mapconfig_path) {
    fbb_.AddOffset(FMapInfo::VT_NAV_RUN_MAPCONFIG_PATH, nav_run_mapconfig_path);
  }
  void add_nav_virwall_auto_path(flatbuffers::Offset<flatbuffers::String> nav_virwall_auto_path) {
    fbb_.AddOffset(FMapInfo::VT_NAV_VIRWALL_AUTO_PATH, nav_virwall_auto_path);
  }
  void add_nav_virwall_path(flatbuffers::Offset<flatbuffers::String> nav_virwall_path) {
    fbb_.AddOffset(FMapInfo::VT_NAV_VIRWALL_PATH, nav_virwall_path);
  }
  void add_nav_run_track_path(flatbuffers::Offset<flatbuffers::String> nav_run_track_path) {
    fbb_.AddOffset(FMapInfo::VT_NAV_RUN_TRACK_PATH, nav_run_track_path);
  }
  void add_per_senmatic_map_path(flatbuffers::Offset<flatbuffers::String> per_senmatic_map_path) {
    fbb_.AddOffset(FMapInfo::VT_PER_SENMATIC_MAP_PATH, per_senmatic_map_path);
  }
  void add_slam_3d_env_path(flatbuffers::Offset<flatbuffers::String> slam_3d_env_path) {
    fbb_.AddOffset(FMapInfo::VT_SLAM_3D_ENV_PATH, slam_3d_env_path);
  }
  explicit FMapInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FMapInfoBuilder &operator=(const FMapInfoBuilder &);
  flatbuffers::Offset<FMapInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FMapInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FMapInfo> CreateFMapInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> proj = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    flatbuffers::Offset<flatbuffers::String> env_map_ver = 0,
    flatbuffers::Offset<flatbuffers::String> soft_core = 0,
    float resolution = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> area_outline = 0,
    int64_t ct_time = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    flatbuffers::Offset<flatbuffers::String> modify_user = 0,
    flatbuffers::Offset<flatbuffers::String> modify_dev = 0,
    flatbuffers::Offset<flatbuffers::String> slam_env_mappath = 0,
    flatbuffers::Offset<flatbuffers::String> slam_reflex_mappath = 0,
    flatbuffers::Offset<flatbuffers::String> slam_trans_mappath = 0,
    flatbuffers::Offset<flatbuffers::String> slam_obs_base_mappath = 0,
    float ui_map_angle = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> ui_crop_range = 0,
    float ui_display_scale = 0.0f,
    flatbuffers::Offset<RBN100::FPoseTransParm> ui_parm = 0,
    flatbuffers::Offset<flatbuffers::String> ui_env_thumb_path = 0,
    flatbuffers::Offset<flatbuffers::String> ui_env_base_path = 0,
    flatbuffers::Offset<flatbuffers::String> nav_obs_path = 0,
    flatbuffers::Offset<flatbuffers::String> nav_run_mapconfig_path = 0,
    flatbuffers::Offset<flatbuffers::String> nav_virwall_auto_path = 0,
    flatbuffers::Offset<flatbuffers::String> nav_virwall_path = 0,
    flatbuffers::Offset<flatbuffers::String> nav_run_track_path = 0,
    flatbuffers::Offset<flatbuffers::String> per_senmatic_map_path = 0,
    flatbuffers::Offset<flatbuffers::String> slam_3d_env_path = 0) {
  FMapInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_time(ct_time);
  builder_.add_slam_3d_env_path(slam_3d_env_path);
  builder_.add_per_senmatic_map_path(per_senmatic_map_path);
  builder_.add_nav_run_track_path(nav_run_track_path);
  builder_.add_nav_virwall_path(nav_virwall_path);
  builder_.add_nav_virwall_auto_path(nav_virwall_auto_path);
  builder_.add_nav_run_mapconfig_path(nav_run_mapconfig_path);
  builder_.add_nav_obs_path(nav_obs_path);
  builder_.add_ui_env_base_path(ui_env_base_path);
  builder_.add_ui_env_thumb_path(ui_env_thumb_path);
  builder_.add_ui_parm(ui_parm);
  builder_.add_ui_display_scale(ui_display_scale);
  builder_.add_ui_crop_range(ui_crop_range);
  builder_.add_ui_map_angle(ui_map_angle);
  builder_.add_slam_obs_base_mappath(slam_obs_base_mappath);
  builder_.add_slam_trans_mappath(slam_trans_mappath);
  builder_.add_slam_reflex_mappath(slam_reflex_mappath);
  builder_.add_slam_env_mappath(slam_env_mappath);
  builder_.add_modify_dev(modify_dev);
  builder_.add_modify_user(modify_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_ct_user(ct_user);
  builder_.add_area_outline(area_outline);
  builder_.add_resolution(resolution);
  builder_.add_soft_core(soft_core);
  builder_.add_env_map_ver(env_map_ver);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_proj(proj);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FMapInfo> CreateFMapInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *proj = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    const char *env_map_ver = nullptr,
    const char *soft_core = nullptr,
    float resolution = 0.0f,
    const std::vector<flatbuffers::Offset<RBN100::FPoint>> *area_outline = nullptr,
    int64_t ct_time = 0,
    const char *ct_user = nullptr,
    const char *ct_dev = nullptr,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    const char *modify_user = nullptr,
    const char *modify_dev = nullptr,
    const char *slam_env_mappath = nullptr,
    const char *slam_reflex_mappath = nullptr,
    const char *slam_trans_mappath = nullptr,
    const char *slam_obs_base_mappath = nullptr,
    float ui_map_angle = 0.0f,
    const std::vector<flatbuffers::Offset<RBN100::FPoint>> *ui_crop_range = nullptr,
    float ui_display_scale = 0.0f,
    flatbuffers::Offset<RBN100::FPoseTransParm> ui_parm = 0,
    const char *ui_env_thumb_path = nullptr,
    const char *ui_env_base_path = nullptr,
    const char *nav_obs_path = nullptr,
    const char *nav_run_mapconfig_path = nullptr,
    const char *nav_virwall_auto_path = nullptr,
    const char *nav_virwall_path = nullptr,
    const char *nav_run_track_path = nullptr,
    const char *per_senmatic_map_path = nullptr,
    const char *slam_3d_env_path = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto proj__ = proj ? _fbb.CreateString(proj) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto env_map_ver__ = env_map_ver ? _fbb.CreateString(env_map_ver) : 0;
  auto soft_core__ = soft_core ? _fbb.CreateString(soft_core) : 0;
  auto area_outline__ = area_outline ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoint>>(*area_outline) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto modify_user__ = modify_user ? _fbb.CreateString(modify_user) : 0;
  auto modify_dev__ = modify_dev ? _fbb.CreateString(modify_dev) : 0;
  auto slam_env_mappath__ = slam_env_mappath ? _fbb.CreateString(slam_env_mappath) : 0;
  auto slam_reflex_mappath__ = slam_reflex_mappath ? _fbb.CreateString(slam_reflex_mappath) : 0;
  auto slam_trans_mappath__ = slam_trans_mappath ? _fbb.CreateString(slam_trans_mappath) : 0;
  auto slam_obs_base_mappath__ = slam_obs_base_mappath ? _fbb.CreateString(slam_obs_base_mappath) : 0;
  auto ui_crop_range__ = ui_crop_range ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoint>>(*ui_crop_range) : 0;
  auto ui_env_thumb_path__ = ui_env_thumb_path ? _fbb.CreateString(ui_env_thumb_path) : 0;
  auto ui_env_base_path__ = ui_env_base_path ? _fbb.CreateString(ui_env_base_path) : 0;
  auto nav_obs_path__ = nav_obs_path ? _fbb.CreateString(nav_obs_path) : 0;
  auto nav_run_mapconfig_path__ = nav_run_mapconfig_path ? _fbb.CreateString(nav_run_mapconfig_path) : 0;
  auto nav_virwall_auto_path__ = nav_virwall_auto_path ? _fbb.CreateString(nav_virwall_auto_path) : 0;
  auto nav_virwall_path__ = nav_virwall_path ? _fbb.CreateString(nav_virwall_path) : 0;
  auto nav_run_track_path__ = nav_run_track_path ? _fbb.CreateString(nav_run_track_path) : 0;
  auto per_senmatic_map_path__ = per_senmatic_map_path ? _fbb.CreateString(per_senmatic_map_path) : 0;
  auto slam_3d_env_path__ = slam_3d_env_path ? _fbb.CreateString(slam_3d_env_path) : 0;
  return RBN100::CreateFMapInfo(
      _fbb,
      uuid__,
      proj__,
      name1__,
      name2__,
      name3__,
      env_map_ver__,
      soft_core__,
      resolution,
      area_outline__,
      ct_time,
      ct_user__,
      ct_dev__,
      first_upload_tm,
      modify_tm,
      modify_user__,
      modify_dev__,
      slam_env_mappath__,
      slam_reflex_mappath__,
      slam_trans_mappath__,
      slam_obs_base_mappath__,
      ui_map_angle,
      ui_crop_range__,
      ui_display_scale,
      ui_parm,
      ui_env_thumb_path__,
      ui_env_base_path__,
      nav_obs_path__,
      nav_run_mapconfig_path__,
      nav_virwall_auto_path__,
      nav_virwall_path__,
      nav_run_track_path__,
      per_senmatic_map_path__,
      slam_3d_env_path__);
}

struct FPoseNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FPoseNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_TAGID = 62,
    VT_ACTION_X = 64,
    VT_ACTION_Y = 66,
    VT_ACTION_Z = 68
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  int32_t tagID() const {
    return GetField<int32_t>(VT_TAGID, 0);
  }
  float action_x() const {
    return GetField<float>(VT_ACTION_X, 0.0f);
  }
  float action_y() const {
    return GetField<float>(VT_ACTION_Y, 0.0f);
  }
  float action_z() const {
    return GetField<float>(VT_ACTION_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyField<int32_t>(verifier, VT_TAGID) &&
           VerifyField<float>(verifier, VT_ACTION_X) &&
           VerifyField<float>(verifier, VT_ACTION_Y) &&
           VerifyField<float>(verifier, VT_ACTION_Z) &&
           verifier.EndTable();
  }
};

struct FPoseNodeInfoBuilder {
  typedef FPoseNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FPoseNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FPoseNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FPoseNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FPoseNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FPoseNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FPoseNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FPoseNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FPoseNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FPoseNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FPoseNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FPoseNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FPoseNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FPoseNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FPoseNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FPoseNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FPoseNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FPoseNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FPoseNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FPoseNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FPoseNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FPoseNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FPoseNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FPoseNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FPoseNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FPoseNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FPoseNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_tagID(int32_t tagID) {
    fbb_.AddElement<int32_t>(FPoseNodeInfo::VT_TAGID, tagID, 0);
  }
  void add_action_x(float action_x) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_ACTION_X, action_x, 0.0f);
  }
  void add_action_y(float action_y) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_ACTION_Y, action_y, 0.0f);
  }
  void add_action_z(float action_z) {
    fbb_.AddElement<float>(FPoseNodeInfo::VT_ACTION_Z, action_z, 0.0f);
  }
  explicit FPoseNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FPoseNodeInfoBuilder &operator=(const FPoseNodeInfoBuilder &);
  flatbuffers::Offset<FPoseNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FPoseNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FPoseNodeInfo> CreateFPoseNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    int32_t tagID = 0,
    float action_x = 0.0f,
    float action_y = 0.0f,
    float action_z = 0.0f) {
  FPoseNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_z(action_z);
  builder_.add_action_y(action_y);
  builder_.add_action_x(action_x);
  builder_.add_tagID(tagID);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FPoseNodeInfo> CreateFPoseNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    int32_t tagID = 0,
    float action_x = 0.0f,
    float action_y = 0.0f,
    float action_z = 0.0f) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  return RBN100::CreateFPoseNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      tagID,
      action_x,
      action_y,
      action_z);
}

struct FStartNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FStartNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_ACTION_UUID = 62
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  const flatbuffers::String *action_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyOffset(verifier, VT_ACTION_UUID) &&
           verifier.VerifyString(action_uuid()) &&
           verifier.EndTable();
  }
};

struct FStartNodeInfoBuilder {
  typedef FStartNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FStartNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FStartNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FStartNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FStartNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FStartNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FStartNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FStartNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FStartNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FStartNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FStartNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FStartNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FStartNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FStartNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FStartNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FStartNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FStartNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FStartNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FStartNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FStartNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FStartNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FStartNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FStartNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FStartNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FStartNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FStartNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FStartNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FStartNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FStartNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FStartNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_action_uuid(flatbuffers::Offset<flatbuffers::String> action_uuid) {
    fbb_.AddOffset(FStartNodeInfo::VT_ACTION_UUID, action_uuid);
  }
  explicit FStartNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FStartNodeInfoBuilder &operator=(const FStartNodeInfoBuilder &);
  flatbuffers::Offset<FStartNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FStartNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FStartNodeInfo> CreateFStartNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    flatbuffers::Offset<flatbuffers::String> action_uuid = 0) {
  FStartNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_uuid(action_uuid);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FStartNodeInfo> CreateFStartNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    const char *action_uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
  return RBN100::CreateFStartNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      action_uuid__);
}

struct FStandByNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FStandByNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_ACTION_UUID = 62
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  const flatbuffers::String *action_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyOffset(verifier, VT_ACTION_UUID) &&
           verifier.VerifyString(action_uuid()) &&
           verifier.EndTable();
  }
};

struct FStandByNodeInfoBuilder {
  typedef FStandByNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FStandByNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FStandByNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FStandByNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FStandByNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FStandByNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FStandByNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FStandByNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FStandByNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FStandByNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FStandByNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FStandByNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FStandByNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FStandByNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FStandByNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FStandByNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FStandByNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FStandByNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FStandByNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FStandByNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FStandByNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FStandByNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FStandByNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FStandByNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FStandByNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FStandByNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FStandByNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FStandByNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FStandByNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FStandByNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_action_uuid(flatbuffers::Offset<flatbuffers::String> action_uuid) {
    fbb_.AddOffset(FStandByNodeInfo::VT_ACTION_UUID, action_uuid);
  }
  explicit FStandByNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FStandByNodeInfoBuilder &operator=(const FStandByNodeInfoBuilder &);
  flatbuffers::Offset<FStandByNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FStandByNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FStandByNodeInfo> CreateFStandByNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    flatbuffers::Offset<flatbuffers::String> action_uuid = 0) {
  FStandByNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_uuid(action_uuid);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FStandByNodeInfo> CreateFStandByNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    const char *action_uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
  return RBN100::CreateFStandByNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      action_uuid__);
}

struct FPassNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FPassNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           verifier.EndTable();
  }
};

struct FPassNodeInfoBuilder {
  typedef FPassNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FPassNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FPassNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FPassNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FPassNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FPassNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FPassNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FPassNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FPassNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FPassNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FPassNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FPassNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FPassNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FPassNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FPassNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FPassNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FPassNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FPassNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FPassNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FPassNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FPassNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FPassNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FPassNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FPassNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FPassNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FPassNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FPassNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FPassNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FPassNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FPassNodeInfo::VT_LINK_NODE, link_node);
  }
  explicit FPassNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FPassNodeInfoBuilder &operator=(const FPassNodeInfoBuilder &);
  flatbuffers::Offset<FPassNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FPassNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FPassNodeInfo> CreateFPassNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0) {
  FPassNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FPassNodeInfo> CreateFPassNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  return RBN100::CreateFPassNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__);
}

struct FJMRNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FJMRNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_ACTION_UUID = 62
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  const flatbuffers::String *action_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyOffset(verifier, VT_ACTION_UUID) &&
           verifier.VerifyString(action_uuid()) &&
           verifier.EndTable();
  }
};

struct FJMRNodeInfoBuilder {
  typedef FJMRNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FJMRNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FJMRNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FJMRNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FJMRNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FJMRNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FJMRNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FJMRNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FJMRNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FJMRNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FJMRNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FJMRNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FJMRNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FJMRNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FJMRNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FJMRNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FJMRNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FJMRNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FJMRNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FJMRNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FJMRNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FJMRNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FJMRNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FJMRNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FJMRNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FJMRNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FJMRNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FJMRNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FJMRNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FJMRNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_action_uuid(flatbuffers::Offset<flatbuffers::String> action_uuid) {
    fbb_.AddOffset(FJMRNodeInfo::VT_ACTION_UUID, action_uuid);
  }
  explicit FJMRNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FJMRNodeInfoBuilder &operator=(const FJMRNodeInfoBuilder &);
  flatbuffers::Offset<FJMRNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FJMRNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FJMRNodeInfo> CreateFJMRNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    flatbuffers::Offset<flatbuffers::String> action_uuid = 0) {
  FJMRNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_uuid(action_uuid);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FJMRNodeInfo> CreateFJMRNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    const char *action_uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
  return RBN100::CreateFJMRNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      action_uuid__);
}

struct FFloorIndex FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FFloorIndexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FLOOR = 4,
    VT_NAME = 6
  };
  int32_t floor() const {
    return GetField<int32_t>(VT_FLOOR, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FLOOR) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FFloorIndexBuilder {
  typedef FFloorIndex Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_floor(int32_t floor) {
    fbb_.AddElement<int32_t>(FFloorIndex::VT_FLOOR, floor, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FFloorIndex::VT_NAME, name);
  }
  explicit FFloorIndexBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FFloorIndexBuilder &operator=(const FFloorIndexBuilder &);
  flatbuffers::Offset<FFloorIndex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FFloorIndex>(end);
    return o;
  }
};

inline flatbuffers::Offset<FFloorIndex> CreateFFloorIndex(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t floor = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FFloorIndexBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_floor(floor);
  return builder_.Finish();
}

inline flatbuffers::Offset<FFloorIndex> CreateFFloorIndexDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t floor = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return RBN100::CreateFFloorIndex(
      _fbb,
      floor,
      name__);
}

struct FElevatorInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FElevatorInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_ADDR = 10,
    VT_COMMUNICATION_MODE = 12,
    VT_PLUGIN = 14,
    VT_COMMUNICATION_LIST = 16,
    VT_DISTANCE = 18,
    VT_COUNT = 20,
    VT_FLOORINFO = 22
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *addr() const {
    return GetPointer<const flatbuffers::String *>(VT_ADDR);
  }
  int32_t communication_mode() const {
    return GetField<int32_t>(VT_COMMUNICATION_MODE, 0);
  }
  const flatbuffers::String *plugin() const {
    return GetPointer<const flatbuffers::String *>(VT_PLUGIN);
  }
  int32_t communication_list() const {
    return GetField<int32_t>(VT_COMMUNICATION_LIST, 0);
  }
  int32_t distance() const {
    return GetField<int32_t>(VT_DISTANCE, 0);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>> *floorinfo() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>> *>(VT_FLOORINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_ADDR) &&
           verifier.VerifyString(addr()) &&
           VerifyField<int32_t>(verifier, VT_COMMUNICATION_MODE) &&
           VerifyOffset(verifier, VT_PLUGIN) &&
           verifier.VerifyString(plugin()) &&
           VerifyField<int32_t>(verifier, VT_COMMUNICATION_LIST) &&
           VerifyField<int32_t>(verifier, VT_DISTANCE) &&
           VerifyField<int32_t>(verifier, VT_COUNT) &&
           VerifyOffset(verifier, VT_FLOORINFO) &&
           verifier.VerifyVector(floorinfo()) &&
           verifier.VerifyVectorOfTables(floorinfo()) &&
           verifier.EndTable();
  }
};

struct FElevatorInfoBuilder {
  typedef FElevatorInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FElevatorInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FElevatorInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FElevatorInfo::VT_NAME2, name2);
  }
  void add_addr(flatbuffers::Offset<flatbuffers::String> addr) {
    fbb_.AddOffset(FElevatorInfo::VT_ADDR, addr);
  }
  void add_communication_mode(int32_t communication_mode) {
    fbb_.AddElement<int32_t>(FElevatorInfo::VT_COMMUNICATION_MODE, communication_mode, 0);
  }
  void add_plugin(flatbuffers::Offset<flatbuffers::String> plugin) {
    fbb_.AddOffset(FElevatorInfo::VT_PLUGIN, plugin);
  }
  void add_communication_list(int32_t communication_list) {
    fbb_.AddElement<int32_t>(FElevatorInfo::VT_COMMUNICATION_LIST, communication_list, 0);
  }
  void add_distance(int32_t distance) {
    fbb_.AddElement<int32_t>(FElevatorInfo::VT_DISTANCE, distance, 0);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(FElevatorInfo::VT_COUNT, count, 0);
  }
  void add_floorinfo(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>>> floorinfo) {
    fbb_.AddOffset(FElevatorInfo::VT_FLOORINFO, floorinfo);
  }
  explicit FElevatorInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FElevatorInfoBuilder &operator=(const FElevatorInfoBuilder &);
  flatbuffers::Offset<FElevatorInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FElevatorInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FElevatorInfo> CreateFElevatorInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> addr = 0,
    int32_t communication_mode = 0,
    flatbuffers::Offset<flatbuffers::String> plugin = 0,
    int32_t communication_list = 0,
    int32_t distance = 0,
    int32_t count = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FFloorIndex>>> floorinfo = 0) {
  FElevatorInfoBuilder builder_(_fbb);
  builder_.add_floorinfo(floorinfo);
  builder_.add_count(count);
  builder_.add_distance(distance);
  builder_.add_communication_list(communication_list);
  builder_.add_plugin(plugin);
  builder_.add_communication_mode(communication_mode);
  builder_.add_addr(addr);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FElevatorInfo> CreateFElevatorInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *addr = nullptr,
    int32_t communication_mode = 0,
    const char *plugin = nullptr,
    int32_t communication_list = 0,
    int32_t distance = 0,
    int32_t count = 0,
    const std::vector<flatbuffers::Offset<RBN100::FFloorIndex>> *floorinfo = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto addr__ = addr ? _fbb.CreateString(addr) : 0;
  auto plugin__ = plugin ? _fbb.CreateString(plugin) : 0;
  auto floorinfo__ = floorinfo ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FFloorIndex>>(*floorinfo) : 0;
  return RBN100::CreateFElevatorInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      addr__,
      communication_mode,
      plugin__,
      communication_list,
      distance,
      count,
      floorinfo__);
}

struct FRequestElevatorInfoInput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestElevatorInfoInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELEVATOR_INFO = 4
  };
  const RBN100::FElevatorInfo *elevator_info() const {
    return GetPointer<const RBN100::FElevatorInfo *>(VT_ELEVATOR_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ELEVATOR_INFO) &&
           verifier.VerifyTable(elevator_info()) &&
           verifier.EndTable();
  }
};

struct FRequestElevatorInfoInputBuilder {
  typedef FRequestElevatorInfoInput Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_elevator_info(flatbuffers::Offset<RBN100::FElevatorInfo> elevator_info) {
    fbb_.AddOffset(FRequestElevatorInfoInput::VT_ELEVATOR_INFO, elevator_info);
  }
  explicit FRequestElevatorInfoInputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestElevatorInfoInputBuilder &operator=(const FRequestElevatorInfoInputBuilder &);
  flatbuffers::Offset<FRequestElevatorInfoInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestElevatorInfoInput>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestElevatorInfoInput> CreateFRequestElevatorInfoInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FElevatorInfo> elevator_info = 0) {
  FRequestElevatorInfoInputBuilder builder_(_fbb);
  builder_.add_elevator_info(elevator_info);
  return builder_.Finish();
}

struct FElevatorOutNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FElevatorOutNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_ACTION_UUID = 62
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  const flatbuffers::String *action_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyOffset(verifier, VT_ACTION_UUID) &&
           verifier.VerifyString(action_uuid()) &&
           verifier.EndTable();
  }
};

struct FElevatorOutNodeInfoBuilder {
  typedef FElevatorOutNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FElevatorOutNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FElevatorOutNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FElevatorOutNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FElevatorOutNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FElevatorOutNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FElevatorOutNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FElevatorOutNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FElevatorOutNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FElevatorOutNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FElevatorOutNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FElevatorOutNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FElevatorOutNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FElevatorOutNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FElevatorOutNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FElevatorOutNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_action_uuid(flatbuffers::Offset<flatbuffers::String> action_uuid) {
    fbb_.AddOffset(FElevatorOutNodeInfo::VT_ACTION_UUID, action_uuid);
  }
  explicit FElevatorOutNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FElevatorOutNodeInfoBuilder &operator=(const FElevatorOutNodeInfoBuilder &);
  flatbuffers::Offset<FElevatorOutNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FElevatorOutNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FElevatorOutNodeInfo> CreateFElevatorOutNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    flatbuffers::Offset<flatbuffers::String> action_uuid = 0) {
  FElevatorOutNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_uuid(action_uuid);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FElevatorOutNodeInfo> CreateFElevatorOutNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    const char *action_uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
  return RBN100::CreateFElevatorOutNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      action_uuid__);
}

struct FRequestCreateElevatorOutNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateElevatorOutNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELE_OUT_INFO = 4
  };
  const RBN100::FElevatorOutNodeInfo *ele_out_info() const {
    return GetPointer<const RBN100::FElevatorOutNodeInfo *>(VT_ELE_OUT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ELE_OUT_INFO) &&
           verifier.VerifyTable(ele_out_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateElevatorOutNodeBuilder {
  typedef FRequestCreateElevatorOutNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ele_out_info(flatbuffers::Offset<RBN100::FElevatorOutNodeInfo> ele_out_info) {
    fbb_.AddOffset(FRequestCreateElevatorOutNode::VT_ELE_OUT_INFO, ele_out_info);
  }
  explicit FRequestCreateElevatorOutNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateElevatorOutNodeBuilder &operator=(const FRequestCreateElevatorOutNodeBuilder &);
  flatbuffers::Offset<FRequestCreateElevatorOutNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateElevatorOutNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateElevatorOutNode> CreateFRequestCreateElevatorOutNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FElevatorOutNodeInfo> ele_out_info = 0) {
  FRequestCreateElevatorOutNodeBuilder builder_(_fbb);
  builder_.add_ele_out_info(ele_out_info);
  return builder_.Finish();
}

struct FElevatorTransformNodeInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FElevatorTransformNodeInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NAME1 = 6,
    VT_NAME2 = 8,
    VT_NAME3 = 10,
    VT_SHOW_LEVEL = 12,
    VT_BY_PROJ = 14,
    VT_NODE_TYPE = 16,
    VT_SENCE = 18,
    VT_ENVMAP = 20,
    VT_CT_DEV = 22,
    VT_CT_USER = 24,
    VT_CT_TM = 26,
    VT_FIRST_UPLOAD_TM = 28,
    VT_MODIFY_TM = 30,
    VT_VERSATILITY = 32,
    VT_SOFT_VER = 34,
    VT_PROJ_SOFT_VER = 36,
    VT_CENTER = 38,
    VT_ANGLE = 40,
    VT_NODE_AREA = 42,
    VT_NODE_ANGLE = 44,
    VT_IS_RELEASE = 46,
    VT_TIMEOUT = 48,
    VT_IS_COORDINATE = 50,
    VT_PARM = 52,
    VT_IS_TF_RETURN = 54,
    VT_IS_NTF_RETURN = 56,
    VT_IS_ALL_RETURN = 58,
    VT_LINK_NODE = 60,
    VT_ACTION_UUID = 62
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *name1() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME1);
  }
  const flatbuffers::String *name2() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME2);
  }
  const flatbuffers::String *name3() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME3);
  }
  int32_t show_level() const {
    return GetField<int32_t>(VT_SHOW_LEVEL, 0);
  }
  const flatbuffers::String *by_proj() const {
    return GetPointer<const flatbuffers::String *>(VT_BY_PROJ);
  }
  int32_t node_type() const {
    return GetField<int32_t>(VT_NODE_TYPE, 0);
  }
  const flatbuffers::String *sence() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE);
  }
  const flatbuffers::String *envmap() const {
    return GetPointer<const flatbuffers::String *>(VT_ENVMAP);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t ct_tm() const {
    return GetField<int64_t>(VT_CT_TM, 0);
  }
  int64_t first_upload_tm() const {
    return GetField<int64_t>(VT_FIRST_UPLOAD_TM, 0);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  int32_t versatility() const {
    return GetField<int32_t>(VT_VERSATILITY, 0);
  }
  const flatbuffers::String *soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SOFT_VER);
  }
  const flatbuffers::String *proj_soft_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_SOFT_VER);
  }
  const RBN100::FPoint *center() const {
    return GetPointer<const RBN100::FPoint *>(VT_CENTER);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  float node_area() const {
    return GetField<float>(VT_NODE_AREA, 0.0f);
  }
  float node_angle() const {
    return GetField<float>(VT_NODE_ANGLE, 0.0f);
  }
  bool is_release() const {
    return GetField<uint8_t>(VT_IS_RELEASE, 0) != 0;
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  bool is_coordinate() const {
    return GetField<uint8_t>(VT_IS_COORDINATE, 0) != 0;
  }
  const RBN100::FPoseTransParm *parm() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_PARM);
  }
  bool is_tf_return() const {
    return GetField<uint8_t>(VT_IS_TF_RETURN, 0) != 0;
  }
  bool is_ntf_return() const {
    return GetField<uint8_t>(VT_IS_NTF_RETURN, 0) != 0;
  }
  bool is_all_return() const {
    return GetField<uint8_t>(VT_IS_ALL_RETURN, 0) != 0;
  }
  const flatbuffers::String *link_node() const {
    return GetPointer<const flatbuffers::String *>(VT_LINK_NODE);
  }
  const flatbuffers::String *action_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTION_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NAME1) &&
           verifier.VerifyString(name1()) &&
           VerifyOffset(verifier, VT_NAME2) &&
           verifier.VerifyString(name2()) &&
           VerifyOffset(verifier, VT_NAME3) &&
           verifier.VerifyString(name3()) &&
           VerifyField<int32_t>(verifier, VT_SHOW_LEVEL) &&
           VerifyOffset(verifier, VT_BY_PROJ) &&
           verifier.VerifyString(by_proj()) &&
           VerifyField<int32_t>(verifier, VT_NODE_TYPE) &&
           VerifyOffset(verifier, VT_SENCE) &&
           verifier.VerifyString(sence()) &&
           VerifyOffset(verifier, VT_ENVMAP) &&
           verifier.VerifyString(envmap()) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_CT_TM) &&
           VerifyField<int64_t>(verifier, VT_FIRST_UPLOAD_TM) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyField<int32_t>(verifier, VT_VERSATILITY) &&
           VerifyOffset(verifier, VT_SOFT_VER) &&
           verifier.VerifyString(soft_ver()) &&
           VerifyOffset(verifier, VT_PROJ_SOFT_VER) &&
           verifier.VerifyString(proj_soft_ver()) &&
           VerifyOffset(verifier, VT_CENTER) &&
           verifier.VerifyTable(center()) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<float>(verifier, VT_NODE_AREA) &&
           VerifyField<float>(verifier, VT_NODE_ANGLE) &&
           VerifyField<uint8_t>(verifier, VT_IS_RELEASE) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<uint8_t>(verifier, VT_IS_COORDINATE) &&
           VerifyOffset(verifier, VT_PARM) &&
           verifier.VerifyTable(parm()) &&
           VerifyField<uint8_t>(verifier, VT_IS_TF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_NTF_RETURN) &&
           VerifyField<uint8_t>(verifier, VT_IS_ALL_RETURN) &&
           VerifyOffset(verifier, VT_LINK_NODE) &&
           verifier.VerifyString(link_node()) &&
           VerifyOffset(verifier, VT_ACTION_UUID) &&
           verifier.VerifyString(action_uuid()) &&
           verifier.EndTable();
  }
};

struct FElevatorTransformNodeInfoBuilder {
  typedef FElevatorTransformNodeInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_UUID, uuid);
  }
  void add_name1(flatbuffers::Offset<flatbuffers::String> name1) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_NAME1, name1);
  }
  void add_name2(flatbuffers::Offset<flatbuffers::String> name2) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_NAME2, name2);
  }
  void add_name3(flatbuffers::Offset<flatbuffers::String> name3) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_NAME3, name3);
  }
  void add_show_level(int32_t show_level) {
    fbb_.AddElement<int32_t>(FElevatorTransformNodeInfo::VT_SHOW_LEVEL, show_level, 0);
  }
  void add_by_proj(flatbuffers::Offset<flatbuffers::String> by_proj) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_BY_PROJ, by_proj);
  }
  void add_node_type(int32_t node_type) {
    fbb_.AddElement<int32_t>(FElevatorTransformNodeInfo::VT_NODE_TYPE, node_type, 0);
  }
  void add_sence(flatbuffers::Offset<flatbuffers::String> sence) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_SENCE, sence);
  }
  void add_envmap(flatbuffers::Offset<flatbuffers::String> envmap) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_ENVMAP, envmap);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_CT_USER, ct_user);
  }
  void add_ct_tm(int64_t ct_tm) {
    fbb_.AddElement<int64_t>(FElevatorTransformNodeInfo::VT_CT_TM, ct_tm, 0);
  }
  void add_first_upload_tm(int64_t first_upload_tm) {
    fbb_.AddElement<int64_t>(FElevatorTransformNodeInfo::VT_FIRST_UPLOAD_TM, first_upload_tm, 0);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FElevatorTransformNodeInfo::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_versatility(int32_t versatility) {
    fbb_.AddElement<int32_t>(FElevatorTransformNodeInfo::VT_VERSATILITY, versatility, 0);
  }
  void add_soft_ver(flatbuffers::Offset<flatbuffers::String> soft_ver) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_SOFT_VER, soft_ver);
  }
  void add_proj_soft_ver(flatbuffers::Offset<flatbuffers::String> proj_soft_ver) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_PROJ_SOFT_VER, proj_soft_ver);
  }
  void add_center(flatbuffers::Offset<RBN100::FPoint> center) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_CENTER, center);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FElevatorTransformNodeInfo::VT_ANGLE, angle, 0.0f);
  }
  void add_node_area(float node_area) {
    fbb_.AddElement<float>(FElevatorTransformNodeInfo::VT_NODE_AREA, node_area, 0.0f);
  }
  void add_node_angle(float node_angle) {
    fbb_.AddElement<float>(FElevatorTransformNodeInfo::VT_NODE_ANGLE, node_angle, 0.0f);
  }
  void add_is_release(bool is_release) {
    fbb_.AddElement<uint8_t>(FElevatorTransformNodeInfo::VT_IS_RELEASE, static_cast<uint8_t>(is_release), 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FElevatorTransformNodeInfo::VT_TIMEOUT, timeout, 0);
  }
  void add_is_coordinate(bool is_coordinate) {
    fbb_.AddElement<uint8_t>(FElevatorTransformNodeInfo::VT_IS_COORDINATE, static_cast<uint8_t>(is_coordinate), 0);
  }
  void add_parm(flatbuffers::Offset<RBN100::FPoseTransParm> parm) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_PARM, parm);
  }
  void add_is_tf_return(bool is_tf_return) {
    fbb_.AddElement<uint8_t>(FElevatorTransformNodeInfo::VT_IS_TF_RETURN, static_cast<uint8_t>(is_tf_return), 0);
  }
  void add_is_ntf_return(bool is_ntf_return) {
    fbb_.AddElement<uint8_t>(FElevatorTransformNodeInfo::VT_IS_NTF_RETURN, static_cast<uint8_t>(is_ntf_return), 0);
  }
  void add_is_all_return(bool is_all_return) {
    fbb_.AddElement<uint8_t>(FElevatorTransformNodeInfo::VT_IS_ALL_RETURN, static_cast<uint8_t>(is_all_return), 0);
  }
  void add_link_node(flatbuffers::Offset<flatbuffers::String> link_node) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_LINK_NODE, link_node);
  }
  void add_action_uuid(flatbuffers::Offset<flatbuffers::String> action_uuid) {
    fbb_.AddOffset(FElevatorTransformNodeInfo::VT_ACTION_UUID, action_uuid);
  }
  explicit FElevatorTransformNodeInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FElevatorTransformNodeInfoBuilder &operator=(const FElevatorTransformNodeInfoBuilder &);
  flatbuffers::Offset<FElevatorTransformNodeInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FElevatorTransformNodeInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FElevatorTransformNodeInfo> CreateFElevatorTransformNodeInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> name1 = 0,
    flatbuffers::Offset<flatbuffers::String> name2 = 0,
    flatbuffers::Offset<flatbuffers::String> name3 = 0,
    int32_t show_level = 0,
    flatbuffers::Offset<flatbuffers::String> by_proj = 0,
    int32_t node_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence = 0,
    flatbuffers::Offset<flatbuffers::String> envmap = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    flatbuffers::Offset<flatbuffers::String> soft_ver = 0,
    flatbuffers::Offset<flatbuffers::String> proj_soft_ver = 0,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    flatbuffers::Offset<flatbuffers::String> link_node = 0,
    flatbuffers::Offset<flatbuffers::String> action_uuid = 0) {
  FElevatorTransformNodeInfoBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_first_upload_tm(first_upload_tm);
  builder_.add_ct_tm(ct_tm);
  builder_.add_action_uuid(action_uuid);
  builder_.add_link_node(link_node);
  builder_.add_parm(parm);
  builder_.add_timeout(timeout);
  builder_.add_node_angle(node_angle);
  builder_.add_node_area(node_area);
  builder_.add_angle(angle);
  builder_.add_center(center);
  builder_.add_proj_soft_ver(proj_soft_ver);
  builder_.add_soft_ver(soft_ver);
  builder_.add_versatility(versatility);
  builder_.add_ct_user(ct_user);
  builder_.add_ct_dev(ct_dev);
  builder_.add_envmap(envmap);
  builder_.add_sence(sence);
  builder_.add_node_type(node_type);
  builder_.add_by_proj(by_proj);
  builder_.add_show_level(show_level);
  builder_.add_name3(name3);
  builder_.add_name2(name2);
  builder_.add_name1(name1);
  builder_.add_uuid(uuid);
  builder_.add_is_all_return(is_all_return);
  builder_.add_is_ntf_return(is_ntf_return);
  builder_.add_is_tf_return(is_tf_return);
  builder_.add_is_coordinate(is_coordinate);
  builder_.add_is_release(is_release);
  return builder_.Finish();
}

inline flatbuffers::Offset<FElevatorTransformNodeInfo> CreateFElevatorTransformNodeInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *name1 = nullptr,
    const char *name2 = nullptr,
    const char *name3 = nullptr,
    int32_t show_level = 0,
    const char *by_proj = nullptr,
    int32_t node_type = 0,
    const char *sence = nullptr,
    const char *envmap = nullptr,
    const char *ct_dev = nullptr,
    const char *ct_user = nullptr,
    int64_t ct_tm = 0,
    int64_t first_upload_tm = 0,
    int64_t modify_tm = 0,
    int32_t versatility = 0,
    const char *soft_ver = nullptr,
    const char *proj_soft_ver = nullptr,
    flatbuffers::Offset<RBN100::FPoint> center = 0,
    float angle = 0.0f,
    float node_area = 0.0f,
    float node_angle = 0.0f,
    bool is_release = false,
    int32_t timeout = 0,
    bool is_coordinate = false,
    flatbuffers::Offset<RBN100::FPoseTransParm> parm = 0,
    bool is_tf_return = false,
    bool is_ntf_return = false,
    bool is_all_return = false,
    const char *link_node = nullptr,
    const char *action_uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto name1__ = name1 ? _fbb.CreateString(name1) : 0;
  auto name2__ = name2 ? _fbb.CreateString(name2) : 0;
  auto name3__ = name3 ? _fbb.CreateString(name3) : 0;
  auto by_proj__ = by_proj ? _fbb.CreateString(by_proj) : 0;
  auto sence__ = sence ? _fbb.CreateString(sence) : 0;
  auto envmap__ = envmap ? _fbb.CreateString(envmap) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto soft_ver__ = soft_ver ? _fbb.CreateString(soft_ver) : 0;
  auto proj_soft_ver__ = proj_soft_ver ? _fbb.CreateString(proj_soft_ver) : 0;
  auto link_node__ = link_node ? _fbb.CreateString(link_node) : 0;
  auto action_uuid__ = action_uuid ? _fbb.CreateString(action_uuid) : 0;
  return RBN100::CreateFElevatorTransformNodeInfo(
      _fbb,
      uuid__,
      name1__,
      name2__,
      name3__,
      show_level,
      by_proj__,
      node_type,
      sence__,
      envmap__,
      ct_dev__,
      ct_user__,
      ct_tm,
      first_upload_tm,
      modify_tm,
      versatility,
      soft_ver__,
      proj_soft_ver__,
      center,
      angle,
      node_area,
      node_angle,
      is_release,
      timeout,
      is_coordinate,
      parm,
      is_tf_return,
      is_ntf_return,
      is_all_return,
      link_node__,
      action_uuid__);
}

struct FRequestCreateElevatorTransformNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateElevatorTransformNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELE_TRANSF_INFO = 4
  };
  const RBN100::FJMRNodeInfo *ele_transf_info() const {
    return GetPointer<const RBN100::FJMRNodeInfo *>(VT_ELE_TRANSF_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ELE_TRANSF_INFO) &&
           verifier.VerifyTable(ele_transf_info()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateElevatorTransformNodeBuilder {
  typedef FRequestCreateElevatorTransformNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ele_transf_info(flatbuffers::Offset<RBN100::FJMRNodeInfo> ele_transf_info) {
    fbb_.AddOffset(FRequestCreateElevatorTransformNode::VT_ELE_TRANSF_INFO, ele_transf_info);
  }
  explicit FRequestCreateElevatorTransformNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateElevatorTransformNodeBuilder &operator=(const FRequestCreateElevatorTransformNodeBuilder &);
  flatbuffers::Offset<FRequestCreateElevatorTransformNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateElevatorTransformNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateElevatorTransformNode> CreateFRequestCreateElevatorTransformNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FJMRNodeInfo> ele_transf_info = 0) {
  FRequestCreateElevatorTransformNodeBuilder builder_(_fbb);
  builder_.add_ele_transf_info(ele_transf_info);
  return builder_.Finish();
}

struct FActionStandBy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionStandByBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_ID = 10,
    VT_NAME = 12,
    VT_TIMEOUT = 14,
    VT_L_X = 16,
    VT_L_Y = 18,
    VT_L_Z = 20,
    VT_DIS_PRE = 22,
    VT_ANGLE_PRE = 24,
    VT_CT_TIME = 26,
    VT_CT_USER = 28,
    VT_MODIFY_TM = 30,
    VT_MODIFY_USER = 32
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  float l_x() const {
    return GetField<float>(VT_L_X, 0.0f);
  }
  float l_y() const {
    return GetField<float>(VT_L_Y, 0.0f);
  }
  float l_z() const {
    return GetField<float>(VT_L_Z, 0.0f);
  }
  int32_t dis_pre() const {
    return GetField<int32_t>(VT_DIS_PRE, 0);
  }
  int32_t angle_pre() const {
    return GetField<int32_t>(VT_ANGLE_PRE, 0);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  const flatbuffers::String *modify_user() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFY_USER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<float>(verifier, VT_L_X) &&
           VerifyField<float>(verifier, VT_L_Y) &&
           VerifyField<float>(verifier, VT_L_Z) &&
           VerifyField<int32_t>(verifier, VT_DIS_PRE) &&
           VerifyField<int32_t>(verifier, VT_ANGLE_PRE) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyOffset(verifier, VT_MODIFY_USER) &&
           verifier.VerifyString(modify_user()) &&
           verifier.EndTable();
  }
};

struct FActionStandByBuilder {
  typedef FActionStandBy Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionStandBy::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionStandBy::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionStandBy::VT_SENCE_UUID, sence_uuid);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FActionStandBy::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FActionStandBy::VT_NAME, name);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FActionStandBy::VT_TIMEOUT, timeout, 0);
  }
  void add_l_x(float l_x) {
    fbb_.AddElement<float>(FActionStandBy::VT_L_X, l_x, 0.0f);
  }
  void add_l_y(float l_y) {
    fbb_.AddElement<float>(FActionStandBy::VT_L_Y, l_y, 0.0f);
  }
  void add_l_z(float l_z) {
    fbb_.AddElement<float>(FActionStandBy::VT_L_Z, l_z, 0.0f);
  }
  void add_dis_pre(int32_t dis_pre) {
    fbb_.AddElement<int32_t>(FActionStandBy::VT_DIS_PRE, dis_pre, 0);
  }
  void add_angle_pre(int32_t angle_pre) {
    fbb_.AddElement<int32_t>(FActionStandBy::VT_ANGLE_PRE, angle_pre, 0);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FActionStandBy::VT_CT_TIME, ct_time, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FActionStandBy::VT_CT_USER, ct_user);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FActionStandBy::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_modify_user(flatbuffers::Offset<flatbuffers::String> modify_user) {
    fbb_.AddOffset(FActionStandBy::VT_MODIFY_USER, modify_user);
  }
  explicit FActionStandByBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionStandByBuilder &operator=(const FActionStandByBuilder &);
  flatbuffers::Offset<FActionStandBy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionStandBy>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionStandBy> CreateFActionStandBy(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t modify_tm = 0,
    flatbuffers::Offset<flatbuffers::String> modify_user = 0) {
  FActionStandByBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_ct_time(ct_time);
  builder_.add_modify_user(modify_user);
  builder_.add_ct_user(ct_user);
  builder_.add_angle_pre(angle_pre);
  builder_.add_dis_pre(dis_pre);
  builder_.add_l_z(l_z);
  builder_.add_l_y(l_y);
  builder_.add_l_x(l_x);
  builder_.add_timeout(timeout);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionStandBy> CreateFActionStandByDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    const char *id = nullptr,
    const char *name = nullptr,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    const char *ct_user = nullptr,
    int64_t modify_tm = 0,
    const char *modify_user = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto modify_user__ = modify_user ? _fbb.CreateString(modify_user) : 0;
  return RBN100::CreateFActionStandBy(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      id__,
      name__,
      timeout,
      l_x,
      l_y,
      l_z,
      dis_pre,
      angle_pre,
      ct_time,
      ct_user__,
      modify_tm,
      modify_user__);
}

struct FRequestCreateActionStandBy FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionStandByBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_STANDBY = 4
  };
  const RBN100::FActionStandBy *action_standby() const {
    return GetPointer<const RBN100::FActionStandBy *>(VT_ACTION_STANDBY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_STANDBY) &&
           verifier.VerifyTable(action_standby()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionStandByBuilder {
  typedef FRequestCreateActionStandBy Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_standby(flatbuffers::Offset<RBN100::FActionStandBy> action_standby) {
    fbb_.AddOffset(FRequestCreateActionStandBy::VT_ACTION_STANDBY, action_standby);
  }
  explicit FRequestCreateActionStandByBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionStandByBuilder &operator=(const FRequestCreateActionStandByBuilder &);
  flatbuffers::Offset<FRequestCreateActionStandBy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionStandBy>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionStandBy> CreateFRequestCreateActionStandBy(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionStandBy> action_standby = 0) {
  FRequestCreateActionStandByBuilder builder_(_fbb);
  builder_.add_action_standby(action_standby);
  return builder_.Finish();
}

struct FActionJMR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionJMRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_ID = 10,
    VT_NAME = 12,
    VT_TIMEOUT = 14,
    VT_L_X = 16,
    VT_L_Y = 18,
    VT_L_Z = 20,
    VT_DIS_PRE = 22,
    VT_ANGLE_PRE = 24,
    VT_CT_TIME = 26,
    VT_CT_USER = 28,
    VT_MODIFY_TM = 30,
    VT_MODIFY_USER = 32
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  float l_x() const {
    return GetField<float>(VT_L_X, 0.0f);
  }
  float l_y() const {
    return GetField<float>(VT_L_Y, 0.0f);
  }
  float l_z() const {
    return GetField<float>(VT_L_Z, 0.0f);
  }
  int32_t dis_pre() const {
    return GetField<int32_t>(VT_DIS_PRE, 0);
  }
  int32_t angle_pre() const {
    return GetField<int32_t>(VT_ANGLE_PRE, 0);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  const flatbuffers::String *modify_user() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFY_USER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<float>(verifier, VT_L_X) &&
           VerifyField<float>(verifier, VT_L_Y) &&
           VerifyField<float>(verifier, VT_L_Z) &&
           VerifyField<int32_t>(verifier, VT_DIS_PRE) &&
           VerifyField<int32_t>(verifier, VT_ANGLE_PRE) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyOffset(verifier, VT_MODIFY_USER) &&
           verifier.VerifyString(modify_user()) &&
           verifier.EndTable();
  }
};

struct FActionJMRBuilder {
  typedef FActionJMR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionJMR::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionJMR::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionJMR::VT_SENCE_UUID, sence_uuid);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FActionJMR::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FActionJMR::VT_NAME, name);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FActionJMR::VT_TIMEOUT, timeout, 0);
  }
  void add_l_x(float l_x) {
    fbb_.AddElement<float>(FActionJMR::VT_L_X, l_x, 0.0f);
  }
  void add_l_y(float l_y) {
    fbb_.AddElement<float>(FActionJMR::VT_L_Y, l_y, 0.0f);
  }
  void add_l_z(float l_z) {
    fbb_.AddElement<float>(FActionJMR::VT_L_Z, l_z, 0.0f);
  }
  void add_dis_pre(int32_t dis_pre) {
    fbb_.AddElement<int32_t>(FActionJMR::VT_DIS_PRE, dis_pre, 0);
  }
  void add_angle_pre(int32_t angle_pre) {
    fbb_.AddElement<int32_t>(FActionJMR::VT_ANGLE_PRE, angle_pre, 0);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FActionJMR::VT_CT_TIME, ct_time, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FActionJMR::VT_CT_USER, ct_user);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FActionJMR::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_modify_user(flatbuffers::Offset<flatbuffers::String> modify_user) {
    fbb_.AddOffset(FActionJMR::VT_MODIFY_USER, modify_user);
  }
  explicit FActionJMRBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionJMRBuilder &operator=(const FActionJMRBuilder &);
  flatbuffers::Offset<FActionJMR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionJMR>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionJMR> CreateFActionJMR(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t modify_tm = 0,
    flatbuffers::Offset<flatbuffers::String> modify_user = 0) {
  FActionJMRBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_ct_time(ct_time);
  builder_.add_modify_user(modify_user);
  builder_.add_ct_user(ct_user);
  builder_.add_angle_pre(angle_pre);
  builder_.add_dis_pre(dis_pre);
  builder_.add_l_z(l_z);
  builder_.add_l_y(l_y);
  builder_.add_l_x(l_x);
  builder_.add_timeout(timeout);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionJMR> CreateFActionJMRDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    const char *id = nullptr,
    const char *name = nullptr,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    const char *ct_user = nullptr,
    int64_t modify_tm = 0,
    const char *modify_user = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto modify_user__ = modify_user ? _fbb.CreateString(modify_user) : 0;
  return RBN100::CreateFActionJMR(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      id__,
      name__,
      timeout,
      l_x,
      l_y,
      l_z,
      dis_pre,
      angle_pre,
      ct_time,
      ct_user__,
      modify_tm,
      modify_user__);
}

struct FRequestCreateActionJMR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionJMRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_JMR = 4
  };
  const RBN100::FActionJMR *action_jmr() const {
    return GetPointer<const RBN100::FActionJMR *>(VT_ACTION_JMR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_JMR) &&
           verifier.VerifyTable(action_jmr()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionJMRBuilder {
  typedef FRequestCreateActionJMR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_jmr(flatbuffers::Offset<RBN100::FActionJMR> action_jmr) {
    fbb_.AddOffset(FRequestCreateActionJMR::VT_ACTION_JMR, action_jmr);
  }
  explicit FRequestCreateActionJMRBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionJMRBuilder &operator=(const FRequestCreateActionJMRBuilder &);
  flatbuffers::Offset<FRequestCreateActionJMR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionJMR>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionJMR> CreateFRequestCreateActionJMR(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionJMR> action_jmr = 0) {
  FRequestCreateActionJMRBuilder builder_(_fbb);
  builder_.add_action_jmr(action_jmr);
  return builder_.Finish();
}

struct FActionStart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_DISTANCE = 10,
    VT_ANGLE = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  float distance() const {
    return GetField<float>(VT_DISTANCE, 0.0f);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyField<float>(verifier, VT_DISTANCE) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           verifier.EndTable();
  }
};

struct FActionStartBuilder {
  typedef FActionStart Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionStart::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionStart::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionStart::VT_SENCE_UUID, sence_uuid);
  }
  void add_distance(float distance) {
    fbb_.AddElement<float>(FActionStart::VT_DISTANCE, distance, 0.0f);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FActionStart::VT_ANGLE, angle, 0.0f);
  }
  explicit FActionStartBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionStartBuilder &operator=(const FActionStartBuilder &);
  flatbuffers::Offset<FActionStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionStart>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionStart> CreateFActionStart(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    float distance = 0.0f,
    float angle = 0.0f) {
  FActionStartBuilder builder_(_fbb);
  builder_.add_angle(angle);
  builder_.add_distance(distance);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionStart> CreateFActionStartDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    float distance = 0.0f,
    float angle = 0.0f) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  return RBN100::CreateFActionStart(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      distance,
      angle);
}

struct FRequestCreateActionStart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionStartBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_START = 4
  };
  const RBN100::FActionStart *action_start() const {
    return GetPointer<const RBN100::FActionStart *>(VT_ACTION_START);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_START) &&
           verifier.VerifyTable(action_start()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionStartBuilder {
  typedef FRequestCreateActionStart Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_start(flatbuffers::Offset<RBN100::FActionStart> action_start) {
    fbb_.AddOffset(FRequestCreateActionStart::VT_ACTION_START, action_start);
  }
  explicit FRequestCreateActionStartBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionStartBuilder &operator=(const FRequestCreateActionStartBuilder &);
  flatbuffers::Offset<FRequestCreateActionStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionStart>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionStart> CreateFRequestCreateActionStart(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionStart> action_start = 0) {
  FRequestCreateActionStartBuilder builder_(_fbb);
  builder_.add_action_start(action_start);
  return builder_.Finish();
}

struct FActionElevatorOut FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionElevatorOutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_FLOOR = 10,
    VT_NAME = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  int32_t floor() const {
    return GetField<int32_t>(VT_FLOOR, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyField<int32_t>(verifier, VT_FLOOR) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FActionElevatorOutBuilder {
  typedef FActionElevatorOut Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionElevatorOut::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionElevatorOut::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionElevatorOut::VT_SENCE_UUID, sence_uuid);
  }
  void add_floor(int32_t floor) {
    fbb_.AddElement<int32_t>(FActionElevatorOut::VT_FLOOR, floor, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FActionElevatorOut::VT_NAME, name);
  }
  explicit FActionElevatorOutBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionElevatorOutBuilder &operator=(const FActionElevatorOutBuilder &);
  flatbuffers::Offset<FActionElevatorOut> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionElevatorOut>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionElevatorOut> CreateFActionElevatorOut(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    int32_t floor = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FActionElevatorOutBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_floor(floor);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionElevatorOut> CreateFActionElevatorOutDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    int32_t floor = 0,
    const char *name = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return RBN100::CreateFActionElevatorOut(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      floor,
      name__);
}

struct FRequestCreateActionElevatorOut FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionElevatorOutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_ELEVATOR_OUT = 4
  };
  const RBN100::FActionElevatorOut *action_elevator_out() const {
    return GetPointer<const RBN100::FActionElevatorOut *>(VT_ACTION_ELEVATOR_OUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_ELEVATOR_OUT) &&
           verifier.VerifyTable(action_elevator_out()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionElevatorOutBuilder {
  typedef FRequestCreateActionElevatorOut Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_elevator_out(flatbuffers::Offset<RBN100::FActionElevatorOut> action_elevator_out) {
    fbb_.AddOffset(FRequestCreateActionElevatorOut::VT_ACTION_ELEVATOR_OUT, action_elevator_out);
  }
  explicit FRequestCreateActionElevatorOutBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionElevatorOutBuilder &operator=(const FRequestCreateActionElevatorOutBuilder &);
  flatbuffers::Offset<FRequestCreateActionElevatorOut> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionElevatorOut>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionElevatorOut> CreateFRequestCreateActionElevatorOut(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionElevatorOut> action_elevator_out = 0) {
  FRequestCreateActionElevatorOutBuilder builder_(_fbb);
  builder_.add_action_elevator_out(action_elevator_out);
  return builder_.Finish();
}

struct FActionElevatorIn FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionElevatorInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_FLOOR = 10,
    VT_NAME = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  int32_t floor() const {
    return GetField<int32_t>(VT_FLOOR, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyField<int32_t>(verifier, VT_FLOOR) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FActionElevatorInBuilder {
  typedef FActionElevatorIn Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionElevatorIn::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionElevatorIn::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionElevatorIn::VT_SENCE_UUID, sence_uuid);
  }
  void add_floor(int32_t floor) {
    fbb_.AddElement<int32_t>(FActionElevatorIn::VT_FLOOR, floor, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FActionElevatorIn::VT_NAME, name);
  }
  explicit FActionElevatorInBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionElevatorInBuilder &operator=(const FActionElevatorInBuilder &);
  flatbuffers::Offset<FActionElevatorIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionElevatorIn>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionElevatorIn> CreateFActionElevatorIn(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    int32_t floor = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  FActionElevatorInBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_floor(floor);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionElevatorIn> CreateFActionElevatorInDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    int32_t floor = 0,
    const char *name = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return RBN100::CreateFActionElevatorIn(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      floor,
      name__);
}

struct FRequestCreateActionElevatorIn FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionElevatorInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_ELEVATOR_IN = 4
  };
  const RBN100::FActionElevatorIn *action_elevator_in() const {
    return GetPointer<const RBN100::FActionElevatorIn *>(VT_ACTION_ELEVATOR_IN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_ELEVATOR_IN) &&
           verifier.VerifyTable(action_elevator_in()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionElevatorInBuilder {
  typedef FRequestCreateActionElevatorIn Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_elevator_in(flatbuffers::Offset<RBN100::FActionElevatorIn> action_elevator_in) {
    fbb_.AddOffset(FRequestCreateActionElevatorIn::VT_ACTION_ELEVATOR_IN, action_elevator_in);
  }
  explicit FRequestCreateActionElevatorInBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionElevatorInBuilder &operator=(const FRequestCreateActionElevatorInBuilder &);
  flatbuffers::Offset<FRequestCreateActionElevatorIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionElevatorIn>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionElevatorIn> CreateFRequestCreateActionElevatorIn(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionElevatorIn> action_elevator_in = 0) {
  FRequestCreateActionElevatorInBuilder builder_(_fbb);
  builder_.add_action_elevator_in(action_elevator_in);
  return builder_.Finish();
}

struct FActionElevatorTransf FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FActionElevatorTransfBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE_UUID = 6,
    VT_SENCE_UUID = 8,
    VT_ID = 10,
    VT_NAME = 12,
    VT_TIMEOUT = 14,
    VT_L_X = 16,
    VT_L_Y = 18,
    VT_L_Z = 20,
    VT_DIS_PRE = 22,
    VT_ANGLE_PRE = 24,
    VT_CT_TIME = 26,
    VT_CT_USER = 28,
    VT_MODIFY_TM = 30,
    VT_MODIFY_USER = 32
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *sence_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_UUID);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  float l_x() const {
    return GetField<float>(VT_L_X, 0.0f);
  }
  float l_y() const {
    return GetField<float>(VT_L_Y, 0.0f);
  }
  float l_z() const {
    return GetField<float>(VT_L_Z, 0.0f);
  }
  int32_t dis_pre() const {
    return GetField<int32_t>(VT_DIS_PRE, 0);
  }
  int32_t angle_pre() const {
    return GetField<int32_t>(VT_ANGLE_PRE, 0);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int64_t modify_tm() const {
    return GetField<int64_t>(VT_MODIFY_TM, 0);
  }
  const flatbuffers::String *modify_user() const {
    return GetPointer<const flatbuffers::String *>(VT_MODIFY_USER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_SENCE_UUID) &&
           verifier.VerifyString(sence_uuid()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<float>(verifier, VT_L_X) &&
           VerifyField<float>(verifier, VT_L_Y) &&
           VerifyField<float>(verifier, VT_L_Z) &&
           VerifyField<int32_t>(verifier, VT_DIS_PRE) &&
           VerifyField<int32_t>(verifier, VT_ANGLE_PRE) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int64_t>(verifier, VT_MODIFY_TM) &&
           VerifyOffset(verifier, VT_MODIFY_USER) &&
           verifier.VerifyString(modify_user()) &&
           verifier.EndTable();
  }
};

struct FActionElevatorTransfBuilder {
  typedef FActionElevatorTransf Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FActionElevatorTransf::VT_UUID, uuid);
  }
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FActionElevatorTransf::VT_NODE_UUID, node_uuid);
  }
  void add_sence_uuid(flatbuffers::Offset<flatbuffers::String> sence_uuid) {
    fbb_.AddOffset(FActionElevatorTransf::VT_SENCE_UUID, sence_uuid);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FActionElevatorTransf::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FActionElevatorTransf::VT_NAME, name);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FActionElevatorTransf::VT_TIMEOUT, timeout, 0);
  }
  void add_l_x(float l_x) {
    fbb_.AddElement<float>(FActionElevatorTransf::VT_L_X, l_x, 0.0f);
  }
  void add_l_y(float l_y) {
    fbb_.AddElement<float>(FActionElevatorTransf::VT_L_Y, l_y, 0.0f);
  }
  void add_l_z(float l_z) {
    fbb_.AddElement<float>(FActionElevatorTransf::VT_L_Z, l_z, 0.0f);
  }
  void add_dis_pre(int32_t dis_pre) {
    fbb_.AddElement<int32_t>(FActionElevatorTransf::VT_DIS_PRE, dis_pre, 0);
  }
  void add_angle_pre(int32_t angle_pre) {
    fbb_.AddElement<int32_t>(FActionElevatorTransf::VT_ANGLE_PRE, angle_pre, 0);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FActionElevatorTransf::VT_CT_TIME, ct_time, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FActionElevatorTransf::VT_CT_USER, ct_user);
  }
  void add_modify_tm(int64_t modify_tm) {
    fbb_.AddElement<int64_t>(FActionElevatorTransf::VT_MODIFY_TM, modify_tm, 0);
  }
  void add_modify_user(flatbuffers::Offset<flatbuffers::String> modify_user) {
    fbb_.AddOffset(FActionElevatorTransf::VT_MODIFY_USER, modify_user);
  }
  explicit FActionElevatorTransfBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FActionElevatorTransfBuilder &operator=(const FActionElevatorTransfBuilder &);
  flatbuffers::Offset<FActionElevatorTransf> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FActionElevatorTransf>(end);
    return o;
  }
};

inline flatbuffers::Offset<FActionElevatorTransf> CreateFActionElevatorTransf(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> sence_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int64_t modify_tm = 0,
    flatbuffers::Offset<flatbuffers::String> modify_user = 0) {
  FActionElevatorTransfBuilder builder_(_fbb);
  builder_.add_modify_tm(modify_tm);
  builder_.add_ct_time(ct_time);
  builder_.add_modify_user(modify_user);
  builder_.add_ct_user(ct_user);
  builder_.add_angle_pre(angle_pre);
  builder_.add_dis_pre(dis_pre);
  builder_.add_l_z(l_z);
  builder_.add_l_y(l_y);
  builder_.add_l_x(l_x);
  builder_.add_timeout(timeout);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_sence_uuid(sence_uuid);
  builder_.add_node_uuid(node_uuid);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FActionElevatorTransf> CreateFActionElevatorTransfDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node_uuid = nullptr,
    const char *sence_uuid = nullptr,
    const char *id = nullptr,
    const char *name = nullptr,
    int32_t timeout = 0,
    float l_x = 0.0f,
    float l_y = 0.0f,
    float l_z = 0.0f,
    int32_t dis_pre = 0,
    int32_t angle_pre = 0,
    int64_t ct_time = 0,
    const char *ct_user = nullptr,
    int64_t modify_tm = 0,
    const char *modify_user = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto sence_uuid__ = sence_uuid ? _fbb.CreateString(sence_uuid) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto modify_user__ = modify_user ? _fbb.CreateString(modify_user) : 0;
  return RBN100::CreateFActionElevatorTransf(
      _fbb,
      uuid__,
      node_uuid__,
      sence_uuid__,
      id__,
      name__,
      timeout,
      l_x,
      l_y,
      l_z,
      dis_pre,
      angle_pre,
      ct_time,
      ct_user__,
      modify_tm,
      modify_user__);
}

struct FRequestCreateActionElevatorTransf FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCreateActionElevatorTransfBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_ELE_TRANSF = 4
  };
  const RBN100::FActionElevatorTransf *action_ele_transf() const {
    return GetPointer<const RBN100::FActionElevatorTransf *>(VT_ACTION_ELE_TRANSF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACTION_ELE_TRANSF) &&
           verifier.VerifyTable(action_ele_transf()) &&
           verifier.EndTable();
  }
};

struct FRequestCreateActionElevatorTransfBuilder {
  typedef FRequestCreateActionElevatorTransf Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_action_ele_transf(flatbuffers::Offset<RBN100::FActionElevatorTransf> action_ele_transf) {
    fbb_.AddOffset(FRequestCreateActionElevatorTransf::VT_ACTION_ELE_TRANSF, action_ele_transf);
  }
  explicit FRequestCreateActionElevatorTransfBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCreateActionElevatorTransfBuilder &operator=(const FRequestCreateActionElevatorTransfBuilder &);
  flatbuffers::Offset<FRequestCreateActionElevatorTransf> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCreateActionElevatorTransf>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCreateActionElevatorTransf> CreateFRequestCreateActionElevatorTransf(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FActionElevatorTransf> action_ele_transf = 0) {
  FRequestCreateActionElevatorTransfBuilder builder_(_fbb);
  builder_.add_action_ele_transf(action_ele_transf);
  return builder_.Finish();
}

struct FPathInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FPathInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_NODE1_UUID = 6,
    VT_NODE1_START = 8,
    VT_NODE2_UUID = 10,
    VT_NODE2_START = 12,
    VT_TYPE = 14,
    VT_NODE1_2 = 16,
    VT_NODE2_1 = 18,
    VT_MAP_UUID = 20,
    VT_FILEPATH = 22,
    VT_STATUS = 24,
    VT_CT_USER = 26,
    VT_CT_TYPE = 28,
    VT_CT_DEV = 30,
    VT_CT_TIME = 32,
    VT_UPLOAD_TIME = 34,
    VT_TEST = 36,
    VT_PATHLENGTH = 38,
    VT_RUNTIME_TOTAL = 40,
    VT_RUNELEC_TOTAL = 42,
    VT_PT = 44
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *node1_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE1_UUID);
  }
  bool node1_start() const {
    return GetField<uint8_t>(VT_NODE1_START, 0) != 0;
  }
  const flatbuffers::String *node2_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE2_UUID);
  }
  bool node2_start() const {
    return GetField<uint8_t>(VT_NODE2_START, 0) != 0;
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const RBN100::FPoseTransParm *node1_2() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_NODE1_2);
  }
  const RBN100::FPoseTransParm *node2_1() const {
    return GetPointer<const RBN100::FPoseTransParm *>(VT_NODE2_1);
  }
  const flatbuffers::String *map_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_MAP_UUID);
  }
  const flatbuffers::String *filepath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int32_t ct_type() const {
    return GetField<int32_t>(VT_CT_TYPE, 0);
  }
  const flatbuffers::String *ct_dev() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_DEV);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  int64_t upload_time() const {
    return GetField<int64_t>(VT_UPLOAD_TIME, 0);
  }
  int32_t test() const {
    return GetField<int32_t>(VT_TEST, 0);
  }
  float pathlength() const {
    return GetField<float>(VT_PATHLENGTH, 0.0f);
  }
  int32_t runtime_total() const {
    return GetField<int32_t>(VT_RUNTIME_TOTAL, 0);
  }
  float runelec_total() const {
    return GetField<float>(VT_RUNELEC_TOTAL, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *pt() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>> *>(VT_PT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_NODE1_UUID) &&
           verifier.VerifyString(node1_uuid()) &&
           VerifyField<uint8_t>(verifier, VT_NODE1_START) &&
           VerifyOffset(verifier, VT_NODE2_UUID) &&
           verifier.VerifyString(node2_uuid()) &&
           VerifyField<uint8_t>(verifier, VT_NODE2_START) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NODE1_2) &&
           verifier.VerifyTable(node1_2()) &&
           VerifyOffset(verifier, VT_NODE2_1) &&
           verifier.VerifyTable(node2_1()) &&
           VerifyOffset(verifier, VT_MAP_UUID) &&
           verifier.VerifyString(map_uuid()) &&
           VerifyOffset(verifier, VT_FILEPATH) &&
           verifier.VerifyString(filepath()) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int32_t>(verifier, VT_CT_TYPE) &&
           VerifyOffset(verifier, VT_CT_DEV) &&
           verifier.VerifyString(ct_dev()) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyField<int64_t>(verifier, VT_UPLOAD_TIME) &&
           VerifyField<int32_t>(verifier, VT_TEST) &&
           VerifyField<float>(verifier, VT_PATHLENGTH) &&
           VerifyField<int32_t>(verifier, VT_RUNTIME_TOTAL) &&
           VerifyField<float>(verifier, VT_RUNELEC_TOTAL) &&
           VerifyOffset(verifier, VT_PT) &&
           verifier.VerifyVector(pt()) &&
           verifier.VerifyVectorOfTables(pt()) &&
           verifier.EndTable();
  }
};

struct FPathInfoBuilder {
  typedef FPathInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FPathInfo::VT_UUID, uuid);
  }
  void add_node1_uuid(flatbuffers::Offset<flatbuffers::String> node1_uuid) {
    fbb_.AddOffset(FPathInfo::VT_NODE1_UUID, node1_uuid);
  }
  void add_node1_start(bool node1_start) {
    fbb_.AddElement<uint8_t>(FPathInfo::VT_NODE1_START, static_cast<uint8_t>(node1_start), 0);
  }
  void add_node2_uuid(flatbuffers::Offset<flatbuffers::String> node2_uuid) {
    fbb_.AddOffset(FPathInfo::VT_NODE2_UUID, node2_uuid);
  }
  void add_node2_start(bool node2_start) {
    fbb_.AddElement<uint8_t>(FPathInfo::VT_NODE2_START, static_cast<uint8_t>(node2_start), 0);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FPathInfo::VT_TYPE, type, 0);
  }
  void add_node1_2(flatbuffers::Offset<RBN100::FPoseTransParm> node1_2) {
    fbb_.AddOffset(FPathInfo::VT_NODE1_2, node1_2);
  }
  void add_node2_1(flatbuffers::Offset<RBN100::FPoseTransParm> node2_1) {
    fbb_.AddOffset(FPathInfo::VT_NODE2_1, node2_1);
  }
  void add_map_uuid(flatbuffers::Offset<flatbuffers::String> map_uuid) {
    fbb_.AddOffset(FPathInfo::VT_MAP_UUID, map_uuid);
  }
  void add_filepath(flatbuffers::Offset<flatbuffers::String> filepath) {
    fbb_.AddOffset(FPathInfo::VT_FILEPATH, filepath);
  }
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(FPathInfo::VT_STATUS, status, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FPathInfo::VT_CT_USER, ct_user);
  }
  void add_ct_type(int32_t ct_type) {
    fbb_.AddElement<int32_t>(FPathInfo::VT_CT_TYPE, ct_type, 0);
  }
  void add_ct_dev(flatbuffers::Offset<flatbuffers::String> ct_dev) {
    fbb_.AddOffset(FPathInfo::VT_CT_DEV, ct_dev);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FPathInfo::VT_CT_TIME, ct_time, 0);
  }
  void add_upload_time(int64_t upload_time) {
    fbb_.AddElement<int64_t>(FPathInfo::VT_UPLOAD_TIME, upload_time, 0);
  }
  void add_test(int32_t test) {
    fbb_.AddElement<int32_t>(FPathInfo::VT_TEST, test, 0);
  }
  void add_pathlength(float pathlength) {
    fbb_.AddElement<float>(FPathInfo::VT_PATHLENGTH, pathlength, 0.0f);
  }
  void add_runtime_total(int32_t runtime_total) {
    fbb_.AddElement<int32_t>(FPathInfo::VT_RUNTIME_TOTAL, runtime_total, 0);
  }
  void add_runelec_total(float runelec_total) {
    fbb_.AddElement<float>(FPathInfo::VT_RUNELEC_TOTAL, runelec_total, 0.0f);
  }
  void add_pt(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> pt) {
    fbb_.AddOffset(FPathInfo::VT_PT, pt);
  }
  explicit FPathInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FPathInfoBuilder &operator=(const FPathInfoBuilder &);
  flatbuffers::Offset<FPathInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FPathInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FPathInfo> CreateFPathInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> node1_uuid = 0,
    bool node1_start = false,
    flatbuffers::Offset<flatbuffers::String> node2_uuid = 0,
    bool node2_start = false,
    int32_t type = 0,
    flatbuffers::Offset<RBN100::FPoseTransParm> node1_2 = 0,
    flatbuffers::Offset<RBN100::FPoseTransParm> node2_1 = 0,
    flatbuffers::Offset<flatbuffers::String> map_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> filepath = 0,
    int32_t status = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int32_t ct_type = 0,
    flatbuffers::Offset<flatbuffers::String> ct_dev = 0,
    int64_t ct_time = 0,
    int64_t upload_time = 0,
    int32_t test = 0,
    float pathlength = 0.0f,
    int32_t runtime_total = 0,
    float runelec_total = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoint>>> pt = 0) {
  FPathInfoBuilder builder_(_fbb);
  builder_.add_upload_time(upload_time);
  builder_.add_ct_time(ct_time);
  builder_.add_pt(pt);
  builder_.add_runelec_total(runelec_total);
  builder_.add_runtime_total(runtime_total);
  builder_.add_pathlength(pathlength);
  builder_.add_test(test);
  builder_.add_ct_dev(ct_dev);
  builder_.add_ct_type(ct_type);
  builder_.add_ct_user(ct_user);
  builder_.add_status(status);
  builder_.add_filepath(filepath);
  builder_.add_map_uuid(map_uuid);
  builder_.add_node2_1(node2_1);
  builder_.add_node1_2(node1_2);
  builder_.add_type(type);
  builder_.add_node2_uuid(node2_uuid);
  builder_.add_node1_uuid(node1_uuid);
  builder_.add_uuid(uuid);
  builder_.add_node2_start(node2_start);
  builder_.add_node1_start(node1_start);
  return builder_.Finish();
}

inline flatbuffers::Offset<FPathInfo> CreateFPathInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *node1_uuid = nullptr,
    bool node1_start = false,
    const char *node2_uuid = nullptr,
    bool node2_start = false,
    int32_t type = 0,
    flatbuffers::Offset<RBN100::FPoseTransParm> node1_2 = 0,
    flatbuffers::Offset<RBN100::FPoseTransParm> node2_1 = 0,
    const char *map_uuid = nullptr,
    const char *filepath = nullptr,
    int32_t status = 0,
    const char *ct_user = nullptr,
    int32_t ct_type = 0,
    const char *ct_dev = nullptr,
    int64_t ct_time = 0,
    int64_t upload_time = 0,
    int32_t test = 0,
    float pathlength = 0.0f,
    int32_t runtime_total = 0,
    float runelec_total = 0.0f,
    const std::vector<flatbuffers::Offset<RBN100::FPoint>> *pt = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto node1_uuid__ = node1_uuid ? _fbb.CreateString(node1_uuid) : 0;
  auto node2_uuid__ = node2_uuid ? _fbb.CreateString(node2_uuid) : 0;
  auto map_uuid__ = map_uuid ? _fbb.CreateString(map_uuid) : 0;
  auto filepath__ = filepath ? _fbb.CreateString(filepath) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto ct_dev__ = ct_dev ? _fbb.CreateString(ct_dev) : 0;
  auto pt__ = pt ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoint>>(*pt) : 0;
  return RBN100::CreateFPathInfo(
      _fbb,
      uuid__,
      node1_uuid__,
      node1_start,
      node2_uuid__,
      node2_start,
      type,
      node1_2,
      node2_1,
      map_uuid__,
      filepath__,
      status,
      ct_user__,
      ct_type,
      ct_dev__,
      ct_time,
      upload_time,
      test,
      pathlength,
      runtime_total,
      runelec_total,
      pt__);
}

struct FTaskNodeList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTaskNodeListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_TASK_INDEX = 6,
    VT_TASK_SORT = 8,
    VT_ACTION = 10,
    VT_TOTAL_TIMEOUT = 12,
    VT_ACTION_TIMEOUT = 14,
    VT_ACT_LIST = 16
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  int32_t task_index() const {
    return GetField<int32_t>(VT_TASK_INDEX, 0);
  }
  int32_t task_sort() const {
    return GetField<int32_t>(VT_TASK_SORT, 0);
  }
  int32_t action() const {
    return GetField<int32_t>(VT_ACTION, 0);
  }
  int32_t total_timeout() const {
    return GetField<int32_t>(VT_TOTAL_TIMEOUT, 0);
  }
  int32_t action_timeout() const {
    return GetField<int32_t>(VT_ACTION_TIMEOUT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskActionList>> *act_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskActionList>> *>(VT_ACT_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<int32_t>(verifier, VT_TASK_INDEX) &&
           VerifyField<int32_t>(verifier, VT_TASK_SORT) &&
           VerifyField<int32_t>(verifier, VT_ACTION) &&
           VerifyField<int32_t>(verifier, VT_TOTAL_TIMEOUT) &&
           VerifyField<int32_t>(verifier, VT_ACTION_TIMEOUT) &&
           VerifyOffset(verifier, VT_ACT_LIST) &&
           verifier.VerifyVector(act_list()) &&
           verifier.VerifyVectorOfTables(act_list()) &&
           verifier.EndTable();
  }
};

struct FTaskNodeListBuilder {
  typedef FTaskNodeList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FTaskNodeList::VT_UUID, uuid);
  }
  void add_task_index(int32_t task_index) {
    fbb_.AddElement<int32_t>(FTaskNodeList::VT_TASK_INDEX, task_index, 0);
  }
  void add_task_sort(int32_t task_sort) {
    fbb_.AddElement<int32_t>(FTaskNodeList::VT_TASK_SORT, task_sort, 0);
  }
  void add_action(int32_t action) {
    fbb_.AddElement<int32_t>(FTaskNodeList::VT_ACTION, action, 0);
  }
  void add_total_timeout(int32_t total_timeout) {
    fbb_.AddElement<int32_t>(FTaskNodeList::VT_TOTAL_TIMEOUT, total_timeout, 0);
  }
  void add_action_timeout(int32_t action_timeout) {
    fbb_.AddElement<int32_t>(FTaskNodeList::VT_ACTION_TIMEOUT, action_timeout, 0);
  }
  void add_act_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskActionList>>> act_list) {
    fbb_.AddOffset(FTaskNodeList::VT_ACT_LIST, act_list);
  }
  explicit FTaskNodeListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FTaskNodeListBuilder &operator=(const FTaskNodeListBuilder &);
  flatbuffers::Offset<FTaskNodeList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTaskNodeList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTaskNodeList> CreateFTaskNodeList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    int32_t task_index = 0,
    int32_t task_sort = 0,
    int32_t action = 0,
    int32_t total_timeout = 0,
    int32_t action_timeout = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskActionList>>> act_list = 0) {
  FTaskNodeListBuilder builder_(_fbb);
  builder_.add_act_list(act_list);
  builder_.add_action_timeout(action_timeout);
  builder_.add_total_timeout(total_timeout);
  builder_.add_action(action);
  builder_.add_task_sort(task_sort);
  builder_.add_task_index(task_index);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FTaskNodeList> CreateFTaskNodeListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    int32_t task_index = 0,
    int32_t task_sort = 0,
    int32_t action = 0,
    int32_t total_timeout = 0,
    int32_t action_timeout = 0,
    const std::vector<flatbuffers::Offset<RBN100::FTaskActionList>> *act_list = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto act_list__ = act_list ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FTaskActionList>>(*act_list) : 0;
  return RBN100::CreateFTaskNodeList(
      _fbb,
      uuid__,
      task_index,
      task_sort,
      action,
      total_timeout,
      action_timeout,
      act_list__);
}

struct FTaskActionList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTaskActionListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_TASK_INDEX = 6,
    VT_TASK_SORT = 8,
    VT_TIMEOUT = 10,
    VT_TASK_CMD = 12
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  int32_t task_index() const {
    return GetField<int32_t>(VT_TASK_INDEX, 0);
  }
  int32_t task_sort() const {
    return GetField<int32_t>(VT_TASK_SORT, 0);
  }
  int32_t timeout() const {
    return GetField<int32_t>(VT_TIMEOUT, 0);
  }
  int32_t task_cmd() const {
    return GetField<int32_t>(VT_TASK_CMD, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<int32_t>(verifier, VT_TASK_INDEX) &&
           VerifyField<int32_t>(verifier, VT_TASK_SORT) &&
           VerifyField<int32_t>(verifier, VT_TIMEOUT) &&
           VerifyField<int32_t>(verifier, VT_TASK_CMD) &&
           verifier.EndTable();
  }
};

struct FTaskActionListBuilder {
  typedef FTaskActionList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FTaskActionList::VT_UUID, uuid);
  }
  void add_task_index(int32_t task_index) {
    fbb_.AddElement<int32_t>(FTaskActionList::VT_TASK_INDEX, task_index, 0);
  }
  void add_task_sort(int32_t task_sort) {
    fbb_.AddElement<int32_t>(FTaskActionList::VT_TASK_SORT, task_sort, 0);
  }
  void add_timeout(int32_t timeout) {
    fbb_.AddElement<int32_t>(FTaskActionList::VT_TIMEOUT, timeout, 0);
  }
  void add_task_cmd(int32_t task_cmd) {
    fbb_.AddElement<int32_t>(FTaskActionList::VT_TASK_CMD, task_cmd, 0);
  }
  explicit FTaskActionListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FTaskActionListBuilder &operator=(const FTaskActionListBuilder &);
  flatbuffers::Offset<FTaskActionList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTaskActionList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTaskActionList> CreateFTaskActionList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    int32_t task_index = 0,
    int32_t task_sort = 0,
    int32_t timeout = 0,
    int32_t task_cmd = 0) {
  FTaskActionListBuilder builder_(_fbb);
  builder_.add_task_cmd(task_cmd);
  builder_.add_timeout(timeout);
  builder_.add_task_sort(task_sort);
  builder_.add_task_index(task_index);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FTaskActionList> CreateFTaskActionListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    int32_t task_index = 0,
    int32_t task_sort = 0,
    int32_t timeout = 0,
    int32_t task_cmd = 0) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  return RBN100::CreateFTaskActionList(
      _fbb,
      uuid__,
      task_index,
      task_sort,
      timeout,
      task_cmd);
}

struct FReturnNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReturnNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODE_UUID = 4,
    VT_ACT_UUID = 6
  };
  const flatbuffers::String *node_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_UUID);
  }
  const flatbuffers::String *act_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_ACT_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODE_UUID) &&
           verifier.VerifyString(node_uuid()) &&
           VerifyOffset(verifier, VT_ACT_UUID) &&
           verifier.VerifyString(act_uuid()) &&
           verifier.EndTable();
  }
};

struct FReturnNodeBuilder {
  typedef FReturnNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node_uuid(flatbuffers::Offset<flatbuffers::String> node_uuid) {
    fbb_.AddOffset(FReturnNode::VT_NODE_UUID, node_uuid);
  }
  void add_act_uuid(flatbuffers::Offset<flatbuffers::String> act_uuid) {
    fbb_.AddOffset(FReturnNode::VT_ACT_UUID, act_uuid);
  }
  explicit FReturnNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReturnNodeBuilder &operator=(const FReturnNodeBuilder &);
  flatbuffers::Offset<FReturnNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReturnNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReturnNode> CreateFReturnNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> node_uuid = 0,
    flatbuffers::Offset<flatbuffers::String> act_uuid = 0) {
  FReturnNodeBuilder builder_(_fbb);
  builder_.add_act_uuid(act_uuid);
  builder_.add_node_uuid(node_uuid);
  return builder_.Finish();
}

inline flatbuffers::Offset<FReturnNode> CreateFReturnNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *node_uuid = nullptr,
    const char *act_uuid = nullptr) {
  auto node_uuid__ = node_uuid ? _fbb.CreateString(node_uuid) : 0;
  auto act_uuid__ = act_uuid ? _fbb.CreateString(act_uuid) : 0;
  return RBN100::CreateFReturnNode(
      _fbb,
      node_uuid__,
      act_uuid__);
}

struct FTaskInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTaskInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_ID = 6,
    VT_TYPE = 8,
    VT_TASK_NAME = 10,
    VT_CT_TIME = 12,
    VT_UPLOAD_TIME = 14,
    VT_TIME_ZONE = 16,
    VT_CT_USER = 18,
    VT_CT_TYPE = 20,
    VT_PRIORITY = 22,
    VT_TIMING = 24,
    VT_DELAY_TIME = 26,
    VT_TIMIMG_START_TIME = 28,
    VT_TIMING_TYPE = 30,
    VT_LIMITS_LEVEL = 32,
    VT_PROJ_ID = 34,
    VT_SENCE_ID = 36,
    VT_TASK_TYPE = 38,
    VT_SENCE_DATA_VER = 40,
    VT_SENCE_CONFIG_VER = 42,
    VT_DEV_SEL_TYPE = 44,
    VT_RETRUN_DEFAULT = 46,
    VT_EXECP_DEDFAULT = 48,
    VT_TASK_NODE_LIST = 50,
    VT_FINI_LIST = 52,
    VT_EXCEP_LIST = 54
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *task_name() const {
    return GetPointer<const flatbuffers::String *>(VT_TASK_NAME);
  }
  int64_t ct_time() const {
    return GetField<int64_t>(VT_CT_TIME, 0);
  }
  int64_t upload_time() const {
    return GetField<int64_t>(VT_UPLOAD_TIME, 0);
  }
  int32_t time_zone() const {
    return GetField<int32_t>(VT_TIME_ZONE, 0);
  }
  const flatbuffers::String *ct_user() const {
    return GetPointer<const flatbuffers::String *>(VT_CT_USER);
  }
  int32_t ct_type() const {
    return GetField<int32_t>(VT_CT_TYPE, 0);
  }
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  bool timing() const {
    return GetField<uint8_t>(VT_TIMING, 0) != 0;
  }
  int32_t delay_time() const {
    return GetField<int32_t>(VT_DELAY_TIME, 0);
  }
  const flatbuffers::String *timimg_start_time() const {
    return GetPointer<const flatbuffers::String *>(VT_TIMIMG_START_TIME);
  }
  int32_t timing_type() const {
    return GetField<int32_t>(VT_TIMING_TYPE, 0);
  }
  int32_t limits_level() const {
    return GetField<int32_t>(VT_LIMITS_LEVEL, 0);
  }
  const flatbuffers::String *proj_id() const {
    return GetPointer<const flatbuffers::String *>(VT_PROJ_ID);
  }
  const flatbuffers::String *sence_id() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_ID);
  }
  int32_t task_type() const {
    return GetField<int32_t>(VT_TASK_TYPE, 0);
  }
  const flatbuffers::String *sence_data_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_DATA_VER);
  }
  const flatbuffers::String *sence_config_ver() const {
    return GetPointer<const flatbuffers::String *>(VT_SENCE_CONFIG_VER);
  }
  int32_t dev_sel_type() const {
    return GetField<int32_t>(VT_DEV_SEL_TYPE, 0);
  }
  int32_t retrun_default() const {
    return GetField<int32_t>(VT_RETRUN_DEFAULT, 0);
  }
  int32_t execp_dedfault() const {
    return GetField<int32_t>(VT_EXECP_DEDFAULT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskNodeList>> *task_node_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskNodeList>> *>(VT_TASK_NODE_LIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>> *fini_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>> *>(VT_FINI_LIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>> *excep_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>> *>(VT_EXCEP_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_TASK_NAME) &&
           verifier.VerifyString(task_name()) &&
           VerifyField<int64_t>(verifier, VT_CT_TIME) &&
           VerifyField<int64_t>(verifier, VT_UPLOAD_TIME) &&
           VerifyField<int32_t>(verifier, VT_TIME_ZONE) &&
           VerifyOffset(verifier, VT_CT_USER) &&
           verifier.VerifyString(ct_user()) &&
           VerifyField<int32_t>(verifier, VT_CT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY) &&
           VerifyField<uint8_t>(verifier, VT_TIMING) &&
           VerifyField<int32_t>(verifier, VT_DELAY_TIME) &&
           VerifyOffset(verifier, VT_TIMIMG_START_TIME) &&
           verifier.VerifyString(timimg_start_time()) &&
           VerifyField<int32_t>(verifier, VT_TIMING_TYPE) &&
           VerifyField<int32_t>(verifier, VT_LIMITS_LEVEL) &&
           VerifyOffset(verifier, VT_PROJ_ID) &&
           verifier.VerifyString(proj_id()) &&
           VerifyOffset(verifier, VT_SENCE_ID) &&
           verifier.VerifyString(sence_id()) &&
           VerifyField<int32_t>(verifier, VT_TASK_TYPE) &&
           VerifyOffset(verifier, VT_SENCE_DATA_VER) &&
           verifier.VerifyString(sence_data_ver()) &&
           VerifyOffset(verifier, VT_SENCE_CONFIG_VER) &&
           verifier.VerifyString(sence_config_ver()) &&
           VerifyField<int32_t>(verifier, VT_DEV_SEL_TYPE) &&
           VerifyField<int32_t>(verifier, VT_RETRUN_DEFAULT) &&
           VerifyField<int32_t>(verifier, VT_EXECP_DEDFAULT) &&
           VerifyOffset(verifier, VT_TASK_NODE_LIST) &&
           verifier.VerifyVector(task_node_list()) &&
           verifier.VerifyVectorOfTables(task_node_list()) &&
           VerifyOffset(verifier, VT_FINI_LIST) &&
           verifier.VerifyVector(fini_list()) &&
           verifier.VerifyVectorOfTables(fini_list()) &&
           VerifyOffset(verifier, VT_EXCEP_LIST) &&
           verifier.VerifyVector(excep_list()) &&
           verifier.VerifyVectorOfTables(excep_list()) &&
           verifier.EndTable();
  }
};

struct FTaskInfoBuilder {
  typedef FTaskInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FTaskInfo::VT_UUID, uuid);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FTaskInfo::VT_ID, id);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_TYPE, type, 0);
  }
  void add_task_name(flatbuffers::Offset<flatbuffers::String> task_name) {
    fbb_.AddOffset(FTaskInfo::VT_TASK_NAME, task_name);
  }
  void add_ct_time(int64_t ct_time) {
    fbb_.AddElement<int64_t>(FTaskInfo::VT_CT_TIME, ct_time, 0);
  }
  void add_upload_time(int64_t upload_time) {
    fbb_.AddElement<int64_t>(FTaskInfo::VT_UPLOAD_TIME, upload_time, 0);
  }
  void add_time_zone(int32_t time_zone) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_TIME_ZONE, time_zone, 0);
  }
  void add_ct_user(flatbuffers::Offset<flatbuffers::String> ct_user) {
    fbb_.AddOffset(FTaskInfo::VT_CT_USER, ct_user);
  }
  void add_ct_type(int32_t ct_type) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_CT_TYPE, ct_type, 0);
  }
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_PRIORITY, priority, 0);
  }
  void add_timing(bool timing) {
    fbb_.AddElement<uint8_t>(FTaskInfo::VT_TIMING, static_cast<uint8_t>(timing), 0);
  }
  void add_delay_time(int32_t delay_time) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_DELAY_TIME, delay_time, 0);
  }
  void add_timimg_start_time(flatbuffers::Offset<flatbuffers::String> timimg_start_time) {
    fbb_.AddOffset(FTaskInfo::VT_TIMIMG_START_TIME, timimg_start_time);
  }
  void add_timing_type(int32_t timing_type) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_TIMING_TYPE, timing_type, 0);
  }
  void add_limits_level(int32_t limits_level) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_LIMITS_LEVEL, limits_level, 0);
  }
  void add_proj_id(flatbuffers::Offset<flatbuffers::String> proj_id) {
    fbb_.AddOffset(FTaskInfo::VT_PROJ_ID, proj_id);
  }
  void add_sence_id(flatbuffers::Offset<flatbuffers::String> sence_id) {
    fbb_.AddOffset(FTaskInfo::VT_SENCE_ID, sence_id);
  }
  void add_task_type(int32_t task_type) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_TASK_TYPE, task_type, 0);
  }
  void add_sence_data_ver(flatbuffers::Offset<flatbuffers::String> sence_data_ver) {
    fbb_.AddOffset(FTaskInfo::VT_SENCE_DATA_VER, sence_data_ver);
  }
  void add_sence_config_ver(flatbuffers::Offset<flatbuffers::String> sence_config_ver) {
    fbb_.AddOffset(FTaskInfo::VT_SENCE_CONFIG_VER, sence_config_ver);
  }
  void add_dev_sel_type(int32_t dev_sel_type) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_DEV_SEL_TYPE, dev_sel_type, 0);
  }
  void add_retrun_default(int32_t retrun_default) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_RETRUN_DEFAULT, retrun_default, 0);
  }
  void add_execp_dedfault(int32_t execp_dedfault) {
    fbb_.AddElement<int32_t>(FTaskInfo::VT_EXECP_DEDFAULT, execp_dedfault, 0);
  }
  void add_task_node_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskNodeList>>> task_node_list) {
    fbb_.AddOffset(FTaskInfo::VT_TASK_NODE_LIST, task_node_list);
  }
  void add_fini_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>>> fini_list) {
    fbb_.AddOffset(FTaskInfo::VT_FINI_LIST, fini_list);
  }
  void add_excep_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>>> excep_list) {
    fbb_.AddOffset(FTaskInfo::VT_EXCEP_LIST, excep_list);
  }
  explicit FTaskInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FTaskInfoBuilder &operator=(const FTaskInfoBuilder &);
  flatbuffers::Offset<FTaskInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTaskInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTaskInfo> CreateFTaskInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    int32_t type = 0,
    flatbuffers::Offset<flatbuffers::String> task_name = 0,
    int64_t ct_time = 0,
    int64_t upload_time = 0,
    int32_t time_zone = 0,
    flatbuffers::Offset<flatbuffers::String> ct_user = 0,
    int32_t ct_type = 0,
    int32_t priority = 0,
    bool timing = false,
    int32_t delay_time = 0,
    flatbuffers::Offset<flatbuffers::String> timimg_start_time = 0,
    int32_t timing_type = 0,
    int32_t limits_level = 0,
    flatbuffers::Offset<flatbuffers::String> proj_id = 0,
    flatbuffers::Offset<flatbuffers::String> sence_id = 0,
    int32_t task_type = 0,
    flatbuffers::Offset<flatbuffers::String> sence_data_ver = 0,
    flatbuffers::Offset<flatbuffers::String> sence_config_ver = 0,
    int32_t dev_sel_type = 0,
    int32_t retrun_default = 0,
    int32_t execp_dedfault = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FTaskNodeList>>> task_node_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>>> fini_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FReturnNode>>> excep_list = 0) {
  FTaskInfoBuilder builder_(_fbb);
  builder_.add_upload_time(upload_time);
  builder_.add_ct_time(ct_time);
  builder_.add_excep_list(excep_list);
  builder_.add_fini_list(fini_list);
  builder_.add_task_node_list(task_node_list);
  builder_.add_execp_dedfault(execp_dedfault);
  builder_.add_retrun_default(retrun_default);
  builder_.add_dev_sel_type(dev_sel_type);
  builder_.add_sence_config_ver(sence_config_ver);
  builder_.add_sence_data_ver(sence_data_ver);
  builder_.add_task_type(task_type);
  builder_.add_sence_id(sence_id);
  builder_.add_proj_id(proj_id);
  builder_.add_limits_level(limits_level);
  builder_.add_timing_type(timing_type);
  builder_.add_timimg_start_time(timimg_start_time);
  builder_.add_delay_time(delay_time);
  builder_.add_priority(priority);
  builder_.add_ct_type(ct_type);
  builder_.add_ct_user(ct_user);
  builder_.add_time_zone(time_zone);
  builder_.add_task_name(task_name);
  builder_.add_type(type);
  builder_.add_id(id);
  builder_.add_uuid(uuid);
  builder_.add_timing(timing);
  return builder_.Finish();
}

inline flatbuffers::Offset<FTaskInfo> CreateFTaskInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    const char *id = nullptr,
    int32_t type = 0,
    const char *task_name = nullptr,
    int64_t ct_time = 0,
    int64_t upload_time = 0,
    int32_t time_zone = 0,
    const char *ct_user = nullptr,
    int32_t ct_type = 0,
    int32_t priority = 0,
    bool timing = false,
    int32_t delay_time = 0,
    const char *timimg_start_time = nullptr,
    int32_t timing_type = 0,
    int32_t limits_level = 0,
    const char *proj_id = nullptr,
    const char *sence_id = nullptr,
    int32_t task_type = 0,
    const char *sence_data_ver = nullptr,
    const char *sence_config_ver = nullptr,
    int32_t dev_sel_type = 0,
    int32_t retrun_default = 0,
    int32_t execp_dedfault = 0,
    const std::vector<flatbuffers::Offset<RBN100::FTaskNodeList>> *task_node_list = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FReturnNode>> *fini_list = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FReturnNode>> *excep_list = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto task_name__ = task_name ? _fbb.CreateString(task_name) : 0;
  auto ct_user__ = ct_user ? _fbb.CreateString(ct_user) : 0;
  auto timimg_start_time__ = timimg_start_time ? _fbb.CreateString(timimg_start_time) : 0;
  auto proj_id__ = proj_id ? _fbb.CreateString(proj_id) : 0;
  auto sence_id__ = sence_id ? _fbb.CreateString(sence_id) : 0;
  auto sence_data_ver__ = sence_data_ver ? _fbb.CreateString(sence_data_ver) : 0;
  auto sence_config_ver__ = sence_config_ver ? _fbb.CreateString(sence_config_ver) : 0;
  auto task_node_list__ = task_node_list ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FTaskNodeList>>(*task_node_list) : 0;
  auto fini_list__ = fini_list ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FReturnNode>>(*fini_list) : 0;
  auto excep_list__ = excep_list ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FReturnNode>>(*excep_list) : 0;
  return RBN100::CreateFTaskInfo(
      _fbb,
      uuid__,
      id__,
      type,
      task_name__,
      ct_time,
      upload_time,
      time_zone,
      ct_user__,
      ct_type,
      priority,
      timing,
      delay_time,
      timimg_start_time__,
      timing_type,
      limits_level,
      proj_id__,
      sence_id__,
      task_type,
      sence_data_ver__,
      sence_config_ver__,
      dev_sel_type,
      retrun_default,
      execp_dedfault,
      task_node_list__,
      fini_list__,
      excep_list__);
}

struct FRequestSetTask FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestSetTaskBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TASK_INFO = 6
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const RBN100::FTaskInfo *task_info() const {
    return GetPointer<const RBN100::FTaskInfo *>(VT_TASK_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_TASK_INFO) &&
           verifier.VerifyTable(task_info()) &&
           verifier.EndTable();
  }
};

struct FRequestSetTaskBuilder {
  typedef FRequestSetTask Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FRequestSetTask::VT_TYPE, type, 0);
  }
  void add_task_info(flatbuffers::Offset<RBN100::FTaskInfo> task_info) {
    fbb_.AddOffset(FRequestSetTask::VT_TASK_INFO, task_info);
  }
  explicit FRequestSetTaskBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestSetTaskBuilder &operator=(const FRequestSetTaskBuilder &);
  flatbuffers::Offset<FRequestSetTask> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestSetTask>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestSetTask> CreateFRequestSetTask(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    flatbuffers::Offset<RBN100::FTaskInfo> task_info = 0) {
  FRequestSetTaskBuilder builder_(_fbb);
  builder_.add_task_info(task_info);
  builder_.add_type(type);
  return builder_.Finish();
}

struct FSubTaskInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FSubTaskInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct FSubTaskInfoBuilder {
  typedef FSubTaskInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FSubTaskInfo::VT_TYPE, type, 0);
  }
  explicit FSubTaskInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FSubTaskInfoBuilder &operator=(const FSubTaskInfoBuilder &);
  flatbuffers::Offset<FSubTaskInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FSubTaskInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FSubTaskInfo> CreateFSubTaskInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0) {
  FSubTaskInfoBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct FRequestSubTask FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestSubTaskBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_SUBTASK_INFO = 6
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const RBN100::FSubTaskInfo *subtask_info() const {
    return GetPointer<const RBN100::FSubTaskInfo *>(VT_SUBTASK_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_SUBTASK_INFO) &&
           verifier.VerifyTable(subtask_info()) &&
           verifier.EndTable();
  }
};

struct FRequestSubTaskBuilder {
  typedef FRequestSubTask Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FRequestSubTask::VT_TYPE, type, 0);
  }
  void add_subtask_info(flatbuffers::Offset<RBN100::FSubTaskInfo> subtask_info) {
    fbb_.AddOffset(FRequestSubTask::VT_SUBTASK_INFO, subtask_info);
  }
  explicit FRequestSubTaskBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestSubTaskBuilder &operator=(const FRequestSubTaskBuilder &);
  flatbuffers::Offset<FRequestSubTask> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestSubTask>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestSubTask> CreateFRequestSubTask(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    flatbuffers::Offset<RBN100::FSubTaskInfo> subtask_info = 0) {
  FRequestSubTaskBuilder builder_(_fbb);
  builder_.add_subtask_info(subtask_info);
  builder_.add_type(type);
  return builder_.Finish();
}

struct FRequestSetPath FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestSetPathBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH_INFO = 4
  };
  const RBN100::FPathInfo *path_info() const {
    return GetPointer<const RBN100::FPathInfo *>(VT_PATH_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH_INFO) &&
           verifier.VerifyTable(path_info()) &&
           verifier.EndTable();
  }
};

struct FRequestSetPathBuilder {
  typedef FRequestSetPath Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path_info(flatbuffers::Offset<RBN100::FPathInfo> path_info) {
    fbb_.AddOffset(FRequestSetPath::VT_PATH_INFO, path_info);
  }
  explicit FRequestSetPathBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestSetPathBuilder &operator=(const FRequestSetPathBuilder &);
  flatbuffers::Offset<FRequestSetPath> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestSetPath>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestSetPath> CreateFRequestSetPath(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FPathInfo> path_info = 0) {
  FRequestSetPathBuilder builder_(_fbb);
  builder_.add_path_info(path_info);
  return builder_.Finish();
}

struct FRequestLogin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestLoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_USERNAME = 6,
    VT_PASSWORD = 8
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct FRequestLoginBuilder {
  typedef FRequestLogin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FRequestLogin::VT_TYPE, type, 0);
  }
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(FRequestLogin::VT_USERNAME, username);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(FRequestLogin::VT_PASSWORD, password);
  }
  explicit FRequestLoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestLoginBuilder &operator=(const FRequestLoginBuilder &);
  flatbuffers::Offset<FRequestLogin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestLogin>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestLogin> CreateFRequestLogin(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  FRequestLoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<FRequestLogin> CreateFRequestLoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return RBN100::CreateFRequestLogin(
      _fbb,
      type,
      username__,
      password__);
}

struct FRequestGetSenceList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestGetSenceListBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestGetSenceListBuilder {
  typedef FRequestGetSenceList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestGetSenceListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestGetSenceListBuilder &operator=(const FRequestGetSenceListBuilder &);
  flatbuffers::Offset<FRequestGetSenceList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestGetSenceList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestGetSenceList> CreateFRequestGetSenceList(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestGetSenceListBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestGetNodeList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestGetNodeListBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestGetNodeListBuilder {
  typedef FRequestGetNodeList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestGetNodeListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestGetNodeListBuilder &operator=(const FRequestGetNodeListBuilder &);
  flatbuffers::Offset<FRequestGetNodeList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestGetNodeList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestGetNodeList> CreateFRequestGetNodeList(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestGetNodeListBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestSetState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestSetStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  int32_t state() const {
    return GetField<int32_t>(VT_STATE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct FRequestSetStateBuilder {
  typedef FRequestSetState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(int32_t state) {
    fbb_.AddElement<int32_t>(FRequestSetState::VT_STATE, state, 0);
  }
  explicit FRequestSetStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestSetStateBuilder &operator=(const FRequestSetStateBuilder &);
  flatbuffers::Offset<FRequestSetState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestSetState>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestSetState> CreateFRequestSetState(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t state = 0) {
  FRequestSetStateBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct FRequestGetPathList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestGetPathListBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestGetPathListBuilder {
  typedef FRequestGetPathList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestGetPathListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestGetPathListBuilder &operator=(const FRequestGetPathListBuilder &);
  flatbuffers::Offset<FRequestGetPathList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestGetPathList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestGetPathList> CreateFRequestGetPathList(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestGetPathListBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestGetMapList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestGetMapListBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestGetMapListBuilder {
  typedef FRequestGetMapList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestGetMapListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestGetMapListBuilder &operator=(const FRequestGetMapListBuilder &);
  flatbuffers::Offset<FRequestGetMapList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestGetMapList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestGetMapList> CreateFRequestGetMapList(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestGetMapListBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestSetSysTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestSetSysTimeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct FRequestSetSysTimeBuilder {
  typedef FRequestSetSysTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(FRequestSetSysTime::VT_TIME, time, 0);
  }
  explicit FRequestSetSysTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestSetSysTimeBuilder &operator=(const FRequestSetSysTimeBuilder &);
  flatbuffers::Offset<FRequestSetSysTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestSetSysTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestSetSysTime> CreateFRequestSetSysTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0) {
  FRequestSetSysTimeBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

struct FRequestGetSysTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestGetSysTimeBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestGetSysTimeBuilder {
  typedef FRequestGetSysTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestGetSysTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestGetSysTimeBuilder &operator=(const FRequestGetSysTimeBuilder &);
  flatbuffers::Offset<FRequestGetSysTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestGetSysTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestGetSysTime> CreateFRequestGetSysTime(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestGetSysTimeBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestOpenHatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestOpenHatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4,
    VT_PWD = 6
  };
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  const flatbuffers::String *pwd() const {
    return GetPointer<const flatbuffers::String *>(VT_PWD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           VerifyOffset(verifier, VT_PWD) &&
           verifier.VerifyString(pwd()) &&
           verifier.EndTable();
  }
};

struct FRequestOpenHatchBuilder {
  typedef FRequestOpenHatch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(FRequestOpenHatch::VT_MODE, mode, 0);
  }
  void add_pwd(flatbuffers::Offset<flatbuffers::String> pwd) {
    fbb_.AddOffset(FRequestOpenHatch::VT_PWD, pwd);
  }
  explicit FRequestOpenHatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestOpenHatchBuilder &operator=(const FRequestOpenHatchBuilder &);
  flatbuffers::Offset<FRequestOpenHatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestOpenHatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestOpenHatch> CreateFRequestOpenHatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mode = 0,
    flatbuffers::Offset<flatbuffers::String> pwd = 0) {
  FRequestOpenHatchBuilder builder_(_fbb);
  builder_.add_pwd(pwd);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<FRequestOpenHatch> CreateFRequestOpenHatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mode = 0,
    const char *pwd = nullptr) {
  auto pwd__ = pwd ? _fbb.CreateString(pwd) : 0;
  return RBN100::CreateFRequestOpenHatch(
      _fbb,
      mode,
      pwd__);
}

struct FRequestCloseHatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestCloseHatchBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODE = 4
  };
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct FRequestCloseHatchBuilder {
  typedef FRequestCloseHatch Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(FRequestCloseHatch::VT_MODE, mode, 0);
  }
  explicit FRequestCloseHatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestCloseHatchBuilder &operator=(const FRequestCloseHatchBuilder &);
  flatbuffers::Offset<FRequestCloseHatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestCloseHatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestCloseHatch> CreateFRequestCloseHatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mode = 0) {
  FRequestCloseHatchBuilder builder_(_fbb);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct FRequestElevatorState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestElevatorStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DOOR_STATE = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  RBN100::FElevatorDoorState door_state() const {
    return static_cast<RBN100::FElevatorDoorState>(GetField<int8_t>(VT_DOOR_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_DOOR_STATE) &&
           verifier.EndTable();
  }
};

struct FRequestElevatorStateBuilder {
  typedef FRequestElevatorState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FRequestElevatorState::VT_ID, id);
  }
  void add_door_state(RBN100::FElevatorDoorState door_state) {
    fbb_.AddElement<int8_t>(FRequestElevatorState::VT_DOOR_STATE, static_cast<int8_t>(door_state), 0);
  }
  explicit FRequestElevatorStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestElevatorStateBuilder &operator=(const FRequestElevatorStateBuilder &);
  flatbuffers::Offset<FRequestElevatorState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestElevatorState>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestElevatorState> CreateFRequestElevatorState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    RBN100::FElevatorDoorState door_state = RBN100::FElevatorDoorState_UNKNOWN) {
  FRequestElevatorStateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_door_state(door_state);
  return builder_.Finish();
}

inline flatbuffers::Offset<FRequestElevatorState> CreateFRequestElevatorStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    RBN100::FElevatorDoorState door_state = RBN100::FElevatorDoorState_UNKNOWN) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return RBN100::CreateFRequestElevatorState(
      _fbb,
      id__,
      door_state);
}

struct FRequestTaskPause FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestTaskPauseBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestTaskPauseBuilder {
  typedef FRequestTaskPause Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestTaskPauseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestTaskPauseBuilder &operator=(const FRequestTaskPauseBuilder &);
  flatbuffers::Offset<FRequestTaskPause> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestTaskPause>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestTaskPause> CreateFRequestTaskPause(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestTaskPauseBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FRequestTaskReStart FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestTaskReStartBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct FRequestTaskReStartBuilder {
  typedef FRequestTaskReStart Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit FRequestTaskReStartBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestTaskReStartBuilder &operator=(const FRequestTaskReStartBuilder &);
  flatbuffers::Offset<FRequestTaskReStart> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestTaskReStart>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestTaskReStart> CreateFRequestTaskReStart(
    flatbuffers::FlatBufferBuilder &_fbb) {
  FRequestTaskReStartBuilder builder_(_fbb);
  return builder_.Finish();
}

struct FTaskStopInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTaskStopInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_TYPE = 6,
    VT_SRC = 8,
    VT_USER = 10,
    VT_TM = 12,
    VT_TARGET = 14,
    VT_SN = 16,
    VT_STOPTASK = 18,
    VT_STOPUUID = 20,
    VT_STOPTYPE = 22
  };
  const flatbuffers::String *uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_UUID);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  RBN100::FTaskSendSrc src() const {
    return static_cast<RBN100::FTaskSendSrc>(GetField<int8_t>(VT_SRC, 0));
  }
  const flatbuffers::String *user() const {
    return GetPointer<const flatbuffers::String *>(VT_USER);
  }
  int64_t tm() const {
    return GetField<int64_t>(VT_TM, 0);
  }
  int32_t target() const {
    return GetField<int32_t>(VT_TARGET, 0);
  }
  const flatbuffers::String *sn() const {
    return GetPointer<const flatbuffers::String *>(VT_SN);
  }
  int32_t stoptask() const {
    return GetField<int32_t>(VT_STOPTASK, 0);
  }
  const flatbuffers::String *stopuuid() const {
    return GetPointer<const flatbuffers::String *>(VT_STOPUUID);
  }
  RBN100::FTaskStopType stoptype() const {
    return static_cast<RBN100::FTaskStopType>(GetField<int8_t>(VT_STOPTYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UUID) &&
           verifier.VerifyString(uuid()) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int8_t>(verifier, VT_SRC) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyField<int64_t>(verifier, VT_TM) &&
           VerifyField<int32_t>(verifier, VT_TARGET) &&
           VerifyOffset(verifier, VT_SN) &&
           verifier.VerifyString(sn()) &&
           VerifyField<int32_t>(verifier, VT_STOPTASK) &&
           VerifyOffset(verifier, VT_STOPUUID) &&
           verifier.VerifyString(stopuuid()) &&
           VerifyField<int8_t>(verifier, VT_STOPTYPE) &&
           verifier.EndTable();
  }
};

struct FTaskStopInfoBuilder {
  typedef FTaskStopInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) {
    fbb_.AddOffset(FTaskStopInfo::VT_UUID, uuid);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FTaskStopInfo::VT_TYPE, type, 0);
  }
  void add_src(RBN100::FTaskSendSrc src) {
    fbb_.AddElement<int8_t>(FTaskStopInfo::VT_SRC, static_cast<int8_t>(src), 0);
  }
  void add_user(flatbuffers::Offset<flatbuffers::String> user) {
    fbb_.AddOffset(FTaskStopInfo::VT_USER, user);
  }
  void add_tm(int64_t tm) {
    fbb_.AddElement<int64_t>(FTaskStopInfo::VT_TM, tm, 0);
  }
  void add_target(int32_t target) {
    fbb_.AddElement<int32_t>(FTaskStopInfo::VT_TARGET, target, 0);
  }
  void add_sn(flatbuffers::Offset<flatbuffers::String> sn) {
    fbb_.AddOffset(FTaskStopInfo::VT_SN, sn);
  }
  void add_stoptask(int32_t stoptask) {
    fbb_.AddElement<int32_t>(FTaskStopInfo::VT_STOPTASK, stoptask, 0);
  }
  void add_stopuuid(flatbuffers::Offset<flatbuffers::String> stopuuid) {
    fbb_.AddOffset(FTaskStopInfo::VT_STOPUUID, stopuuid);
  }
  void add_stoptype(RBN100::FTaskStopType stoptype) {
    fbb_.AddElement<int8_t>(FTaskStopInfo::VT_STOPTYPE, static_cast<int8_t>(stoptype), 0);
  }
  explicit FTaskStopInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FTaskStopInfoBuilder &operator=(const FTaskStopInfoBuilder &);
  flatbuffers::Offset<FTaskStopInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTaskStopInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTaskStopInfo> CreateFTaskStopInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> uuid = 0,
    int32_t type = 0,
    RBN100::FTaskSendSrc src = RBN100::FTaskSendSrc_UI,
    flatbuffers::Offset<flatbuffers::String> user = 0,
    int64_t tm = 0,
    int32_t target = 0,
    flatbuffers::Offset<flatbuffers::String> sn = 0,
    int32_t stoptask = 0,
    flatbuffers::Offset<flatbuffers::String> stopuuid = 0,
    RBN100::FTaskStopType stoptype = RBN100::FTaskStopType_Stop) {
  FTaskStopInfoBuilder builder_(_fbb);
  builder_.add_tm(tm);
  builder_.add_stopuuid(stopuuid);
  builder_.add_stoptask(stoptask);
  builder_.add_sn(sn);
  builder_.add_target(target);
  builder_.add_user(user);
  builder_.add_type(type);
  builder_.add_uuid(uuid);
  builder_.add_stoptype(stoptype);
  builder_.add_src(src);
  return builder_.Finish();
}

inline flatbuffers::Offset<FTaskStopInfo> CreateFTaskStopInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *uuid = nullptr,
    int32_t type = 0,
    RBN100::FTaskSendSrc src = RBN100::FTaskSendSrc_UI,
    const char *user = nullptr,
    int64_t tm = 0,
    int32_t target = 0,
    const char *sn = nullptr,
    int32_t stoptask = 0,
    const char *stopuuid = nullptr,
    RBN100::FTaskStopType stoptype = RBN100::FTaskStopType_Stop) {
  auto uuid__ = uuid ? _fbb.CreateString(uuid) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto sn__ = sn ? _fbb.CreateString(sn) : 0;
  auto stopuuid__ = stopuuid ? _fbb.CreateString(stopuuid) : 0;
  return RBN100::CreateFTaskStopInfo(
      _fbb,
      uuid__,
      type,
      src,
      user__,
      tm,
      target,
      sn__,
      stoptask,
      stopuuid__,
      stoptype);
}

struct FRequestTaskStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FRequestTaskStopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STOP_INFO = 4
  };
  const RBN100::FTaskStopInfo *stop_info() const {
    return GetPointer<const RBN100::FTaskStopInfo *>(VT_STOP_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STOP_INFO) &&
           verifier.VerifyTable(stop_info()) &&
           verifier.EndTable();
  }
};

struct FRequestTaskStopBuilder {
  typedef FRequestTaskStop Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_stop_info(flatbuffers::Offset<RBN100::FTaskStopInfo> stop_info) {
    fbb_.AddOffset(FRequestTaskStop::VT_STOP_INFO, stop_info);
  }
  explicit FRequestTaskStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FRequestTaskStopBuilder &operator=(const FRequestTaskStopBuilder &);
  flatbuffers::Offset<FRequestTaskStop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FRequestTaskStop>(end);
    return o;
  }
};

inline flatbuffers::Offset<FRequestTaskStop> CreateFRequestTaskStop(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<RBN100::FTaskStopInfo> stop_info = 0) {
  FRequestTaskStopBuilder builder_(_fbb);
  builder_.add_stop_info(stop_info);
  return builder_.Finish();
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_MESSAGE_TYPE = 6,
    VT_MESSAGE = 8
  };
  RBN100::FRequestType type() const {
    return static_cast<RBN100::FRequestType>(GetField<int8_t>(VT_TYPE, 0));
  }
  RBN100::FRequestDataField message_type() const {
    return static_cast<RBN100::FRequestDataField>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const RBN100::FRequestVideo *message_as_FRequestVideo() const {
    return message_type() == RBN100::FRequestDataField_FRequestVideo ? static_cast<const RBN100::FRequestVideo *>(message()) : nullptr;
  }
  const RBN100::FRequestScanQR *message_as_FRequestScanQR() const {
    return message_type() == RBN100::FRequestDataField_FRequestScanQR ? static_cast<const RBN100::FRequestScanQR *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateSence *message_as_FRequestCreateSence() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateSence ? static_cast<const RBN100::FRequestCreateSence *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateMap_Tag *message_as_FRequestCreateMap_Tag() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateMap_Tag ? static_cast<const RBN100::FRequestCreateMap_Tag *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateMap_Any *message_as_FRequestCreateMap_Any() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateMap_Any ? static_cast<const RBN100::FRequestCreateMap_Any *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateMap_Elevator *message_as_FRequestCreateMap_Elevator() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateMap_Elevator ? static_cast<const RBN100::FRequestCreateMap_Elevator *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateMap_Stop *message_as_FRequestCreateMap_Stop() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateMap_Stop ? static_cast<const RBN100::FRequestCreateMap_Stop *>(message()) : nullptr;
  }
  const RBN100::FRequestCreatePoseNode *message_as_FRequestCreatePoseNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreatePoseNode ? static_cast<const RBN100::FRequestCreatePoseNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateStartNode *message_as_FRequestCreateStartNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateStartNode ? static_cast<const RBN100::FRequestCreateStartNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateStandByNode *message_as_FRequestCreateStandByNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateStandByNode ? static_cast<const RBN100::FRequestCreateStandByNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreatePassNode *message_as_FRequestCreatePassNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreatePassNode ? static_cast<const RBN100::FRequestCreatePassNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateJMRNode *message_as_FRequestCreateJMRNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateJMRNode ? static_cast<const RBN100::FRequestCreateJMRNode *>(message()) : nullptr;
  }
  const RBN100::FRequestElevatorInfoInput *message_as_FRequestElevatorInfoInput() const {
    return message_type() == RBN100::FRequestDataField_FRequestElevatorInfoInput ? static_cast<const RBN100::FRequestElevatorInfoInput *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateElevatorOutNode *message_as_FRequestCreateElevatorOutNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateElevatorOutNode ? static_cast<const RBN100::FRequestCreateElevatorOutNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateElevatorTransformNode *message_as_FRequestCreateElevatorTransformNode() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateElevatorTransformNode ? static_cast<const RBN100::FRequestCreateElevatorTransformNode *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionStandBy *message_as_FRequestCreateActionStandBy() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionStandBy ? static_cast<const RBN100::FRequestCreateActionStandBy *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionJMR *message_as_FRequestCreateActionJMR() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionJMR ? static_cast<const RBN100::FRequestCreateActionJMR *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionStart *message_as_FRequestCreateActionStart() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionStart ? static_cast<const RBN100::FRequestCreateActionStart *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionElevatorOut *message_as_FRequestCreateActionElevatorOut() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionElevatorOut ? static_cast<const RBN100::FRequestCreateActionElevatorOut *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionElevatorIn *message_as_FRequestCreateActionElevatorIn() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionElevatorIn ? static_cast<const RBN100::FRequestCreateActionElevatorIn *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateActionElevatorTransf *message_as_FRequestCreateActionElevatorTransf() const {
    return message_type() == RBN100::FRequestDataField_FRequestCreateActionElevatorTransf ? static_cast<const RBN100::FRequestCreateActionElevatorTransf *>(message()) : nullptr;
  }
  const RBN100::FRequestSetTask *message_as_FRequestSetTask() const {
    return message_type() == RBN100::FRequestDataField_FRequestSetTask ? static_cast<const RBN100::FRequestSetTask *>(message()) : nullptr;
  }
  const RBN100::FRequestSubTask *message_as_FRequestSubTask() const {
    return message_type() == RBN100::FRequestDataField_FRequestSubTask ? static_cast<const RBN100::FRequestSubTask *>(message()) : nullptr;
  }
  const RBN100::FRequestSetPath *message_as_FRequestSetPath() const {
    return message_type() == RBN100::FRequestDataField_FRequestSetPath ? static_cast<const RBN100::FRequestSetPath *>(message()) : nullptr;
  }
  const RBN100::FRequestLogin *message_as_FRequestLogin() const {
    return message_type() == RBN100::FRequestDataField_FRequestLogin ? static_cast<const RBN100::FRequestLogin *>(message()) : nullptr;
  }
  const RBN100::FRequestGetSenceList *message_as_FRequestGetSenceList() const {
    return message_type() == RBN100::FRequestDataField_FRequestGetSenceList ? static_cast<const RBN100::FRequestGetSenceList *>(message()) : nullptr;
  }
  const RBN100::FRequestSetState *message_as_FRequestSetState() const {
    return message_type() == RBN100::FRequestDataField_FRequestSetState ? static_cast<const RBN100::FRequestSetState *>(message()) : nullptr;
  }
  const RBN100::FRequestGetPathList *message_as_FRequestGetPathList() const {
    return message_type() == RBN100::FRequestDataField_FRequestGetPathList ? static_cast<const RBN100::FRequestGetPathList *>(message()) : nullptr;
  }
  const RBN100::FRequestGetNodeList *message_as_FRequestGetNodeList() const {
    return message_type() == RBN100::FRequestDataField_FRequestGetNodeList ? static_cast<const RBN100::FRequestGetNodeList *>(message()) : nullptr;
  }
  const RBN100::FRequestSetSysTime *message_as_FRequestSetSysTime() const {
    return message_type() == RBN100::FRequestDataField_FRequestSetSysTime ? static_cast<const RBN100::FRequestSetSysTime *>(message()) : nullptr;
  }
  const RBN100::FRequestGetSysTime *message_as_FRequestGetSysTime() const {
    return message_type() == RBN100::FRequestDataField_FRequestGetSysTime ? static_cast<const RBN100::FRequestGetSysTime *>(message()) : nullptr;
  }
  const RBN100::FRequestOpenHatch *message_as_FRequestOpenHatch() const {
    return message_type() == RBN100::FRequestDataField_FRequestOpenHatch ? static_cast<const RBN100::FRequestOpenHatch *>(message()) : nullptr;
  }
  const RBN100::FRequestCloseHatch *message_as_FRequestCloseHatch() const {
    return message_type() == RBN100::FRequestDataField_FRequestCloseHatch ? static_cast<const RBN100::FRequestCloseHatch *>(message()) : nullptr;
  }
  const RBN100::FRequestGetMapList *message_as_FRequestGetMapList() const {
    return message_type() == RBN100::FRequestDataField_FRequestGetMapList ? static_cast<const RBN100::FRequestGetMapList *>(message()) : nullptr;
  }
  const RBN100::FRequestElevatorState *message_as_FRequestElevatorState() const {
    return message_type() == RBN100::FRequestDataField_FRequestElevatorState ? static_cast<const RBN100::FRequestElevatorState *>(message()) : nullptr;
  }
  const RBN100::FRequestTaskStop *message_as_FRequestTaskStop() const {
    return message_type() == RBN100::FRequestDataField_FRequestTaskStop ? static_cast<const RBN100::FRequestTaskStop *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyFRequestDataField(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RBN100::FRequestVideo *Request::message_as<RBN100::FRequestVideo>() const {
  return message_as_FRequestVideo();
}

template<> inline const RBN100::FRequestScanQR *Request::message_as<RBN100::FRequestScanQR>() const {
  return message_as_FRequestScanQR();
}

template<> inline const RBN100::FRequestCreateSence *Request::message_as<RBN100::FRequestCreateSence>() const {
  return message_as_FRequestCreateSence();
}

template<> inline const RBN100::FRequestCreateMap_Tag *Request::message_as<RBN100::FRequestCreateMap_Tag>() const {
  return message_as_FRequestCreateMap_Tag();
}

template<> inline const RBN100::FRequestCreateMap_Any *Request::message_as<RBN100::FRequestCreateMap_Any>() const {
  return message_as_FRequestCreateMap_Any();
}

template<> inline const RBN100::FRequestCreateMap_Elevator *Request::message_as<RBN100::FRequestCreateMap_Elevator>() const {
  return message_as_FRequestCreateMap_Elevator();
}

template<> inline const RBN100::FRequestCreateMap_Stop *Request::message_as<RBN100::FRequestCreateMap_Stop>() const {
  return message_as_FRequestCreateMap_Stop();
}

template<> inline const RBN100::FRequestCreatePoseNode *Request::message_as<RBN100::FRequestCreatePoseNode>() const {
  return message_as_FRequestCreatePoseNode();
}

template<> inline const RBN100::FRequestCreateStartNode *Request::message_as<RBN100::FRequestCreateStartNode>() const {
  return message_as_FRequestCreateStartNode();
}

template<> inline const RBN100::FRequestCreateStandByNode *Request::message_as<RBN100::FRequestCreateStandByNode>() const {
  return message_as_FRequestCreateStandByNode();
}

template<> inline const RBN100::FRequestCreatePassNode *Request::message_as<RBN100::FRequestCreatePassNode>() const {
  return message_as_FRequestCreatePassNode();
}

template<> inline const RBN100::FRequestCreateJMRNode *Request::message_as<RBN100::FRequestCreateJMRNode>() const {
  return message_as_FRequestCreateJMRNode();
}

template<> inline const RBN100::FRequestElevatorInfoInput *Request::message_as<RBN100::FRequestElevatorInfoInput>() const {
  return message_as_FRequestElevatorInfoInput();
}

template<> inline const RBN100::FRequestCreateElevatorOutNode *Request::message_as<RBN100::FRequestCreateElevatorOutNode>() const {
  return message_as_FRequestCreateElevatorOutNode();
}

template<> inline const RBN100::FRequestCreateElevatorTransformNode *Request::message_as<RBN100::FRequestCreateElevatorTransformNode>() const {
  return message_as_FRequestCreateElevatorTransformNode();
}

template<> inline const RBN100::FRequestCreateActionStandBy *Request::message_as<RBN100::FRequestCreateActionStandBy>() const {
  return message_as_FRequestCreateActionStandBy();
}

template<> inline const RBN100::FRequestCreateActionJMR *Request::message_as<RBN100::FRequestCreateActionJMR>() const {
  return message_as_FRequestCreateActionJMR();
}

template<> inline const RBN100::FRequestCreateActionStart *Request::message_as<RBN100::FRequestCreateActionStart>() const {
  return message_as_FRequestCreateActionStart();
}

template<> inline const RBN100::FRequestCreateActionElevatorOut *Request::message_as<RBN100::FRequestCreateActionElevatorOut>() const {
  return message_as_FRequestCreateActionElevatorOut();
}

template<> inline const RBN100::FRequestCreateActionElevatorIn *Request::message_as<RBN100::FRequestCreateActionElevatorIn>() const {
  return message_as_FRequestCreateActionElevatorIn();
}

template<> inline const RBN100::FRequestCreateActionElevatorTransf *Request::message_as<RBN100::FRequestCreateActionElevatorTransf>() const {
  return message_as_FRequestCreateActionElevatorTransf();
}

template<> inline const RBN100::FRequestSetTask *Request::message_as<RBN100::FRequestSetTask>() const {
  return message_as_FRequestSetTask();
}

template<> inline const RBN100::FRequestSubTask *Request::message_as<RBN100::FRequestSubTask>() const {
  return message_as_FRequestSubTask();
}

template<> inline const RBN100::FRequestSetPath *Request::message_as<RBN100::FRequestSetPath>() const {
  return message_as_FRequestSetPath();
}

template<> inline const RBN100::FRequestLogin *Request::message_as<RBN100::FRequestLogin>() const {
  return message_as_FRequestLogin();
}

template<> inline const RBN100::FRequestGetSenceList *Request::message_as<RBN100::FRequestGetSenceList>() const {
  return message_as_FRequestGetSenceList();
}

template<> inline const RBN100::FRequestSetState *Request::message_as<RBN100::FRequestSetState>() const {
  return message_as_FRequestSetState();
}

template<> inline const RBN100::FRequestGetPathList *Request::message_as<RBN100::FRequestGetPathList>() const {
  return message_as_FRequestGetPathList();
}

template<> inline const RBN100::FRequestGetNodeList *Request::message_as<RBN100::FRequestGetNodeList>() const {
  return message_as_FRequestGetNodeList();
}

template<> inline const RBN100::FRequestSetSysTime *Request::message_as<RBN100::FRequestSetSysTime>() const {
  return message_as_FRequestSetSysTime();
}

template<> inline const RBN100::FRequestGetSysTime *Request::message_as<RBN100::FRequestGetSysTime>() const {
  return message_as_FRequestGetSysTime();
}

template<> inline const RBN100::FRequestOpenHatch *Request::message_as<RBN100::FRequestOpenHatch>() const {
  return message_as_FRequestOpenHatch();
}

template<> inline const RBN100::FRequestCloseHatch *Request::message_as<RBN100::FRequestCloseHatch>() const {
  return message_as_FRequestCloseHatch();
}

template<> inline const RBN100::FRequestGetMapList *Request::message_as<RBN100::FRequestGetMapList>() const {
  return message_as_FRequestGetMapList();
}

template<> inline const RBN100::FRequestElevatorState *Request::message_as<RBN100::FRequestElevatorState>() const {
  return message_as_FRequestElevatorState();
}

template<> inline const RBN100::FRequestTaskStop *Request::message_as<RBN100::FRequestTaskStop>() const {
  return message_as_FRequestTaskStop();
}

struct RequestBuilder {
  typedef Request Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(RBN100::FRequestType type) {
    fbb_.AddElement<int8_t>(Request::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_message_type(RBN100::FRequestDataField message_type) {
    fbb_.AddElement<uint8_t>(Request::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Request::VT_MESSAGE, message);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    RBN100::FRequestType type = RBN100::FRequestType_Video,
    RBN100::FRequestDataField message_type = RBN100::FRequestDataField_NONE,
    flatbuffers::Offset<void> message = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyFRequestDataField(flatbuffers::Verifier &verifier, const void *obj, FRequestDataField type) {
  switch (type) {
    case FRequestDataField_NONE: {
      return true;
    }
    case FRequestDataField_FRequestVideo: {
      auto ptr = reinterpret_cast<const RBN100::FRequestVideo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestScanQR: {
      auto ptr = reinterpret_cast<const RBN100::FRequestScanQR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateSence: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateSence *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateMap_Tag: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateMap_Tag *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateMap_Any: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateMap_Any *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateMap_Elevator: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateMap_Elevator *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateMap_Stop: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateMap_Stop *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreatePoseNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreatePoseNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateStartNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateStartNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateStandByNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateStandByNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreatePassNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreatePassNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateJMRNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateJMRNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestElevatorInfoInput: {
      auto ptr = reinterpret_cast<const RBN100::FRequestElevatorInfoInput *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateElevatorOutNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateElevatorOutNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateElevatorTransformNode: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateElevatorTransformNode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionStandBy: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionStandBy *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionJMR: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionJMR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionStart: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionStart *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionElevatorOut: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionElevatorOut *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionElevatorIn: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionElevatorIn *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCreateActionElevatorTransf: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateActionElevatorTransf *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestSetTask: {
      auto ptr = reinterpret_cast<const RBN100::FRequestSetTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestSubTask: {
      auto ptr = reinterpret_cast<const RBN100::FRequestSubTask *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestSetPath: {
      auto ptr = reinterpret_cast<const RBN100::FRequestSetPath *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestLogin: {
      auto ptr = reinterpret_cast<const RBN100::FRequestLogin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestGetSenceList: {
      auto ptr = reinterpret_cast<const RBN100::FRequestGetSenceList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestSetState: {
      auto ptr = reinterpret_cast<const RBN100::FRequestSetState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestGetPathList: {
      auto ptr = reinterpret_cast<const RBN100::FRequestGetPathList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestGetNodeList: {
      auto ptr = reinterpret_cast<const RBN100::FRequestGetNodeList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestSetSysTime: {
      auto ptr = reinterpret_cast<const RBN100::FRequestSetSysTime *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestGetSysTime: {
      auto ptr = reinterpret_cast<const RBN100::FRequestGetSysTime *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestOpenHatch: {
      auto ptr = reinterpret_cast<const RBN100::FRequestOpenHatch *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestCloseHatch: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCloseHatch *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestGetMapList: {
      auto ptr = reinterpret_cast<const RBN100::FRequestGetMapList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestElevatorState: {
      auto ptr = reinterpret_cast<const RBN100::FRequestElevatorState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FRequestDataField_FRequestTaskStop: {
      auto ptr = reinterpret_cast<const RBN100::FRequestTaskStop *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFRequestDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFRequestDataField(
        verifier,  values->Get(i), types->GetEnum<FRequestDataField>(i))) {
      return false;
    }
  }
  return true;
}

inline const RBN100::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<RBN100::Request>(buf);
}

inline const RBN100::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<RBN100::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RBN100::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RBN100::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RBN100

#endif  // FLATBUFFERS_GENERATED_REQUEST_RBN100_H_
