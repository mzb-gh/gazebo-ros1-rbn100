// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_RBN100_H_
#define FLATBUFFERS_GENERATED_RESPONSE_RBN100_H_

#include "flatbuffers/flatbuffers.h"

#include "public_generated.h"
#include "request_generated.h"

namespace RBN100 {

struct FResponseGetSenceList;
struct FResponseGetSenceListBuilder;

struct FResponseGetMapList;
struct FResponseGetMapListBuilder;

struct FResponseGetPathList;
struct FResponseGetPathListBuilder;

struct FResponseGetNodeList;
struct FResponseGetNodeListBuilder;

struct FResponseGetSysTime;
struct FResponseGetSysTimeBuilder;

struct Response;
struct ResponseBuilder;

enum FResponseDataField {
  FResponseDataField_NONE = 0,
  FResponseDataField_FRequestVideo = 1,
  FResponseDataField_FRequestScanQR = 2,
  FResponseDataField_FRequestCreateSence = 3,
  FResponseDataField_FRequestCreateMap_Tag = 4,
  FResponseDataField_FResponseGetSenceList = 5,
  FResponseDataField_FResponseGetPathList = 6,
  FResponseDataField_FResponseGetNodeList = 7,
  FResponseDataField_FResponseGetSysTime = 8,
  FResponseDataField_FResponseGetMapList = 9,
  FResponseDataField_MIN = FResponseDataField_NONE,
  FResponseDataField_MAX = FResponseDataField_FResponseGetMapList
};

inline const FResponseDataField (&EnumValuesFResponseDataField())[10] {
  static const FResponseDataField values[] = {
    FResponseDataField_NONE,
    FResponseDataField_FRequestVideo,
    FResponseDataField_FRequestScanQR,
    FResponseDataField_FRequestCreateSence,
    FResponseDataField_FRequestCreateMap_Tag,
    FResponseDataField_FResponseGetSenceList,
    FResponseDataField_FResponseGetPathList,
    FResponseDataField_FResponseGetNodeList,
    FResponseDataField_FResponseGetSysTime,
    FResponseDataField_FResponseGetMapList
  };
  return values;
}

inline const char * const *EnumNamesFResponseDataField() {
  static const char * const names[11] = {
    "NONE",
    "FRequestVideo",
    "FRequestScanQR",
    "FRequestCreateSence",
    "FRequestCreateMap_Tag",
    "FResponseGetSenceList",
    "FResponseGetPathList",
    "FResponseGetNodeList",
    "FResponseGetSysTime",
    "FResponseGetMapList",
    nullptr
  };
  return names;
}

inline const char *EnumNameFResponseDataField(FResponseDataField e) {
  if (flatbuffers::IsOutRange(e, FResponseDataField_NONE, FResponseDataField_FResponseGetMapList)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFResponseDataField()[index];
}

template<typename T> struct FResponseDataFieldTraits {
  static const FResponseDataField enum_value = FResponseDataField_NONE;
};

template<> struct FResponseDataFieldTraits<RBN100::FRequestVideo> {
  static const FResponseDataField enum_value = FResponseDataField_FRequestVideo;
};

template<> struct FResponseDataFieldTraits<RBN100::FRequestScanQR> {
  static const FResponseDataField enum_value = FResponseDataField_FRequestScanQR;
};

template<> struct FResponseDataFieldTraits<RBN100::FRequestCreateSence> {
  static const FResponseDataField enum_value = FResponseDataField_FRequestCreateSence;
};

template<> struct FResponseDataFieldTraits<RBN100::FRequestCreateMap_Tag> {
  static const FResponseDataField enum_value = FResponseDataField_FRequestCreateMap_Tag;
};

template<> struct FResponseDataFieldTraits<RBN100::FResponseGetSenceList> {
  static const FResponseDataField enum_value = FResponseDataField_FResponseGetSenceList;
};

template<> struct FResponseDataFieldTraits<RBN100::FResponseGetPathList> {
  static const FResponseDataField enum_value = FResponseDataField_FResponseGetPathList;
};

template<> struct FResponseDataFieldTraits<RBN100::FResponseGetNodeList> {
  static const FResponseDataField enum_value = FResponseDataField_FResponseGetNodeList;
};

template<> struct FResponseDataFieldTraits<RBN100::FResponseGetSysTime> {
  static const FResponseDataField enum_value = FResponseDataField_FResponseGetSysTime;
};

template<> struct FResponseDataFieldTraits<RBN100::FResponseGetMapList> {
  static const FResponseDataField enum_value = FResponseDataField_FResponseGetMapList;
};

bool VerifyFResponseDataField(flatbuffers::Verifier &verifier, const void *obj, FResponseDataField type);
bool VerifyFResponseDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum ResponseErrorCode {
  ResponseErrorCode_SUCCESS = 0,
  ResponseErrorCode_FAILED = 1,
  ResponseErrorCode_MIN = ResponseErrorCode_SUCCESS,
  ResponseErrorCode_MAX = ResponseErrorCode_FAILED
};

inline const ResponseErrorCode (&EnumValuesResponseErrorCode())[2] {
  static const ResponseErrorCode values[] = {
    ResponseErrorCode_SUCCESS,
    ResponseErrorCode_FAILED
  };
  return values;
}

inline const char * const *EnumNamesResponseErrorCode() {
  static const char * const names[3] = {
    "SUCCESS",
    "FAILED",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponseErrorCode(ResponseErrorCode e) {
  if (flatbuffers::IsOutRange(e, ResponseErrorCode_SUCCESS, ResponseErrorCode_FAILED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponseErrorCode()[index];
}

struct FResponseGetSenceList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FResponseGetSenceListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENCE_INFO = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FSenceInfo>> *sence_info() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FSenceInfo>> *>(VT_SENCE_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENCE_INFO) &&
           verifier.VerifyVector(sence_info()) &&
           verifier.VerifyVectorOfTables(sence_info()) &&
           verifier.EndTable();
  }
};

struct FResponseGetSenceListBuilder {
  typedef FResponseGetSenceList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sence_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FSenceInfo>>> sence_info) {
    fbb_.AddOffset(FResponseGetSenceList::VT_SENCE_INFO, sence_info);
  }
  explicit FResponseGetSenceListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FResponseGetSenceListBuilder &operator=(const FResponseGetSenceListBuilder &);
  flatbuffers::Offset<FResponseGetSenceList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FResponseGetSenceList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FResponseGetSenceList> CreateFResponseGetSenceList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FSenceInfo>>> sence_info = 0) {
  FResponseGetSenceListBuilder builder_(_fbb);
  builder_.add_sence_info(sence_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<FResponseGetSenceList> CreateFResponseGetSenceListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RBN100::FSenceInfo>> *sence_info = nullptr) {
  auto sence_info__ = sence_info ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FSenceInfo>>(*sence_info) : 0;
  return RBN100::CreateFResponseGetSenceList(
      _fbb,
      sence_info__);
}

struct FResponseGetMapList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FResponseGetMapListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FMapInfo>> *map() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FMapInfo>> *>(VT_MAP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAP) &&
           verifier.VerifyVector(map()) &&
           verifier.VerifyVectorOfTables(map()) &&
           verifier.EndTable();
  }
};

struct FResponseGetMapListBuilder {
  typedef FResponseGetMapList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FMapInfo>>> map) {
    fbb_.AddOffset(FResponseGetMapList::VT_MAP, map);
  }
  explicit FResponseGetMapListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FResponseGetMapListBuilder &operator=(const FResponseGetMapListBuilder &);
  flatbuffers::Offset<FResponseGetMapList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FResponseGetMapList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FResponseGetMapList> CreateFResponseGetMapList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FMapInfo>>> map = 0) {
  FResponseGetMapListBuilder builder_(_fbb);
  builder_.add_map(map);
  return builder_.Finish();
}

inline flatbuffers::Offset<FResponseGetMapList> CreateFResponseGetMapListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RBN100::FMapInfo>> *map = nullptr) {
  auto map__ = map ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FMapInfo>>(*map) : 0;
  return RBN100::CreateFResponseGetMapList(
      _fbb,
      map__);
}

struct FResponseGetPathList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FResponseGetPathListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPathInfo>> *path() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPathInfo>> *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyVector(path()) &&
           verifier.VerifyVectorOfTables(path()) &&
           verifier.EndTable();
  }
};

struct FResponseGetPathListBuilder {
  typedef FResponseGetPathList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPathInfo>>> path) {
    fbb_.AddOffset(FResponseGetPathList::VT_PATH, path);
  }
  explicit FResponseGetPathListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FResponseGetPathListBuilder &operator=(const FResponseGetPathListBuilder &);
  flatbuffers::Offset<FResponseGetPathList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FResponseGetPathList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FResponseGetPathList> CreateFResponseGetPathList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPathInfo>>> path = 0) {
  FResponseGetPathListBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<FResponseGetPathList> CreateFResponseGetPathListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RBN100::FPathInfo>> *path = nullptr) {
  auto path__ = path ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPathInfo>>(*path) : 0;
  return RBN100::CreateFResponseGetPathList(
      _fbb,
      path__);
}

struct FResponseGetNodeList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FResponseGetNodeListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JMRNODE = 4,
    VT_JMRACTION = 6,
    VT_STARTNODE = 8,
    VT_STARTACTION = 10,
    VT_POSENODE = 12,
    VT_STANDBYNODE = 14,
    VT_STANDBYATCION = 16,
    VT_ELEINNODE = 18,
    VT_ELEINACTION = 20,
    VT_ELEOUTNODE = 22,
    VT_ELEOUTACTION = 24,
    VT_ELETRANSFNODE = 26,
    VT_ELETRANSFACTION = 28,
    VT_PASSNODE = 30
  };
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FJMRNodeInfo>> *jmrnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FJMRNodeInfo>> *>(VT_JMRNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionJMR>> *jmraction() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionJMR>> *>(VT_JMRACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FStartNodeInfo>> *startnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FStartNodeInfo>> *>(VT_STARTNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStart>> *startaction() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStart>> *>(VT_STARTACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoseNodeInfo>> *posenode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoseNodeInfo>> *>(VT_POSENODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FStandByNodeInfo>> *standbynode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FStandByNodeInfo>> *>(VT_STANDBYNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStandBy>> *standbyatcion() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStandBy>> *>(VT_STANDBYATCION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *eleinnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *>(VT_ELEINNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorIn>> *eleinaction() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorIn>> *>(VT_ELEINACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *eleoutnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *>(VT_ELEOUTNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorOut>> *eleoutaction() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorOut>> *>(VT_ELEOUTACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>> *eletransfnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>> *>(VT_ELETRANSFNODE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorTransf>> *eletransfaction() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorTransf>> *>(VT_ELETRANSFACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPassNodeInfo>> *passnode() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FPassNodeInfo>> *>(VT_PASSNODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JMRNODE) &&
           verifier.VerifyVector(jmrnode()) &&
           verifier.VerifyVectorOfTables(jmrnode()) &&
           VerifyOffset(verifier, VT_JMRACTION) &&
           verifier.VerifyVector(jmraction()) &&
           verifier.VerifyVectorOfTables(jmraction()) &&
           VerifyOffset(verifier, VT_STARTNODE) &&
           verifier.VerifyVector(startnode()) &&
           verifier.VerifyVectorOfTables(startnode()) &&
           VerifyOffset(verifier, VT_STARTACTION) &&
           verifier.VerifyVector(startaction()) &&
           verifier.VerifyVectorOfTables(startaction()) &&
           VerifyOffset(verifier, VT_POSENODE) &&
           verifier.VerifyVector(posenode()) &&
           verifier.VerifyVectorOfTables(posenode()) &&
           VerifyOffset(verifier, VT_STANDBYNODE) &&
           verifier.VerifyVector(standbynode()) &&
           verifier.VerifyVectorOfTables(standbynode()) &&
           VerifyOffset(verifier, VT_STANDBYATCION) &&
           verifier.VerifyVector(standbyatcion()) &&
           verifier.VerifyVectorOfTables(standbyatcion()) &&
           VerifyOffset(verifier, VT_ELEINNODE) &&
           verifier.VerifyVector(eleinnode()) &&
           verifier.VerifyVectorOfTables(eleinnode()) &&
           VerifyOffset(verifier, VT_ELEINACTION) &&
           verifier.VerifyVector(eleinaction()) &&
           verifier.VerifyVectorOfTables(eleinaction()) &&
           VerifyOffset(verifier, VT_ELEOUTNODE) &&
           verifier.VerifyVector(eleoutnode()) &&
           verifier.VerifyVectorOfTables(eleoutnode()) &&
           VerifyOffset(verifier, VT_ELEOUTACTION) &&
           verifier.VerifyVector(eleoutaction()) &&
           verifier.VerifyVectorOfTables(eleoutaction()) &&
           VerifyOffset(verifier, VT_ELETRANSFNODE) &&
           verifier.VerifyVector(eletransfnode()) &&
           verifier.VerifyVectorOfTables(eletransfnode()) &&
           VerifyOffset(verifier, VT_ELETRANSFACTION) &&
           verifier.VerifyVector(eletransfaction()) &&
           verifier.VerifyVectorOfTables(eletransfaction()) &&
           VerifyOffset(verifier, VT_PASSNODE) &&
           verifier.VerifyVector(passnode()) &&
           verifier.VerifyVectorOfTables(passnode()) &&
           verifier.EndTable();
  }
};

struct FResponseGetNodeListBuilder {
  typedef FResponseGetNodeList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_jmrnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FJMRNodeInfo>>> jmrnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_JMRNODE, jmrnode);
  }
  void add_jmraction(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionJMR>>> jmraction) {
    fbb_.AddOffset(FResponseGetNodeList::VT_JMRACTION, jmraction);
  }
  void add_startnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FStartNodeInfo>>> startnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_STARTNODE, startnode);
  }
  void add_startaction(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStart>>> startaction) {
    fbb_.AddOffset(FResponseGetNodeList::VT_STARTACTION, startaction);
  }
  void add_posenode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoseNodeInfo>>> posenode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_POSENODE, posenode);
  }
  void add_standbynode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FStandByNodeInfo>>> standbynode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_STANDBYNODE, standbynode);
  }
  void add_standbyatcion(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStandBy>>> standbyatcion) {
    fbb_.AddOffset(FResponseGetNodeList::VT_STANDBYATCION, standbyatcion);
  }
  void add_eleinnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>> eleinnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELEINNODE, eleinnode);
  }
  void add_eleinaction(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorIn>>> eleinaction) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELEINACTION, eleinaction);
  }
  void add_eleoutnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>> eleoutnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELEOUTNODE, eleoutnode);
  }
  void add_eleoutaction(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorOut>>> eleoutaction) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELEOUTACTION, eleoutaction);
  }
  void add_eletransfnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>>> eletransfnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELETRANSFNODE, eletransfnode);
  }
  void add_eletransfaction(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorTransf>>> eletransfaction) {
    fbb_.AddOffset(FResponseGetNodeList::VT_ELETRANSFACTION, eletransfaction);
  }
  void add_passnode(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPassNodeInfo>>> passnode) {
    fbb_.AddOffset(FResponseGetNodeList::VT_PASSNODE, passnode);
  }
  explicit FResponseGetNodeListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FResponseGetNodeListBuilder &operator=(const FResponseGetNodeListBuilder &);
  flatbuffers::Offset<FResponseGetNodeList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FResponseGetNodeList>(end);
    return o;
  }
};

inline flatbuffers::Offset<FResponseGetNodeList> CreateFResponseGetNodeList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FJMRNodeInfo>>> jmrnode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionJMR>>> jmraction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FStartNodeInfo>>> startnode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStart>>> startaction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPoseNodeInfo>>> posenode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FStandByNodeInfo>>> standbynode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionStandBy>>> standbyatcion = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>> eleinnode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorIn>>> eleinaction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>> eleoutnode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorOut>>> eleoutaction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>>> eletransfnode = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FActionElevatorTransf>>> eletransfaction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FPassNodeInfo>>> passnode = 0) {
  FResponseGetNodeListBuilder builder_(_fbb);
  builder_.add_passnode(passnode);
  builder_.add_eletransfaction(eletransfaction);
  builder_.add_eletransfnode(eletransfnode);
  builder_.add_eleoutaction(eleoutaction);
  builder_.add_eleoutnode(eleoutnode);
  builder_.add_eleinaction(eleinaction);
  builder_.add_eleinnode(eleinnode);
  builder_.add_standbyatcion(standbyatcion);
  builder_.add_standbynode(standbynode);
  builder_.add_posenode(posenode);
  builder_.add_startaction(startaction);
  builder_.add_startnode(startnode);
  builder_.add_jmraction(jmraction);
  builder_.add_jmrnode(jmrnode);
  return builder_.Finish();
}

inline flatbuffers::Offset<FResponseGetNodeList> CreateFResponseGetNodeListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RBN100::FJMRNodeInfo>> *jmrnode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionJMR>> *jmraction = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FStartNodeInfo>> *startnode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionStart>> *startaction = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FPoseNodeInfo>> *posenode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FStandByNodeInfo>> *standbynode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionStandBy>> *standbyatcion = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *eleinnode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionElevatorIn>> *eleinaction = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>> *eleoutnode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionElevatorOut>> *eleoutaction = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>> *eletransfnode = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FActionElevatorTransf>> *eletransfaction = nullptr,
    const std::vector<flatbuffers::Offset<RBN100::FPassNodeInfo>> *passnode = nullptr) {
  auto jmrnode__ = jmrnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FJMRNodeInfo>>(*jmrnode) : 0;
  auto jmraction__ = jmraction ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionJMR>>(*jmraction) : 0;
  auto startnode__ = startnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FStartNodeInfo>>(*startnode) : 0;
  auto startaction__ = startaction ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionStart>>(*startaction) : 0;
  auto posenode__ = posenode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPoseNodeInfo>>(*posenode) : 0;
  auto standbynode__ = standbynode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FStandByNodeInfo>>(*standbynode) : 0;
  auto standbyatcion__ = standbyatcion ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionStandBy>>(*standbyatcion) : 0;
  auto eleinnode__ = eleinnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>(*eleinnode) : 0;
  auto eleinaction__ = eleinaction ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionElevatorIn>>(*eleinaction) : 0;
  auto eleoutnode__ = eleoutnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FElevatorOutNodeInfo>>(*eleoutnode) : 0;
  auto eleoutaction__ = eleoutaction ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionElevatorOut>>(*eleoutaction) : 0;
  auto eletransfnode__ = eletransfnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FElevatorTransformNodeInfo>>(*eletransfnode) : 0;
  auto eletransfaction__ = eletransfaction ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FActionElevatorTransf>>(*eletransfaction) : 0;
  auto passnode__ = passnode ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FPassNodeInfo>>(*passnode) : 0;
  return RBN100::CreateFResponseGetNodeList(
      _fbb,
      jmrnode__,
      jmraction__,
      startnode__,
      startaction__,
      posenode__,
      standbynode__,
      standbyatcion__,
      eleinnode__,
      eleinaction__,
      eleoutnode__,
      eleoutaction__,
      eletransfnode__,
      eletransfaction__,
      passnode__);
}

struct FResponseGetSysTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FResponseGetSysTimeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct FResponseGetSysTimeBuilder {
  typedef FResponseGetSysTime Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(FResponseGetSysTime::VT_TIME, time, 0);
  }
  explicit FResponseGetSysTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FResponseGetSysTimeBuilder &operator=(const FResponseGetSysTimeBuilder &);
  flatbuffers::Offset<FResponseGetSysTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FResponseGetSysTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<FResponseGetSysTime> CreateFResponseGetSysTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0) {
  FResponseGetSysTimeBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_TYPE = 6,
    VT_MESSAGE_TYPE = 8,
    VT_MESSAGE = 10
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  RBN100::FRequestType type() const {
    return static_cast<RBN100::FRequestType>(GetField<int8_t>(VT_TYPE, 0));
  }
  RBN100::FResponseDataField message_type() const {
    return static_cast<RBN100::FResponseDataField>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const RBN100::FRequestVideo *message_as_FRequestVideo() const {
    return message_type() == RBN100::FResponseDataField_FRequestVideo ? static_cast<const RBN100::FRequestVideo *>(message()) : nullptr;
  }
  const RBN100::FRequestScanQR *message_as_FRequestScanQR() const {
    return message_type() == RBN100::FResponseDataField_FRequestScanQR ? static_cast<const RBN100::FRequestScanQR *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateSence *message_as_FRequestCreateSence() const {
    return message_type() == RBN100::FResponseDataField_FRequestCreateSence ? static_cast<const RBN100::FRequestCreateSence *>(message()) : nullptr;
  }
  const RBN100::FRequestCreateMap_Tag *message_as_FRequestCreateMap_Tag() const {
    return message_type() == RBN100::FResponseDataField_FRequestCreateMap_Tag ? static_cast<const RBN100::FRequestCreateMap_Tag *>(message()) : nullptr;
  }
  const RBN100::FResponseGetSenceList *message_as_FResponseGetSenceList() const {
    return message_type() == RBN100::FResponseDataField_FResponseGetSenceList ? static_cast<const RBN100::FResponseGetSenceList *>(message()) : nullptr;
  }
  const RBN100::FResponseGetPathList *message_as_FResponseGetPathList() const {
    return message_type() == RBN100::FResponseDataField_FResponseGetPathList ? static_cast<const RBN100::FResponseGetPathList *>(message()) : nullptr;
  }
  const RBN100::FResponseGetNodeList *message_as_FResponseGetNodeList() const {
    return message_type() == RBN100::FResponseDataField_FResponseGetNodeList ? static_cast<const RBN100::FResponseGetNodeList *>(message()) : nullptr;
  }
  const RBN100::FResponseGetSysTime *message_as_FResponseGetSysTime() const {
    return message_type() == RBN100::FResponseDataField_FResponseGetSysTime ? static_cast<const RBN100::FResponseGetSysTime *>(message()) : nullptr;
  }
  const RBN100::FResponseGetMapList *message_as_FResponseGetMapList() const {
    return message_type() == RBN100::FResponseDataField_FResponseGetMapList ? static_cast<const RBN100::FResponseGetMapList *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyFResponseDataField(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RBN100::FRequestVideo *Response::message_as<RBN100::FRequestVideo>() const {
  return message_as_FRequestVideo();
}

template<> inline const RBN100::FRequestScanQR *Response::message_as<RBN100::FRequestScanQR>() const {
  return message_as_FRequestScanQR();
}

template<> inline const RBN100::FRequestCreateSence *Response::message_as<RBN100::FRequestCreateSence>() const {
  return message_as_FRequestCreateSence();
}

template<> inline const RBN100::FRequestCreateMap_Tag *Response::message_as<RBN100::FRequestCreateMap_Tag>() const {
  return message_as_FRequestCreateMap_Tag();
}

template<> inline const RBN100::FResponseGetSenceList *Response::message_as<RBN100::FResponseGetSenceList>() const {
  return message_as_FResponseGetSenceList();
}

template<> inline const RBN100::FResponseGetPathList *Response::message_as<RBN100::FResponseGetPathList>() const {
  return message_as_FResponseGetPathList();
}

template<> inline const RBN100::FResponseGetNodeList *Response::message_as<RBN100::FResponseGetNodeList>() const {
  return message_as_FResponseGetNodeList();
}

template<> inline const RBN100::FResponseGetSysTime *Response::message_as<RBN100::FResponseGetSysTime>() const {
  return message_as_FResponseGetSysTime();
}

template<> inline const RBN100::FResponseGetMapList *Response::message_as<RBN100::FResponseGetMapList>() const {
  return message_as_FResponseGetMapList();
}

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(Response::VT_STATUS, status, 0);
  }
  void add_type(RBN100::FRequestType type) {
    fbb_.AddElement<int8_t>(Response::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_message_type(RBN100::FResponseDataField message_type) {
    fbb_.AddElement<uint8_t>(Response::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Response::VT_MESSAGE, message);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    RBN100::FRequestType type = RBN100::FRequestType_Video,
    RBN100::FResponseDataField message_type = RBN100::FResponseDataField_NONE,
    flatbuffers::Offset<void> message = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_status(status);
  builder_.add_message_type(message_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyFResponseDataField(flatbuffers::Verifier &verifier, const void *obj, FResponseDataField type) {
  switch (type) {
    case FResponseDataField_NONE: {
      return true;
    }
    case FResponseDataField_FRequestVideo: {
      auto ptr = reinterpret_cast<const RBN100::FRequestVideo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FRequestScanQR: {
      auto ptr = reinterpret_cast<const RBN100::FRequestScanQR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FRequestCreateSence: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateSence *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FRequestCreateMap_Tag: {
      auto ptr = reinterpret_cast<const RBN100::FRequestCreateMap_Tag *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FResponseGetSenceList: {
      auto ptr = reinterpret_cast<const RBN100::FResponseGetSenceList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FResponseGetPathList: {
      auto ptr = reinterpret_cast<const RBN100::FResponseGetPathList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FResponseGetNodeList: {
      auto ptr = reinterpret_cast<const RBN100::FResponseGetNodeList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FResponseGetSysTime: {
      auto ptr = reinterpret_cast<const RBN100::FResponseGetSysTime *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FResponseDataField_FResponseGetMapList: {
      auto ptr = reinterpret_cast<const RBN100::FResponseGetMapList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFResponseDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFResponseDataField(
        verifier,  values->Get(i), types->GetEnum<FResponseDataField>(i))) {
      return false;
    }
  }
  return true;
}

inline const RBN100::Response *GetResponse(const void *buf) {
  return flatbuffers::GetRoot<RBN100::Response>(buf);
}

inline const RBN100::Response *GetSizePrefixedResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<RBN100::Response>(buf);
}

inline bool VerifyResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RBN100::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RBN100::Response>(nullptr);
}

inline void FinishResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Response> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RBN100

#endif  // FLATBUFFERS_GENERATED_RESPONSE_RBN100_H_
