// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REPORT_RBN100_H_
#define FLATBUFFERS_GENERATED_REPORT_RBN100_H_

#include "flatbuffers/flatbuffers.h"

#include "public_generated.h"

namespace RBN100 {

struct FReportImage;
struct FReportImageBuilder;

struct FReportScanQR;
struct FReportScanQRBuilder;

struct FGrid;
struct FGridBuilder;

struct FReprotGridMap;
struct FReprotGridMapBuilder;

struct FReportNeedCreateMap;
struct FReportNeedCreateMapBuilder;

struct FReportTaskStatus;
struct FReportTaskStatusBuilder;

struct FReportFault;
struct FReportFaultBuilder;

struct FReprotSelfTestPro;
struct FReprotSelfTestProBuilder;

struct FReprotGetWifi;
struct FReprotGetWifiBuilder;

struct FReprotGetBattery;
struct FReprotGetBatteryBuilder;

struct FReportElevatorCtrl;
struct FReportElevatorCtrlBuilder;

struct Report;
struct ReportBuilder;

enum FReportType {
  FReportType_ReprotVideo = 0,
  FReportType_ReprotScanQR = 1,
  FReportType_ReprotGridMap = 2,
  FReportType_ReprotTaskStatus = 3,
  FReportType_ReprotFault = 4,
  FReportType_ReprotSelfTestPro = 5,
  FReportType_ReprotGetWifi = 6,
  FReportType_ReprotGetBattery = 7,
  FReportType_ReportElevatorCtrl = 8,
  FReportType_MIN = FReportType_ReprotVideo,
  FReportType_MAX = FReportType_ReportElevatorCtrl
};

inline const FReportType (&EnumValuesFReportType())[9] {
  static const FReportType values[] = {
    FReportType_ReprotVideo,
    FReportType_ReprotScanQR,
    FReportType_ReprotGridMap,
    FReportType_ReprotTaskStatus,
    FReportType_ReprotFault,
    FReportType_ReprotSelfTestPro,
    FReportType_ReprotGetWifi,
    FReportType_ReprotGetBattery,
    FReportType_ReportElevatorCtrl
  };
  return values;
}

inline const char * const *EnumNamesFReportType() {
  static const char * const names[10] = {
    "ReprotVideo",
    "ReprotScanQR",
    "ReprotGridMap",
    "ReprotTaskStatus",
    "ReprotFault",
    "ReprotSelfTestPro",
    "ReprotGetWifi",
    "ReprotGetBattery",
    "ReportElevatorCtrl",
    nullptr
  };
  return names;
}

inline const char *EnumNameFReportType(FReportType e) {
  if (flatbuffers::IsOutRange(e, FReportType_ReprotVideo, FReportType_ReportElevatorCtrl)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFReportType()[index];
}

enum FReportDataField {
  FReportDataField_NONE = 0,
  FReportDataField_FReportScanQR = 1,
  FReportDataField_FReportImage = 2,
  FReportDataField_FReportNeedCreateMap = 3,
  FReportDataField_FReprotGridMap = 4,
  FReportDataField_FReportTaskStatus = 5,
  FReportDataField_FReportFault = 6,
  FReportDataField_FReprotSelfTestPro = 7,
  FReportDataField_FReprotGetWifi = 8,
  FReportDataField_FReprotGetBattery = 9,
  FReportDataField_FReportElevatorCtrl = 10,
  FReportDataField_MIN = FReportDataField_NONE,
  FReportDataField_MAX = FReportDataField_FReportElevatorCtrl
};

inline const FReportDataField (&EnumValuesFReportDataField())[11] {
  static const FReportDataField values[] = {
    FReportDataField_NONE,
    FReportDataField_FReportScanQR,
    FReportDataField_FReportImage,
    FReportDataField_FReportNeedCreateMap,
    FReportDataField_FReprotGridMap,
    FReportDataField_FReportTaskStatus,
    FReportDataField_FReportFault,
    FReportDataField_FReprotSelfTestPro,
    FReportDataField_FReprotGetWifi,
    FReportDataField_FReprotGetBattery,
    FReportDataField_FReportElevatorCtrl
  };
  return values;
}

inline const char * const *EnumNamesFReportDataField() {
  static const char * const names[12] = {
    "NONE",
    "FReportScanQR",
    "FReportImage",
    "FReportNeedCreateMap",
    "FReprotGridMap",
    "FReportTaskStatus",
    "FReportFault",
    "FReprotSelfTestPro",
    "FReprotGetWifi",
    "FReprotGetBattery",
    "FReportElevatorCtrl",
    nullptr
  };
  return names;
}

inline const char *EnumNameFReportDataField(FReportDataField e) {
  if (flatbuffers::IsOutRange(e, FReportDataField_NONE, FReportDataField_FReportElevatorCtrl)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFReportDataField()[index];
}

template<typename T> struct FReportDataFieldTraits {
  static const FReportDataField enum_value = FReportDataField_NONE;
};

template<> struct FReportDataFieldTraits<RBN100::FReportScanQR> {
  static const FReportDataField enum_value = FReportDataField_FReportScanQR;
};

template<> struct FReportDataFieldTraits<RBN100::FReportImage> {
  static const FReportDataField enum_value = FReportDataField_FReportImage;
};

template<> struct FReportDataFieldTraits<RBN100::FReportNeedCreateMap> {
  static const FReportDataField enum_value = FReportDataField_FReportNeedCreateMap;
};

template<> struct FReportDataFieldTraits<RBN100::FReprotGridMap> {
  static const FReportDataField enum_value = FReportDataField_FReprotGridMap;
};

template<> struct FReportDataFieldTraits<RBN100::FReportTaskStatus> {
  static const FReportDataField enum_value = FReportDataField_FReportTaskStatus;
};

template<> struct FReportDataFieldTraits<RBN100::FReportFault> {
  static const FReportDataField enum_value = FReportDataField_FReportFault;
};

template<> struct FReportDataFieldTraits<RBN100::FReprotSelfTestPro> {
  static const FReportDataField enum_value = FReportDataField_FReprotSelfTestPro;
};

template<> struct FReportDataFieldTraits<RBN100::FReprotGetWifi> {
  static const FReportDataField enum_value = FReportDataField_FReprotGetWifi;
};

template<> struct FReportDataFieldTraits<RBN100::FReprotGetBattery> {
  static const FReportDataField enum_value = FReportDataField_FReprotGetBattery;
};

template<> struct FReportDataFieldTraits<RBN100::FReportElevatorCtrl> {
  static const FReportDataField enum_value = FReportDataField_FReportElevatorCtrl;
};

bool VerifyFReportDataField(flatbuffers::Verifier &verifier, const void *obj, FReportDataField type);
bool VerifyFReportDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct FReportImage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_IMAGE = 6
  };
  double time() const {
    return GetField<double>(VT_TIME, 0.0);
  }
  const flatbuffers::Vector<uint8_t> *image() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_IMAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_IMAGE) &&
           verifier.VerifyVector(image()) &&
           verifier.EndTable();
  }
};

struct FReportImageBuilder {
  typedef FReportImage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(double time) {
    fbb_.AddElement<double>(FReportImage::VT_TIME, time, 0.0);
  }
  void add_image(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image) {
    fbb_.AddOffset(FReportImage::VT_IMAGE, image);
  }
  explicit FReportImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportImageBuilder &operator=(const FReportImageBuilder &);
  flatbuffers::Offset<FReportImage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportImage>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportImage> CreateFReportImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    double time = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> image = 0) {
  FReportImageBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_image(image);
  return builder_.Finish();
}

inline flatbuffers::Offset<FReportImage> CreateFReportImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    double time = 0.0,
    const std::vector<uint8_t> *image = nullptr) {
  auto image__ = image ? _fbb.CreateVector<uint8_t>(*image) : 0;
  return RBN100::CreateFReportImage(
      _fbb,
      time,
      image__);
}

struct FReportScanQR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportScanQRBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_TAGID = 6,
    VT_TAGIDEXIST = 8,
    VT_LB = 10,
    VT_RB = 12,
    VT_RT = 14,
    VT_LT = 16,
    VT_CT = 18,
    VT_X = 20,
    VT_Y = 22,
    VT_Z = 24,
    VT_MAP_UUID = 26
  };
  int32_t state() const {
    return GetField<int32_t>(VT_STATE, 0);
  }
  int32_t tagID() const {
    return GetField<int32_t>(VT_TAGID, 0);
  }
  bool tagIDExist() const {
    return GetField<uint8_t>(VT_TAGIDEXIST, 0) != 0;
  }
  const RBN100::FPoint *lb() const {
    return GetPointer<const RBN100::FPoint *>(VT_LB);
  }
  const RBN100::FPoint *rb() const {
    return GetPointer<const RBN100::FPoint *>(VT_RB);
  }
  const RBN100::FPoint *rt() const {
    return GetPointer<const RBN100::FPoint *>(VT_RT);
  }
  const RBN100::FPoint *lt() const {
    return GetPointer<const RBN100::FPoint *>(VT_LT);
  }
  const RBN100::FPoint *ct() const {
    return GetPointer<const RBN100::FPoint *>(VT_CT);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  const flatbuffers::String *map_uuid() const {
    return GetPointer<const flatbuffers::String *>(VT_MAP_UUID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATE) &&
           VerifyField<int32_t>(verifier, VT_TAGID) &&
           VerifyField<uint8_t>(verifier, VT_TAGIDEXIST) &&
           VerifyOffset(verifier, VT_LB) &&
           verifier.VerifyTable(lb()) &&
           VerifyOffset(verifier, VT_RB) &&
           verifier.VerifyTable(rb()) &&
           VerifyOffset(verifier, VT_RT) &&
           verifier.VerifyTable(rt()) &&
           VerifyOffset(verifier, VT_LT) &&
           verifier.VerifyTable(lt()) &&
           VerifyOffset(verifier, VT_CT) &&
           verifier.VerifyTable(ct()) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_Z) &&
           VerifyOffset(verifier, VT_MAP_UUID) &&
           verifier.VerifyString(map_uuid()) &&
           verifier.EndTable();
  }
};

struct FReportScanQRBuilder {
  typedef FReportScanQR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(int32_t state) {
    fbb_.AddElement<int32_t>(FReportScanQR::VT_STATE, state, 0);
  }
  void add_tagID(int32_t tagID) {
    fbb_.AddElement<int32_t>(FReportScanQR::VT_TAGID, tagID, 0);
  }
  void add_tagIDExist(bool tagIDExist) {
    fbb_.AddElement<uint8_t>(FReportScanQR::VT_TAGIDEXIST, static_cast<uint8_t>(tagIDExist), 0);
  }
  void add_lb(flatbuffers::Offset<RBN100::FPoint> lb) {
    fbb_.AddOffset(FReportScanQR::VT_LB, lb);
  }
  void add_rb(flatbuffers::Offset<RBN100::FPoint> rb) {
    fbb_.AddOffset(FReportScanQR::VT_RB, rb);
  }
  void add_rt(flatbuffers::Offset<RBN100::FPoint> rt) {
    fbb_.AddOffset(FReportScanQR::VT_RT, rt);
  }
  void add_lt(flatbuffers::Offset<RBN100::FPoint> lt) {
    fbb_.AddOffset(FReportScanQR::VT_LT, lt);
  }
  void add_ct(flatbuffers::Offset<RBN100::FPoint> ct) {
    fbb_.AddOffset(FReportScanQR::VT_CT, ct);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(FReportScanQR::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(FReportScanQR::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(FReportScanQR::VT_Z, z, 0.0f);
  }
  void add_map_uuid(flatbuffers::Offset<flatbuffers::String> map_uuid) {
    fbb_.AddOffset(FReportScanQR::VT_MAP_UUID, map_uuid);
  }
  explicit FReportScanQRBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportScanQRBuilder &operator=(const FReportScanQRBuilder &);
  flatbuffers::Offset<FReportScanQR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportScanQR>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportScanQR> CreateFReportScanQR(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t state = 0,
    int32_t tagID = 0,
    bool tagIDExist = false,
    flatbuffers::Offset<RBN100::FPoint> lb = 0,
    flatbuffers::Offset<RBN100::FPoint> rb = 0,
    flatbuffers::Offset<RBN100::FPoint> rt = 0,
    flatbuffers::Offset<RBN100::FPoint> lt = 0,
    flatbuffers::Offset<RBN100::FPoint> ct = 0,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    flatbuffers::Offset<flatbuffers::String> map_uuid = 0) {
  FReportScanQRBuilder builder_(_fbb);
  builder_.add_map_uuid(map_uuid);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_ct(ct);
  builder_.add_lt(lt);
  builder_.add_rt(rt);
  builder_.add_rb(rb);
  builder_.add_lb(lb);
  builder_.add_tagID(tagID);
  builder_.add_state(state);
  builder_.add_tagIDExist(tagIDExist);
  return builder_.Finish();
}

inline flatbuffers::Offset<FReportScanQR> CreateFReportScanQRDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t state = 0,
    int32_t tagID = 0,
    bool tagIDExist = false,
    flatbuffers::Offset<RBN100::FPoint> lb = 0,
    flatbuffers::Offset<RBN100::FPoint> rb = 0,
    flatbuffers::Offset<RBN100::FPoint> rt = 0,
    flatbuffers::Offset<RBN100::FPoint> lt = 0,
    flatbuffers::Offset<RBN100::FPoint> ct = 0,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    const char *map_uuid = nullptr) {
  auto map_uuid__ = map_uuid ? _fbb.CreateString(map_uuid) : 0;
  return RBN100::CreateFReportScanQR(
      _fbb,
      state,
      tagID,
      tagIDExist,
      lb,
      rb,
      rt,
      lt,
      ct,
      x,
      y,
      z,
      map_uuid__);
}

struct FGrid FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FGridBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_VALUE = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FGridBuilder {
  typedef FGrid Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(FGrid::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(FGrid::VT_Y, y, 0);
  }
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(FGrid::VT_VALUE, value, 0);
  }
  explicit FGridBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FGridBuilder &operator=(const FGridBuilder &);
  flatbuffers::Offset<FGrid> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FGrid>(end);
    return o;
  }
};

inline flatbuffers::Offset<FGrid> CreateFGrid(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int8_t value = 0) {
  FGridBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FReprotGridMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReprotGridMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAP = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>> *map() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>> *>(VT_MAP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAP) &&
           verifier.VerifyVector(map()) &&
           verifier.VerifyVectorOfTables(map()) &&
           verifier.EndTable();
  }
};

struct FReprotGridMapBuilder {
  typedef FReprotGridMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>>> map) {
    fbb_.AddOffset(FReprotGridMap::VT_MAP, map);
  }
  explicit FReprotGridMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReprotGridMapBuilder &operator=(const FReprotGridMapBuilder &);
  flatbuffers::Offset<FReprotGridMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReprotGridMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReprotGridMap> CreateFReprotGridMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RBN100::FGrid>>> map = 0) {
  FReprotGridMapBuilder builder_(_fbb);
  builder_.add_map(map);
  return builder_.Finish();
}

inline flatbuffers::Offset<FReprotGridMap> CreateFReprotGridMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<RBN100::FGrid>> *map = nullptr) {
  auto map__ = map ? _fbb.CreateVector<flatbuffers::Offset<RBN100::FGrid>>(*map) : 0;
  return RBN100::CreateFReprotGridMap(
      _fbb,
      map__);
}

struct FReportNeedCreateMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportNeedCreateMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  bool state() const {
    return GetField<uint8_t>(VT_STATE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct FReportNeedCreateMapBuilder {
  typedef FReportNeedCreateMap Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(bool state) {
    fbb_.AddElement<uint8_t>(FReportNeedCreateMap::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit FReportNeedCreateMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportNeedCreateMapBuilder &operator=(const FReportNeedCreateMapBuilder &);
  flatbuffers::Offset<FReportNeedCreateMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportNeedCreateMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportNeedCreateMap> CreateFReportNeedCreateMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool state = false) {
  FReportNeedCreateMapBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

struct FReportTaskStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportTaskStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FReportTaskStatusBuilder {
  typedef FReportTaskStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(FReportTaskStatus::VT_VALUE, value, 0);
  }
  explicit FReportTaskStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportTaskStatusBuilder &operator=(const FReportTaskStatusBuilder &);
  flatbuffers::Offset<FReportTaskStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportTaskStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportTaskStatus> CreateFReportTaskStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  FReportTaskStatusBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FReportFault FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportFaultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           verifier.EndTable();
  }
};

struct FReportFaultBuilder {
  typedef FReportFault Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(FReportFault::VT_CODE, code, 0);
  }
  explicit FReportFaultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportFaultBuilder &operator=(const FReportFaultBuilder &);
  flatbuffers::Offset<FReportFault> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportFault>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportFault> CreateFReportFault(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0) {
  FReportFaultBuilder builder_(_fbb);
  builder_.add_code(code);
  return builder_.Finish();
}

struct FReprotSelfTestPro FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReprotSelfTestProBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FReprotSelfTestProBuilder {
  typedef FReprotSelfTestPro Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(FReprotSelfTestPro::VT_VALUE, value, 0);
  }
  explicit FReprotSelfTestProBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReprotSelfTestProBuilder &operator=(const FReprotSelfTestProBuilder &);
  flatbuffers::Offset<FReprotSelfTestPro> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReprotSelfTestPro>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReprotSelfTestPro> CreateFReprotSelfTestPro(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0) {
  FReprotSelfTestProBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FReprotGetWifi FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReprotGetWifiBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_VALUE = 6
  };
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FReprotGetWifiBuilder {
  typedef FReprotGetWifi Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(FReprotGetWifi::VT_STATUS, status, 0);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(FReprotGetWifi::VT_VALUE, value, 0);
  }
  explicit FReprotGetWifiBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReprotGetWifiBuilder &operator=(const FReprotGetWifiBuilder &);
  flatbuffers::Offset<FReprotGetWifi> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReprotGetWifi>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReprotGetWifi> CreateFReprotGetWifi(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t status = 0,
    int32_t value = 0) {
  FReprotGetWifiBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_status(status);
  return builder_.Finish();
}

struct FReprotGetBattery FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReprotGetBatteryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct FReprotGetBatteryBuilder {
  typedef FReprotGetBattery Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(FReprotGetBattery::VT_VALUE, value, 0.0f);
  }
  explicit FReprotGetBatteryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReprotGetBatteryBuilder &operator=(const FReprotGetBatteryBuilder &);
  flatbuffers::Offset<FReprotGetBattery> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReprotGetBattery>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReprotGetBattery> CreateFReprotGetBattery(
    flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FReprotGetBatteryBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FReportElevatorCtrl FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FReportElevatorCtrlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_MODE = 8,
    VT_FLOOR = 10,
    VT_DIRECTION = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  int32_t floor() const {
    return GetField<int32_t>(VT_FLOOR, 0);
  }
  int32_t direction() const {
    return GetField<int32_t>(VT_DIRECTION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_MODE) &&
           VerifyField<int32_t>(verifier, VT_FLOOR) &&
           VerifyField<int32_t>(verifier, VT_DIRECTION) &&
           verifier.EndTable();
  }
};

struct FReportElevatorCtrlBuilder {
  typedef FReportElevatorCtrl Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(FReportElevatorCtrl::VT_ID, id);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(FReportElevatorCtrl::VT_TYPE, type, 0);
  }
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(FReportElevatorCtrl::VT_MODE, mode, 0);
  }
  void add_floor(int32_t floor) {
    fbb_.AddElement<int32_t>(FReportElevatorCtrl::VT_FLOOR, floor, 0);
  }
  void add_direction(int32_t direction) {
    fbb_.AddElement<int32_t>(FReportElevatorCtrl::VT_DIRECTION, direction, 0);
  }
  explicit FReportElevatorCtrlBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FReportElevatorCtrlBuilder &operator=(const FReportElevatorCtrlBuilder &);
  flatbuffers::Offset<FReportElevatorCtrl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FReportElevatorCtrl>(end);
    return o;
  }
};

inline flatbuffers::Offset<FReportElevatorCtrl> CreateFReportElevatorCtrl(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    int32_t type = 0,
    int32_t mode = 0,
    int32_t floor = 0,
    int32_t direction = 0) {
  FReportElevatorCtrlBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_floor(floor);
  builder_.add_mode(mode);
  builder_.add_type(type);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<FReportElevatorCtrl> CreateFReportElevatorCtrlDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    int32_t type = 0,
    int32_t mode = 0,
    int32_t floor = 0,
    int32_t direction = 0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return RBN100::CreateFReportElevatorCtrl(
      _fbb,
      id__,
      type,
      mode,
      floor,
      direction);
}

struct Report FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReportBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  RBN100::FReportType type() const {
    return static_cast<RBN100::FReportType>(GetField<int8_t>(VT_TYPE, 0));
  }
  RBN100::FReportDataField data_type() const {
    return static_cast<RBN100::FReportDataField>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const RBN100::FReportScanQR *data_as_FReportScanQR() const {
    return data_type() == RBN100::FReportDataField_FReportScanQR ? static_cast<const RBN100::FReportScanQR *>(data()) : nullptr;
  }
  const RBN100::FReportImage *data_as_FReportImage() const {
    return data_type() == RBN100::FReportDataField_FReportImage ? static_cast<const RBN100::FReportImage *>(data()) : nullptr;
  }
  const RBN100::FReportNeedCreateMap *data_as_FReportNeedCreateMap() const {
    return data_type() == RBN100::FReportDataField_FReportNeedCreateMap ? static_cast<const RBN100::FReportNeedCreateMap *>(data()) : nullptr;
  }
  const RBN100::FReprotGridMap *data_as_FReprotGridMap() const {
    return data_type() == RBN100::FReportDataField_FReprotGridMap ? static_cast<const RBN100::FReprotGridMap *>(data()) : nullptr;
  }
  const RBN100::FReportTaskStatus *data_as_FReportTaskStatus() const {
    return data_type() == RBN100::FReportDataField_FReportTaskStatus ? static_cast<const RBN100::FReportTaskStatus *>(data()) : nullptr;
  }
  const RBN100::FReportFault *data_as_FReportFault() const {
    return data_type() == RBN100::FReportDataField_FReportFault ? static_cast<const RBN100::FReportFault *>(data()) : nullptr;
  }
  const RBN100::FReprotSelfTestPro *data_as_FReprotSelfTestPro() const {
    return data_type() == RBN100::FReportDataField_FReprotSelfTestPro ? static_cast<const RBN100::FReprotSelfTestPro *>(data()) : nullptr;
  }
  const RBN100::FReprotGetWifi *data_as_FReprotGetWifi() const {
    return data_type() == RBN100::FReportDataField_FReprotGetWifi ? static_cast<const RBN100::FReprotGetWifi *>(data()) : nullptr;
  }
  const RBN100::FReprotGetBattery *data_as_FReprotGetBattery() const {
    return data_type() == RBN100::FReportDataField_FReprotGetBattery ? static_cast<const RBN100::FReprotGetBattery *>(data()) : nullptr;
  }
  const RBN100::FReportElevatorCtrl *data_as_FReportElevatorCtrl() const {
    return data_type() == RBN100::FReportDataField_FReportElevatorCtrl ? static_cast<const RBN100::FReportElevatorCtrl *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyFReportDataField(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RBN100::FReportScanQR *Report::data_as<RBN100::FReportScanQR>() const {
  return data_as_FReportScanQR();
}

template<> inline const RBN100::FReportImage *Report::data_as<RBN100::FReportImage>() const {
  return data_as_FReportImage();
}

template<> inline const RBN100::FReportNeedCreateMap *Report::data_as<RBN100::FReportNeedCreateMap>() const {
  return data_as_FReportNeedCreateMap();
}

template<> inline const RBN100::FReprotGridMap *Report::data_as<RBN100::FReprotGridMap>() const {
  return data_as_FReprotGridMap();
}

template<> inline const RBN100::FReportTaskStatus *Report::data_as<RBN100::FReportTaskStatus>() const {
  return data_as_FReportTaskStatus();
}

template<> inline const RBN100::FReportFault *Report::data_as<RBN100::FReportFault>() const {
  return data_as_FReportFault();
}

template<> inline const RBN100::FReprotSelfTestPro *Report::data_as<RBN100::FReprotSelfTestPro>() const {
  return data_as_FReprotSelfTestPro();
}

template<> inline const RBN100::FReprotGetWifi *Report::data_as<RBN100::FReprotGetWifi>() const {
  return data_as_FReprotGetWifi();
}

template<> inline const RBN100::FReprotGetBattery *Report::data_as<RBN100::FReprotGetBattery>() const {
  return data_as_FReprotGetBattery();
}

template<> inline const RBN100::FReportElevatorCtrl *Report::data_as<RBN100::FReportElevatorCtrl>() const {
  return data_as_FReportElevatorCtrl();
}

struct ReportBuilder {
  typedef Report Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(RBN100::FReportType type) {
    fbb_.AddElement<int8_t>(Report::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_data_type(RBN100::FReportDataField data_type) {
    fbb_.AddElement<uint8_t>(Report::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Report::VT_DATA, data);
  }
  explicit ReportBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReportBuilder &operator=(const ReportBuilder &);
  flatbuffers::Offset<Report> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Report>(end);
    return o;
  }
};

inline flatbuffers::Offset<Report> CreateReport(
    flatbuffers::FlatBufferBuilder &_fbb,
    RBN100::FReportType type = RBN100::FReportType_ReprotVideo,
    RBN100::FReportDataField data_type = RBN100::FReportDataField_NONE,
    flatbuffers::Offset<void> data = 0) {
  ReportBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyFReportDataField(flatbuffers::Verifier &verifier, const void *obj, FReportDataField type) {
  switch (type) {
    case FReportDataField_NONE: {
      return true;
    }
    case FReportDataField_FReportScanQR: {
      auto ptr = reinterpret_cast<const RBN100::FReportScanQR *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReportImage: {
      auto ptr = reinterpret_cast<const RBN100::FReportImage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReportNeedCreateMap: {
      auto ptr = reinterpret_cast<const RBN100::FReportNeedCreateMap *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReprotGridMap: {
      auto ptr = reinterpret_cast<const RBN100::FReprotGridMap *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReportTaskStatus: {
      auto ptr = reinterpret_cast<const RBN100::FReportTaskStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReportFault: {
      auto ptr = reinterpret_cast<const RBN100::FReportFault *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReprotSelfTestPro: {
      auto ptr = reinterpret_cast<const RBN100::FReprotSelfTestPro *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReprotGetWifi: {
      auto ptr = reinterpret_cast<const RBN100::FReprotGetWifi *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReprotGetBattery: {
      auto ptr = reinterpret_cast<const RBN100::FReprotGetBattery *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FReportDataField_FReportElevatorCtrl: {
      auto ptr = reinterpret_cast<const RBN100::FReportElevatorCtrl *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyFReportDataFieldVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFReportDataField(
        verifier,  values->Get(i), types->GetEnum<FReportDataField>(i))) {
      return false;
    }
  }
  return true;
}

inline const RBN100::Report *GetReport(const void *buf) {
  return flatbuffers::GetRoot<RBN100::Report>(buf);
}

inline const RBN100::Report *GetSizePrefixedReport(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<RBN100::Report>(buf);
}

inline bool VerifyReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RBN100::Report>(nullptr);
}

inline bool VerifySizePrefixedReportBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RBN100::Report>(nullptr);
}

inline void FinishReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Report> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedReportBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<RBN100::Report> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RBN100

#endif  // FLATBUFFERS_GENERATED_REPORT_RBN100_H_
